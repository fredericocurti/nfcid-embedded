
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005948  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405948  00405948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00405950  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a248  204009d0  00406320  000209d0  2**3
                  ALLOC
  4 .stack        00002000  2040ac18  00410568  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040cc18  00412568  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ec44  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000043a5  00000000  00000000  0003f69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000085ec  00000000  00000000  00043a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e38  00000000  00000000  0004c02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001000  00000000  00000000  0004ce64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001f9cb  00000000  00000000  0004de64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010106  00000000  00000000  0006d82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093936  00000000  00000000  0007d935  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002e70  00000000  00000000  0011126c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 cc 40 20 d1 20 40 00 cf 20 40 00 cf 20 40 00     ..@ . @.. @.. @.
  400010:	cf 20 40 00 cf 20 40 00 cf 20 40 00 00 00 00 00     . @.. @.. @.....
	...
  40002c:	95 02 40 00 cf 20 40 00 00 00 00 00 11 03 40 00     ..@.. @.......@.
  40003c:	61 03 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     a.@.. @.. @.. @.
  40004c:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  40005c:	cf 20 40 00 cf 20 40 00 00 00 00 00 b9 1d 40 00     . @.. @.......@.
  40006c:	cd 1d 40 00 e1 1d 40 00 91 17 40 00 cf 20 40 00     ..@...@...@.. @.
  40007c:	cf 20 40 00 f5 1d 40 00 09 1e 40 00 cf 20 40 00     . @...@...@.. @.
  40008c:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  40009c:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  4000ac:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  4000bc:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  4000cc:	cf 20 40 00 00 00 00 00 cf 20 40 00 00 00 00 00     . @...... @.....
  4000dc:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  4000ec:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  4000fc:	cf 20 40 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     . @.. @.. @.. @.
  40010c:	cf 20 40 00 cf 20 40 00 00 00 00 00 00 00 00 00     . @.. @.........
  40011c:	00 00 00 00 cf 20 40 00 cf 20 40 00 cf 20 40 00     ..... @.. @.. @.
  40012c:	cf 20 40 00 cf 20 40 00 00 00 00 00 cf 20 40 00     . @.. @...... @.
  40013c:	cf 20 40 00                                         . @.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00405950 	.word	0x00405950

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00405950 	.word	0x00405950
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00405950 	.word	0x00405950
  4001a8:	00000000 	.word	0x00000000

004001ac <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  4001ac:	f100 0308 	add.w	r3, r0, #8
  4001b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4001b2:	f04f 32ff 	mov.w	r2, #4294967295
  4001b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  4001b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  4001ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  4001bc:	2300      	movs	r3, #0
  4001be:	6003      	str	r3, [r0, #0]
  4001c0:	4770      	bx	lr

004001c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4001c2:	2300      	movs	r3, #0
  4001c4:	6103      	str	r3, [r0, #16]
  4001c6:	4770      	bx	lr

004001c8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  4001c8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  4001ca:	685a      	ldr	r2, [r3, #4]
  4001cc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4001ce:	6842      	ldr	r2, [r0, #4]
  4001d0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4001d2:	685a      	ldr	r2, [r3, #4]
  4001d4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4001d6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4001d8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4001da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4001dc:	6803      	ldr	r3, [r0, #0]
  4001de:	3301      	adds	r3, #1
  4001e0:	6003      	str	r3, [r0, #0]
  4001e2:	4770      	bx	lr

004001e4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4001e4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4001e6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4001e8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4001ec:	d016      	beq.n	40021c <vListInsert+0x38>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4001ee:	f100 0308 	add.w	r3, r0, #8
  4001f2:	68c2      	ldr	r2, [r0, #12]
  4001f4:	6812      	ldr	r2, [r2, #0]
  4001f6:	4294      	cmp	r4, r2
  4001f8:	d304      	bcc.n	400204 <vListInsert+0x20>
  4001fa:	685b      	ldr	r3, [r3, #4]
  4001fc:	685a      	ldr	r2, [r3, #4]
  4001fe:	6812      	ldr	r2, [r2, #0]
  400200:	4294      	cmp	r4, r2
  400202:	d2fa      	bcs.n	4001fa <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400204:	685a      	ldr	r2, [r3, #4]
  400206:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400208:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40020a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40020c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40020e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400210:	6803      	ldr	r3, [r0, #0]
  400212:	3301      	adds	r3, #1
  400214:	6003      	str	r3, [r0, #0]
}
  400216:	f85d 4b04 	ldr.w	r4, [sp], #4
  40021a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  40021c:	6903      	ldr	r3, [r0, #16]
  40021e:	e7f1      	b.n	400204 <vListInsert+0x20>

00400220 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400220:	6843      	ldr	r3, [r0, #4]
  400222:	6882      	ldr	r2, [r0, #8]
  400224:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400226:	6883      	ldr	r3, [r0, #8]
  400228:	6842      	ldr	r2, [r0, #4]
  40022a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40022c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40022e:	685a      	ldr	r2, [r3, #4]
  400230:	4290      	cmp	r0, r2
  400232:	d006      	beq.n	400242 <uxListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
  400234:	2200      	movs	r2, #0
  400236:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	3a01      	subs	r2, #1
  40023c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  40023e:	6818      	ldr	r0, [r3, #0]
}
  400240:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400242:	6882      	ldr	r2, [r0, #8]
  400244:	605a      	str	r2, [r3, #4]
  400246:	e7f5      	b.n	400234 <uxListRemove+0x14>

00400248 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  400248:	4803      	ldr	r0, [pc, #12]	; (400258 <prvPortStartFirstTask+0x10>)
  40024a:	6800      	ldr	r0, [r0, #0]
  40024c:	6800      	ldr	r0, [r0, #0]
  40024e:	f380 8808 	msr	MSP, r0
  400252:	b662      	cpsie	i
  400254:	df00      	svc	0
  400256:	bf00      	nop
  400258:	e000ed08 	.word	0xe000ed08

0040025c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40025c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40026c <vPortEnableVFP+0x10>
  400260:	6801      	ldr	r1, [r0, #0]
  400262:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400266:	6001      	str	r1, [r0, #0]
  400268:	4770      	bx	lr
  40026a:	0000      	.short	0x0000
  40026c:	e000ed88 	.word	0xe000ed88

00400270 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400274:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400278:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;    /* LR */
  40027c:	2300      	movs	r3, #0
  40027e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400282:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400286:	f06f 0302 	mvn.w	r3, #2
  40028a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40028e:	3844      	subs	r0, #68	; 0x44
  400290:	4770      	bx	lr
	...

00400294 <SVC_Handler>:
	__asm volatile (
  400294:	4b05      	ldr	r3, [pc, #20]	; (4002ac <pxCurrentTCBConst2>)
  400296:	6819      	ldr	r1, [r3, #0]
  400298:	6808      	ldr	r0, [r1, #0]
  40029a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40029e:	f380 8809 	msr	PSP, r0
  4002a2:	f04f 0000 	mov.w	r0, #0
  4002a6:	f380 8811 	msr	BASEPRI, r0
  4002aa:	4770      	bx	lr

004002ac <pxCurrentTCBConst2>:
  4002ac:	2040a9f8 	.word	0x2040a9f8

004002b0 <vPortYieldFromISR>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4002b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b4:	4b01      	ldr	r3, [pc, #4]	; (4002bc <vPortYieldFromISR+0xc>)
  4002b6:	601a      	str	r2, [r3, #0]
  4002b8:	4770      	bx	lr
  4002ba:	bf00      	nop
  4002bc:	e000ed04 	.word	0xe000ed04

004002c0 <ulPortSetInterruptMask>:
	__asm volatile \
  4002c0:	f3ef 8011 	mrs	r0, BASEPRI
  4002c4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4002c8:	f381 8811 	msr	BASEPRI, r1
  4002cc:	4770      	bx	lr
}
  4002ce:	2000      	movs	r0, #0

004002d0 <vPortEnterCritical>:
{
  4002d0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  4002d2:	4b03      	ldr	r3, [pc, #12]	; (4002e0 <vPortEnterCritical+0x10>)
  4002d4:	4798      	blx	r3
	uxCriticalNesting++;
  4002d6:	4a03      	ldr	r2, [pc, #12]	; (4002e4 <vPortEnterCritical+0x14>)
  4002d8:	6813      	ldr	r3, [r2, #0]
  4002da:	3301      	adds	r3, #1
  4002dc:	6013      	str	r3, [r2, #0]
  4002de:	bd08      	pop	{r3, pc}
  4002e0:	004002c1 	.word	0x004002c1
  4002e4:	2040000c 	.word	0x2040000c

004002e8 <vPortClearInterruptMask>:
	__asm volatile \
  4002e8:	f380 8811 	msr	BASEPRI, r0
  4002ec:	4770      	bx	lr
	...

004002f0 <vPortExitCritical>:
{
  4002f0:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  4002f2:	4a05      	ldr	r2, [pc, #20]	; (400308 <vPortExitCritical+0x18>)
  4002f4:	6813      	ldr	r3, [r2, #0]
  4002f6:	3b01      	subs	r3, #1
  4002f8:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  4002fa:	b103      	cbz	r3, 4002fe <vPortExitCritical+0xe>
  4002fc:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
  4002fe:	2000      	movs	r0, #0
  400300:	4b02      	ldr	r3, [pc, #8]	; (40030c <vPortExitCritical+0x1c>)
  400302:	4798      	blx	r3
}
  400304:	e7fa      	b.n	4002fc <vPortExitCritical+0xc>
  400306:	bf00      	nop
  400308:	2040000c 	.word	0x2040000c
  40030c:	004002e9 	.word	0x004002e9

00400310 <PendSV_Handler>:
	__asm volatile
  400310:	f3ef 8009 	mrs	r0, PSP
  400314:	4b11      	ldr	r3, [pc, #68]	; (40035c <pxCurrentTCBConst>)
  400316:	681a      	ldr	r2, [r3, #0]
  400318:	f01e 0f10 	tst.w	lr, #16
  40031c:	bf08      	it	eq
  40031e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400322:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400326:	6010      	str	r0, [r2, #0]
  400328:	e92d 4008 	stmdb	sp!, {r3, lr}
  40032c:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  400330:	f380 8811 	msr	BASEPRI, r0
  400334:	f000 feb6 	bl	4010a4 <vTaskSwitchContext>
  400338:	f04f 0000 	mov.w	r0, #0
  40033c:	f380 8811 	msr	BASEPRI, r0
  400340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400344:	6819      	ldr	r1, [r3, #0]
  400346:	6808      	ldr	r0, [r1, #0]
  400348:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40034c:	f01e 0f10 	tst.w	lr, #16
  400350:	bf08      	it	eq
  400352:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400356:	f380 8809 	msr	PSP, r0
  40035a:	4770      	bx	lr

0040035c <pxCurrentTCBConst>:
  40035c:	2040a9f8 	.word	0x2040a9f8

00400360 <SysTick_Handler>:
{
  400360:	b508      	push	{r3, lr}
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <SysTick_Handler+0x1c>)
  400368:	601a      	str	r2, [r3, #0]
	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  40036a:	4b05      	ldr	r3, [pc, #20]	; (400380 <SysTick_Handler+0x20>)
  40036c:	4798      	blx	r3
		vTaskIncrementTick();
  40036e:	4b05      	ldr	r3, [pc, #20]	; (400384 <SysTick_Handler+0x24>)
  400370:	4798      	blx	r3
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400372:	2000      	movs	r0, #0
  400374:	4b04      	ldr	r3, [pc, #16]	; (400388 <SysTick_Handler+0x28>)
  400376:	4798      	blx	r3
  400378:	bd08      	pop	{r3, pc}
  40037a:	bf00      	nop
  40037c:	e000ed04 	.word	0xe000ed04
  400380:	004002c1 	.word	0x004002c1
  400384:	00400dad 	.word	0x00400dad
  400388:	004002e9 	.word	0x004002e9

0040038c <vPortSetupTimerInterrupt>:
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40038c:	4a03      	ldr	r2, [pc, #12]	; (40039c <vPortSetupTimerInterrupt+0x10>)
  40038e:	4b04      	ldr	r3, [pc, #16]	; (4003a0 <vPortSetupTimerInterrupt+0x14>)
  400390:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400392:	2207      	movs	r2, #7
  400394:	3b04      	subs	r3, #4
  400396:	601a      	str	r2, [r3, #0]
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	000493df 	.word	0x000493df
  4003a0:	e000e014 	.word	0xe000e014

004003a4 <xPortStartScheduler>:
{
  4003a4:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4003a6:	4b0c      	ldr	r3, [pc, #48]	; (4003d8 <xPortStartScheduler+0x34>)
  4003a8:	681a      	ldr	r2, [r3, #0]
  4003aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4003ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4003b0:	681a      	ldr	r2, [r3, #0]
  4003b2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4003b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4003b8:	4b08      	ldr	r3, [pc, #32]	; (4003dc <xPortStartScheduler+0x38>)
  4003ba:	4798      	blx	r3
	uxCriticalNesting = 0;
  4003bc:	2400      	movs	r4, #0
  4003be:	4b08      	ldr	r3, [pc, #32]	; (4003e0 <xPortStartScheduler+0x3c>)
  4003c0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4003c2:	4b08      	ldr	r3, [pc, #32]	; (4003e4 <xPortStartScheduler+0x40>)
  4003c4:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  4003c6:	4a08      	ldr	r2, [pc, #32]	; (4003e8 <xPortStartScheduler+0x44>)
  4003c8:	6813      	ldr	r3, [r2, #0]
  4003ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4003ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4003d0:	4b06      	ldr	r3, [pc, #24]	; (4003ec <xPortStartScheduler+0x48>)
  4003d2:	4798      	blx	r3
}
  4003d4:	4620      	mov	r0, r4
  4003d6:	bd10      	pop	{r4, pc}
  4003d8:	e000ed20 	.word	0xe000ed20
  4003dc:	0040038d 	.word	0x0040038d
  4003e0:	2040000c 	.word	0x2040000c
  4003e4:	0040025d 	.word	0x0040025d
  4003e8:	e000ef34 	.word	0xe000ef34
  4003ec:	00400249 	.word	0x00400249

004003f0 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  4003f0:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  4003f2:	4a13      	ldr	r2, [pc, #76]	; (400440 <prvInsertBlockIntoFreeList+0x50>)
  4003f4:	e000      	b.n	4003f8 <prvInsertBlockIntoFreeList+0x8>
  4003f6:	461a      	mov	r2, r3
  4003f8:	6813      	ldr	r3, [r2, #0]
  4003fa:	4283      	cmp	r3, r0
  4003fc:	d3fb      	bcc.n	4003f6 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4003fe:	6851      	ldr	r1, [r2, #4]
  400400:	1854      	adds	r4, r2, r1
  400402:	42a0      	cmp	r0, r4
  400404:	d00a      	beq.n	40041c <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400406:	6841      	ldr	r1, [r0, #4]
  400408:	1844      	adds	r4, r0, r1
  40040a:	42a3      	cmp	r3, r4
  40040c:	d00b      	beq.n	400426 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  40040e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400410:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400412:	bf18      	it	ne
  400414:	6010      	strne	r0, [r2, #0]
	}
}
  400416:	f85d 4b04 	ldr.w	r4, [sp], #4
  40041a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  40041c:	6840      	ldr	r0, [r0, #4]
  40041e:	4401      	add	r1, r0
  400420:	6051      	str	r1, [r2, #4]
  400422:	4610      	mov	r0, r2
  400424:	e7ef      	b.n	400406 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400426:	4c07      	ldr	r4, [pc, #28]	; (400444 <prvInsertBlockIntoFreeList+0x54>)
  400428:	6824      	ldr	r4, [r4, #0]
  40042a:	42a3      	cmp	r3, r4
  40042c:	d006      	beq.n	40043c <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40042e:	685b      	ldr	r3, [r3, #4]
  400430:	4419      	add	r1, r3
  400432:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400434:	6813      	ldr	r3, [r2, #0]
  400436:	681b      	ldr	r3, [r3, #0]
  400438:	6003      	str	r3, [r0, #0]
  40043a:	e7e9      	b.n	400410 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40043c:	6003      	str	r3, [r0, #0]
  40043e:	e7e7      	b.n	400410 <prvInsertBlockIntoFreeList+0x20>
  400440:	2040a9f0 	.word	0x2040a9f0
  400444:	204009ec 	.word	0x204009ec

00400448 <pvPortMalloc>:
{
  400448:	b538      	push	{r3, r4, r5, lr}
  40044a:	4604      	mov	r4, r0
	vTaskSuspendAll();
  40044c:	4b2c      	ldr	r3, [pc, #176]	; (400500 <pvPortMalloc+0xb8>)
  40044e:	4798      	blx	r3
		if( pxEnd == NULL )
  400450:	4b2c      	ldr	r3, [pc, #176]	; (400504 <pvPortMalloc+0xbc>)
  400452:	681b      	ldr	r3, [r3, #0]
  400454:	b18b      	cbz	r3, 40047a <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
  400456:	2c00      	cmp	r4, #0
  400458:	d04b      	beq.n	4004f2 <pvPortMalloc+0xaa>
			xWantedSize += heapSTRUCT_SIZE;
  40045a:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40045e:	f012 0f07 	tst.w	r2, #7
  400462:	d002      	beq.n	40046a <pvPortMalloc+0x22>
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400464:	f022 0207 	bic.w	r2, r2, #7
  400468:	3208      	adds	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  40046a:	1e51      	subs	r1, r2, #1
  40046c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
  400470:	4299      	cmp	r1, r3
  400472:	d83b      	bhi.n	4004ec <pvPortMalloc+0xa4>
			pxBlock = xStart.pxNextFreeBlock;
  400474:	4924      	ldr	r1, [pc, #144]	; (400508 <pvPortMalloc+0xc0>)
  400476:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400478:	e016      	b.n	4004a8 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  40047a:	4a23      	ldr	r2, [pc, #140]	; (400508 <pvPortMalloc+0xc0>)
  40047c:	4b23      	ldr	r3, [pc, #140]	; (40050c <pvPortMalloc+0xc4>)
  40047e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  400480:	2100      	movs	r1, #0
  400482:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
  400484:	f649 72f0 	movw	r2, #40944	; 0x9ff0
  400488:	1898      	adds	r0, r3, r2
  40048a:	4d1e      	ldr	r5, [pc, #120]	; (400504 <pvPortMalloc+0xbc>)
  40048c:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
  40048e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
  400492:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
  400494:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400496:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400498:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40049a:	4a1d      	ldr	r2, [pc, #116]	; (400510 <pvPortMalloc+0xc8>)
  40049c:	6813      	ldr	r3, [r2, #0]
  40049e:	3b10      	subs	r3, #16
  4004a0:	6013      	str	r3, [r2, #0]
  4004a2:	e7d8      	b.n	400456 <pvPortMalloc+0xe>
  4004a4:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
  4004a6:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4004a8:	6863      	ldr	r3, [r4, #4]
  4004aa:	429a      	cmp	r2, r3
  4004ac:	d902      	bls.n	4004b4 <pvPortMalloc+0x6c>
  4004ae:	6823      	ldr	r3, [r4, #0]
  4004b0:	2b00      	cmp	r3, #0
  4004b2:	d1f7      	bne.n	4004a4 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <pvPortMalloc+0xbc>)
  4004b6:	681b      	ldr	r3, [r3, #0]
  4004b8:	429c      	cmp	r4, r3
  4004ba:	d017      	beq.n	4004ec <pvPortMalloc+0xa4>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4004bc:	680d      	ldr	r5, [r1, #0]
  4004be:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4004c0:	6823      	ldr	r3, [r4, #0]
  4004c2:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4004c4:	6863      	ldr	r3, [r4, #4]
  4004c6:	1a9b      	subs	r3, r3, r2
  4004c8:	2b20      	cmp	r3, #32
  4004ca:	d809      	bhi.n	4004e0 <pvPortMalloc+0x98>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4004cc:	4a10      	ldr	r2, [pc, #64]	; (400510 <pvPortMalloc+0xc8>)
  4004ce:	6813      	ldr	r3, [r2, #0]
  4004d0:	6861      	ldr	r1, [r4, #4]
  4004d2:	1a5b      	subs	r3, r3, r1
  4004d4:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <pvPortMalloc+0xcc>)
  4004d8:	4798      	blx	r3
		if( pvReturn == NULL )
  4004da:	b165      	cbz	r5, 4004f6 <pvPortMalloc+0xae>
}
  4004dc:	4628      	mov	r0, r5
  4004de:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4004e0:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4004e2:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  4004e4:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4004e6:	4b0c      	ldr	r3, [pc, #48]	; (400518 <pvPortMalloc+0xd0>)
  4004e8:	4798      	blx	r3
  4004ea:	e7ef      	b.n	4004cc <pvPortMalloc+0x84>
	xTaskResumeAll();
  4004ec:	4b09      	ldr	r3, [pc, #36]	; (400514 <pvPortMalloc+0xcc>)
  4004ee:	4798      	blx	r3
  4004f0:	e001      	b.n	4004f6 <pvPortMalloc+0xae>
  4004f2:	4b08      	ldr	r3, [pc, #32]	; (400514 <pvPortMalloc+0xcc>)
  4004f4:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4004f6:	4b09      	ldr	r3, [pc, #36]	; (40051c <pvPortMalloc+0xd4>)
  4004f8:	4798      	blx	r3
  4004fa:	2500      	movs	r5, #0
	return pvReturn;
  4004fc:	e7ee      	b.n	4004dc <pvPortMalloc+0x94>
  4004fe:	bf00      	nop
  400500:	00400d7d 	.word	0x00400d7d
  400504:	204009ec 	.word	0x204009ec
  400508:	2040a9f0 	.word	0x2040a9f0
  40050c:	204009f0 	.word	0x204009f0
  400510:	20400010 	.word	0x20400010
  400514:	00400ed1 	.word	0x00400ed1
  400518:	004003f1 	.word	0x004003f1
  40051c:	004025f5 	.word	0x004025f5

00400520 <vPortFree>:
	if( pv != NULL )
  400520:	b180      	cbz	r0, 400544 <vPortFree+0x24>
{
  400522:	b510      	push	{r4, lr}
  400524:	4604      	mov	r4, r0
		vTaskSuspendAll();
  400526:	4b08      	ldr	r3, [pc, #32]	; (400548 <vPortFree+0x28>)
  400528:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
  40052a:	4a08      	ldr	r2, [pc, #32]	; (40054c <vPortFree+0x2c>)
  40052c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  400530:	6811      	ldr	r1, [r2, #0]
  400532:	440b      	add	r3, r1
  400534:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  400536:	f1a4 0010 	sub.w	r0, r4, #16
  40053a:	4b05      	ldr	r3, [pc, #20]	; (400550 <vPortFree+0x30>)
  40053c:	4798      	blx	r3
		xTaskResumeAll();
  40053e:	4b05      	ldr	r3, [pc, #20]	; (400554 <vPortFree+0x34>)
  400540:	4798      	blx	r3
  400542:	bd10      	pop	{r4, pc}
  400544:	4770      	bx	lr
  400546:	bf00      	nop
  400548:	00400d7d 	.word	0x00400d7d
  40054c:	20400010 	.word	0x20400010
  400550:	004003f1 	.word	0x004003f1
  400554:	00400ed1 	.word	0x00400ed1

00400558 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400558:	b510      	push	{r4, lr}
  40055a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  40055c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40055e:	b95b      	cbnz	r3, 400578 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400560:	6803      	ldr	r3, [r0, #0]
  400562:	b11b      	cbz	r3, 40056c <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400564:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400566:	3301      	adds	r3, #1
  400568:	63a3      	str	r3, [r4, #56]	; 0x38
  40056a:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40056c:	6840      	ldr	r0, [r0, #4]
  40056e:	4b12      	ldr	r3, [pc, #72]	; (4005b8 <prvCopyDataToQueue+0x60>)
  400570:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400572:	2300      	movs	r3, #0
  400574:	6063      	str	r3, [r4, #4]
  400576:	e7f5      	b.n	400564 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
  400578:	b96a      	cbnz	r2, 400596 <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40057a:	461a      	mov	r2, r3
  40057c:	6880      	ldr	r0, [r0, #8]
  40057e:	4b0f      	ldr	r3, [pc, #60]	; (4005bc <prvCopyDataToQueue+0x64>)
  400580:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400582:	68a3      	ldr	r3, [r4, #8]
  400584:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400586:	4413      	add	r3, r2
  400588:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40058a:	6862      	ldr	r2, [r4, #4]
  40058c:	4293      	cmp	r3, r2
  40058e:	d3e9      	bcc.n	400564 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400590:	6823      	ldr	r3, [r4, #0]
  400592:	60a3      	str	r3, [r4, #8]
  400594:	e7e6      	b.n	400564 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400596:	461a      	mov	r2, r3
  400598:	68c0      	ldr	r0, [r0, #12]
  40059a:	4b08      	ldr	r3, [pc, #32]	; (4005bc <prvCopyDataToQueue+0x64>)
  40059c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  40059e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4005a0:	4252      	negs	r2, r2
  4005a2:	68e3      	ldr	r3, [r4, #12]
  4005a4:	4413      	add	r3, r2
  4005a6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4005a8:	6821      	ldr	r1, [r4, #0]
  4005aa:	428b      	cmp	r3, r1
  4005ac:	d2da      	bcs.n	400564 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4005ae:	6863      	ldr	r3, [r4, #4]
  4005b0:	441a      	add	r2, r3
  4005b2:	60e2      	str	r2, [r4, #12]
  4005b4:	e7d6      	b.n	400564 <prvCopyDataToQueue+0xc>
  4005b6:	bf00      	nop
  4005b8:	004013d1 	.word	0x004013d1
  4005bc:	0040274d 	.word	0x0040274d

004005c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4005c0:	b538      	push	{r3, r4, r5, lr}
  4005c2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4005c4:	6800      	ldr	r0, [r0, #0]
  4005c6:	b158      	cbz	r0, 4005e0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4005c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4005ca:	68dc      	ldr	r4, [r3, #12]
  4005cc:	4414      	add	r4, r2
  4005ce:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4005d0:	685d      	ldr	r5, [r3, #4]
  4005d2:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4005d4:	bf28      	it	cs
  4005d6:	60d8      	strcs	r0, [r3, #12]
  4005d8:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4005da:	68d9      	ldr	r1, [r3, #12]
  4005dc:	4b01      	ldr	r3, [pc, #4]	; (4005e4 <prvCopyDataFromQueue+0x24>)
  4005de:	4798      	blx	r3
  4005e0:	bd38      	pop	{r3, r4, r5, pc}
  4005e2:	bf00      	nop
  4005e4:	0040274d 	.word	0x0040274d

004005e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005ea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4005ec:	4b1f      	ldr	r3, [pc, #124]	; (40066c <prvUnlockQueue+0x84>)
  4005ee:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4005f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4005f2:	2b00      	cmp	r3, #0
  4005f4:	dd14      	ble.n	400620 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4005f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4005f8:	b193      	cbz	r3, 400620 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4005fa:	f104 0624 	add.w	r6, r4, #36	; 0x24
  4005fe:	4d1c      	ldr	r5, [pc, #112]	; (400670 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400600:	4f1c      	ldr	r7, [pc, #112]	; (400674 <prvUnlockQueue+0x8c>)
  400602:	e007      	b.n	400614 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
  400604:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400606:	3b01      	subs	r3, #1
  400608:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40060a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40060c:	2b00      	cmp	r3, #0
  40060e:	dd07      	ble.n	400620 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400610:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400612:	b12b      	cbz	r3, 400620 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400614:	4630      	mov	r0, r6
  400616:	47a8      	blx	r5
  400618:	2800      	cmp	r0, #0
  40061a:	d0f3      	beq.n	400604 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
  40061c:	47b8      	blx	r7
  40061e:	e7f1      	b.n	400604 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400620:	f04f 33ff 	mov.w	r3, #4294967295
  400624:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400626:	4b14      	ldr	r3, [pc, #80]	; (400678 <prvUnlockQueue+0x90>)
  400628:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40062a:	4b10      	ldr	r3, [pc, #64]	; (40066c <prvUnlockQueue+0x84>)
  40062c:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40062e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400630:	2b00      	cmp	r3, #0
  400632:	dd14      	ble.n	40065e <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400634:	6923      	ldr	r3, [r4, #16]
  400636:	b193      	cbz	r3, 40065e <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400638:	f104 0610 	add.w	r6, r4, #16
  40063c:	4d0c      	ldr	r5, [pc, #48]	; (400670 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
  40063e:	4f0d      	ldr	r7, [pc, #52]	; (400674 <prvUnlockQueue+0x8c>)
  400640:	e007      	b.n	400652 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
  400642:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400644:	3b01      	subs	r3, #1
  400646:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400648:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40064a:	2b00      	cmp	r3, #0
  40064c:	dd07      	ble.n	40065e <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40064e:	6923      	ldr	r3, [r4, #16]
  400650:	b12b      	cbz	r3, 40065e <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400652:	4630      	mov	r0, r6
  400654:	47a8      	blx	r5
  400656:	2800      	cmp	r0, #0
  400658:	d0f3      	beq.n	400642 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
  40065a:	47b8      	blx	r7
  40065c:	e7f1      	b.n	400642 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40065e:	f04f 33ff 	mov.w	r3, #4294967295
  400662:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400664:	4b04      	ldr	r3, [pc, #16]	; (400678 <prvUnlockQueue+0x90>)
  400666:	4798      	blx	r3
  400668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40066a:	bf00      	nop
  40066c:	004002d1 	.word	0x004002d1
  400670:	004011e9 	.word	0x004011e9
  400674:	00401319 	.word	0x00401319
  400678:	004002f1 	.word	0x004002f1

0040067c <xQueueGenericReset>:
{
  40067c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40067e:	b308      	cbz	r0, 4006c4 <xQueueGenericReset+0x48>
  400680:	460d      	mov	r5, r1
  400682:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400684:	4b17      	ldr	r3, [pc, #92]	; (4006e4 <xQueueGenericReset+0x68>)
  400686:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400688:	6822      	ldr	r2, [r4, #0]
  40068a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40068c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40068e:	fb03 f301 	mul.w	r3, r3, r1
  400692:	18d0      	adds	r0, r2, r3
  400694:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  400696:	2000      	movs	r0, #0
  400698:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40069a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  40069c:	1a5b      	subs	r3, r3, r1
  40069e:	4413      	add	r3, r2
  4006a0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4006a2:	f04f 33ff 	mov.w	r3, #4294967295
  4006a6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4006a8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4006aa:	b995      	cbnz	r5, 4006d2 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4006ac:	6923      	ldr	r3, [r4, #16]
  4006ae:	b12b      	cbz	r3, 4006bc <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4006b0:	f104 0010 	add.w	r0, r4, #16
  4006b4:	4b0c      	ldr	r3, [pc, #48]	; (4006e8 <xQueueGenericReset+0x6c>)
  4006b6:	4798      	blx	r3
  4006b8:	2801      	cmp	r0, #1
  4006ba:	d007      	beq.n	4006cc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
  4006bc:	4b0b      	ldr	r3, [pc, #44]	; (4006ec <xQueueGenericReset+0x70>)
  4006be:	4798      	blx	r3
}
  4006c0:	2001      	movs	r0, #1
  4006c2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  4006c4:	4b0a      	ldr	r3, [pc, #40]	; (4006f0 <xQueueGenericReset+0x74>)
  4006c6:	4798      	blx	r3
  4006c8:	bf00      	nop
  4006ca:	e7fd      	b.n	4006c8 <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
  4006cc:	4b09      	ldr	r3, [pc, #36]	; (4006f4 <xQueueGenericReset+0x78>)
  4006ce:	4798      	blx	r3
  4006d0:	e7f4      	b.n	4006bc <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4006d2:	f104 0010 	add.w	r0, r4, #16
  4006d6:	4d08      	ldr	r5, [pc, #32]	; (4006f8 <xQueueGenericReset+0x7c>)
  4006d8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4006da:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4006de:	47a8      	blx	r5
  4006e0:	e7ec      	b.n	4006bc <xQueueGenericReset+0x40>
  4006e2:	bf00      	nop
  4006e4:	004002d1 	.word	0x004002d1
  4006e8:	004011e9 	.word	0x004011e9
  4006ec:	004002f1 	.word	0x004002f1
  4006f0:	004002c1 	.word	0x004002c1
  4006f4:	004002b1 	.word	0x004002b1
  4006f8:	004001ad 	.word	0x004001ad

004006fc <xQueueGenericCreate>:
{
  4006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4006fe:	b1d8      	cbz	r0, 400738 <xQueueGenericCreate+0x3c>
  400700:	460d      	mov	r5, r1
  400702:	4617      	mov	r7, r2
  400704:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400706:	2050      	movs	r0, #80	; 0x50
  400708:	4b0d      	ldr	r3, [pc, #52]	; (400740 <xQueueGenericCreate+0x44>)
  40070a:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40070c:	4604      	mov	r4, r0
  40070e:	b198      	cbz	r0, 400738 <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400710:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400714:	3001      	adds	r0, #1
  400716:	4b0a      	ldr	r3, [pc, #40]	; (400740 <xQueueGenericCreate+0x44>)
  400718:	4798      	blx	r3
  40071a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  40071c:	b148      	cbz	r0, 400732 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
  40071e:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400720:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400722:	2101      	movs	r1, #1
  400724:	4620      	mov	r0, r4
  400726:	4b07      	ldr	r3, [pc, #28]	; (400744 <xQueueGenericCreate+0x48>)
  400728:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
  40072a:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
  40072e:	4620      	mov	r0, r4
  400730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
  400732:	4620      	mov	r0, r4
  400734:	4b04      	ldr	r3, [pc, #16]	; (400748 <xQueueGenericCreate+0x4c>)
  400736:	4798      	blx	r3
	configASSERT( xReturn );
  400738:	4b04      	ldr	r3, [pc, #16]	; (40074c <xQueueGenericCreate+0x50>)
  40073a:	4798      	blx	r3
  40073c:	bf00      	nop
  40073e:	e7fd      	b.n	40073c <xQueueGenericCreate+0x40>
  400740:	00400449 	.word	0x00400449
  400744:	0040067d 	.word	0x0040067d
  400748:	00400521 	.word	0x00400521
  40074c:	004002c1 	.word	0x004002c1

00400750 <xQueueGenericSend>:
{
  400750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400754:	b085      	sub	sp, #20
  400756:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400758:	b148      	cbz	r0, 40076e <xQueueGenericSend+0x1e>
  40075a:	4688      	mov	r8, r1
  40075c:	4699      	mov	r9, r3
  40075e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400760:	b149      	cbz	r1, 400776 <xQueueGenericSend+0x26>
  400762:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400764:	4e39      	ldr	r6, [pc, #228]	; (40084c <xQueueGenericSend+0xfc>)
					vTaskSetTimeOutState( &xTimeOut );
  400766:	f8df a110 	ldr.w	sl, [pc, #272]	; 400878 <xQueueGenericSend+0x128>
		taskEXIT_CRITICAL();
  40076a:	4d39      	ldr	r5, [pc, #228]	; (400850 <xQueueGenericSend+0x100>)
  40076c:	e034      	b.n	4007d8 <xQueueGenericSend+0x88>
	configASSERT( pxQueue );
  40076e:	4b39      	ldr	r3, [pc, #228]	; (400854 <xQueueGenericSend+0x104>)
  400770:	4798      	blx	r3
  400772:	bf00      	nop
  400774:	e7fd      	b.n	400772 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400776:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400778:	b11b      	cbz	r3, 400782 <xQueueGenericSend+0x32>
  40077a:	4b36      	ldr	r3, [pc, #216]	; (400854 <xQueueGenericSend+0x104>)
  40077c:	4798      	blx	r3
  40077e:	bf00      	nop
  400780:	e7fd      	b.n	40077e <xQueueGenericSend+0x2e>
  400782:	2700      	movs	r7, #0
  400784:	e7ee      	b.n	400764 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400786:	464a      	mov	r2, r9
  400788:	4641      	mov	r1, r8
  40078a:	4620      	mov	r0, r4
  40078c:	4b32      	ldr	r3, [pc, #200]	; (400858 <xQueueGenericSend+0x108>)
  40078e:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400790:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400792:	b92b      	cbnz	r3, 4007a0 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
  400794:	4b2e      	ldr	r3, [pc, #184]	; (400850 <xQueueGenericSend+0x100>)
  400796:	4798      	blx	r3
				return pdPASS;
  400798:	2001      	movs	r0, #1
}
  40079a:	b005      	add	sp, #20
  40079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4007a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4007a4:	4b2d      	ldr	r3, [pc, #180]	; (40085c <xQueueGenericSend+0x10c>)
  4007a6:	4798      	blx	r3
  4007a8:	2801      	cmp	r0, #1
  4007aa:	d1f3      	bne.n	400794 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
  4007ac:	4b2c      	ldr	r3, [pc, #176]	; (400860 <xQueueGenericSend+0x110>)
  4007ae:	4798      	blx	r3
  4007b0:	e7f0      	b.n	400794 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
  4007b2:	4b27      	ldr	r3, [pc, #156]	; (400850 <xQueueGenericSend+0x100>)
  4007b4:	4798      	blx	r3
					return errQUEUE_FULL;
  4007b6:	2000      	movs	r0, #0
  4007b8:	e7ef      	b.n	40079a <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
  4007ba:	a802      	add	r0, sp, #8
  4007bc:	47d0      	blx	sl
  4007be:	e015      	b.n	4007ec <xQueueGenericSend+0x9c>
		prvLockQueue( pxQueue );
  4007c0:	2300      	movs	r3, #0
  4007c2:	6463      	str	r3, [r4, #68]	; 0x44
  4007c4:	e01a      	b.n	4007fc <xQueueGenericSend+0xac>
  4007c6:	2300      	movs	r3, #0
  4007c8:	64a3      	str	r3, [r4, #72]	; 0x48
  4007ca:	e01b      	b.n	400804 <xQueueGenericSend+0xb4>
				prvUnlockQueue( pxQueue );
  4007cc:	4620      	mov	r0, r4
  4007ce:	4b25      	ldr	r3, [pc, #148]	; (400864 <xQueueGenericSend+0x114>)
  4007d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4007d2:	4b25      	ldr	r3, [pc, #148]	; (400868 <xQueueGenericSend+0x118>)
  4007d4:	4798      	blx	r3
  4007d6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4007d8:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4007da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4007dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4007de:	429a      	cmp	r2, r3
  4007e0:	d3d1      	bcc.n	400786 <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
  4007e2:	9b01      	ldr	r3, [sp, #4]
  4007e4:	2b00      	cmp	r3, #0
  4007e6:	d0e4      	beq.n	4007b2 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
  4007e8:	2f00      	cmp	r7, #0
  4007ea:	d0e6      	beq.n	4007ba <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
  4007ec:	47a8      	blx	r5
		vTaskSuspendAll();
  4007ee:	4b1f      	ldr	r3, [pc, #124]	; (40086c <xQueueGenericSend+0x11c>)
  4007f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4007f2:	47b0      	blx	r6
  4007f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4007f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4007fa:	d0e1      	beq.n	4007c0 <xQueueGenericSend+0x70>
  4007fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4007fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  400802:	d0e0      	beq.n	4007c6 <xQueueGenericSend+0x76>
  400804:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400806:	a901      	add	r1, sp, #4
  400808:	a802      	add	r0, sp, #8
  40080a:	4b19      	ldr	r3, [pc, #100]	; (400870 <xQueueGenericSend+0x120>)
  40080c:	4798      	blx	r3
  40080e:	b9a8      	cbnz	r0, 40083c <xQueueGenericSend+0xec>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  400810:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  400812:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400816:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400818:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40081a:	45bb      	cmp	fp, r7
  40081c:	d1d6      	bne.n	4007cc <xQueueGenericSend+0x7c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40081e:	9901      	ldr	r1, [sp, #4]
  400820:	f104 0010 	add.w	r0, r4, #16
  400824:	4b13      	ldr	r3, [pc, #76]	; (400874 <xQueueGenericSend+0x124>)
  400826:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400828:	4620      	mov	r0, r4
  40082a:	4b0e      	ldr	r3, [pc, #56]	; (400864 <xQueueGenericSend+0x114>)
  40082c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40082e:	4b0e      	ldr	r3, [pc, #56]	; (400868 <xQueueGenericSend+0x118>)
  400830:	4798      	blx	r3
  400832:	2800      	cmp	r0, #0
  400834:	d1cf      	bne.n	4007d6 <xQueueGenericSend+0x86>
					portYIELD_WITHIN_API();
  400836:	4b0a      	ldr	r3, [pc, #40]	; (400860 <xQueueGenericSend+0x110>)
  400838:	4798      	blx	r3
  40083a:	e7cc      	b.n	4007d6 <xQueueGenericSend+0x86>
			prvUnlockQueue( pxQueue );
  40083c:	4620      	mov	r0, r4
  40083e:	4b09      	ldr	r3, [pc, #36]	; (400864 <xQueueGenericSend+0x114>)
  400840:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400842:	4b09      	ldr	r3, [pc, #36]	; (400868 <xQueueGenericSend+0x118>)
  400844:	4798      	blx	r3
			return errQUEUE_FULL;
  400846:	2000      	movs	r0, #0
  400848:	e7a7      	b.n	40079a <xQueueGenericSend+0x4a>
  40084a:	bf00      	nop
  40084c:	004002d1 	.word	0x004002d1
  400850:	004002f1 	.word	0x004002f1
  400854:	004002c1 	.word	0x004002c1
  400858:	00400559 	.word	0x00400559
  40085c:	004011e9 	.word	0x004011e9
  400860:	004002b1 	.word	0x004002b1
  400864:	004005e9 	.word	0x004005e9
  400868:	00400ed1 	.word	0x00400ed1
  40086c:	00400d7d 	.word	0x00400d7d
  400870:	00401295 	.word	0x00401295
  400874:	00401145 	.word	0x00401145
  400878:	0040126d 	.word	0x0040126d

0040087c <xQueueGenericSendFromISR>:
{
  40087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
  400880:	b190      	cbz	r0, 4008a8 <xQueueGenericSendFromISR+0x2c>
  400882:	460e      	mov	r6, r1
  400884:	4615      	mov	r5, r2
  400886:	4698      	mov	r8, r3
  400888:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40088a:	b189      	cbz	r1, 4008b0 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40088c:	4b1a      	ldr	r3, [pc, #104]	; (4008f8 <xQueueGenericSendFromISR+0x7c>)
  40088e:	4798      	blx	r3
  400890:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400892:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400894:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400896:	429a      	cmp	r2, r3
  400898:	d311      	bcc.n	4008be <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
  40089a:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  40089c:	4638      	mov	r0, r7
  40089e:	4b17      	ldr	r3, [pc, #92]	; (4008fc <xQueueGenericSendFromISR+0x80>)
  4008a0:	4798      	blx	r3
}
  4008a2:	4620      	mov	r0, r4
  4008a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
  4008a8:	4b13      	ldr	r3, [pc, #76]	; (4008f8 <xQueueGenericSendFromISR+0x7c>)
  4008aa:	4798      	blx	r3
  4008ac:	bf00      	nop
  4008ae:	e7fd      	b.n	4008ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4008b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4008b2:	2b00      	cmp	r3, #0
  4008b4:	d0ea      	beq.n	40088c <xQueueGenericSendFromISR+0x10>
  4008b6:	4b10      	ldr	r3, [pc, #64]	; (4008f8 <xQueueGenericSendFromISR+0x7c>)
  4008b8:	4798      	blx	r3
  4008ba:	bf00      	nop
  4008bc:	e7fd      	b.n	4008ba <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4008be:	4642      	mov	r2, r8
  4008c0:	4631      	mov	r1, r6
  4008c2:	4620      	mov	r0, r4
  4008c4:	4b0e      	ldr	r3, [pc, #56]	; (400900 <xQueueGenericSendFromISR+0x84>)
  4008c6:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4008c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4008ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008ce:	d10a      	bne.n	4008e6 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4008d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4008d2:	b16b      	cbz	r3, 4008f0 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4008d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4008d8:	4b0a      	ldr	r3, [pc, #40]	; (400904 <xQueueGenericSendFromISR+0x88>)
  4008da:	4798      	blx	r3
						if( pxHigherPriorityTaskWoken != NULL )
  4008dc:	b155      	cbz	r5, 4008f4 <xQueueGenericSendFromISR+0x78>
  4008de:	b148      	cbz	r0, 4008f4 <xQueueGenericSendFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
  4008e0:	2401      	movs	r4, #1
  4008e2:	602c      	str	r4, [r5, #0]
  4008e4:	e7da      	b.n	40089c <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
  4008e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4008e8:	3301      	adds	r3, #1
  4008ea:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4008ec:	2401      	movs	r4, #1
  4008ee:	e7d5      	b.n	40089c <xQueueGenericSendFromISR+0x20>
  4008f0:	2401      	movs	r4, #1
  4008f2:	e7d3      	b.n	40089c <xQueueGenericSendFromISR+0x20>
  4008f4:	2401      	movs	r4, #1
  4008f6:	e7d1      	b.n	40089c <xQueueGenericSendFromISR+0x20>
  4008f8:	004002c1 	.word	0x004002c1
  4008fc:	004002e9 	.word	0x004002e9
  400900:	00400559 	.word	0x00400559
  400904:	004011e9 	.word	0x004011e9

00400908 <xQueueGenericReceive>:
{
  400908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40090c:	b084      	sub	sp, #16
  40090e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400910:	b148      	cbz	r0, 400926 <xQueueGenericReceive+0x1e>
  400912:	4688      	mov	r8, r1
  400914:	4699      	mov	r9, r3
  400916:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400918:	b149      	cbz	r1, 40092e <xQueueGenericReceive+0x26>
  40091a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40091c:	4e47      	ldr	r6, [pc, #284]	; (400a3c <xQueueGenericReceive+0x134>)
					vTaskSetTimeOutState( &xTimeOut );
  40091e:	f8df a150 	ldr.w	sl, [pc, #336]	; 400a70 <xQueueGenericReceive+0x168>
		taskEXIT_CRITICAL();
  400922:	4d47      	ldr	r5, [pc, #284]	; (400a40 <xQueueGenericReceive+0x138>)
  400924:	e051      	b.n	4009ca <xQueueGenericReceive+0xc2>
	configASSERT( pxQueue );
  400926:	4b47      	ldr	r3, [pc, #284]	; (400a44 <xQueueGenericReceive+0x13c>)
  400928:	4798      	blx	r3
  40092a:	bf00      	nop
  40092c:	e7fd      	b.n	40092a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40092e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400930:	b11b      	cbz	r3, 40093a <xQueueGenericReceive+0x32>
  400932:	4b44      	ldr	r3, [pc, #272]	; (400a44 <xQueueGenericReceive+0x13c>)
  400934:	4798      	blx	r3
  400936:	bf00      	nop
  400938:	e7fd      	b.n	400936 <xQueueGenericReceive+0x2e>
  40093a:	2700      	movs	r7, #0
  40093c:	e7ee      	b.n	40091c <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40093e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400940:	4641      	mov	r1, r8
  400942:	4620      	mov	r0, r4
  400944:	4b40      	ldr	r3, [pc, #256]	; (400a48 <xQueueGenericReceive+0x140>)
  400946:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400948:	f1b9 0f00 	cmp.w	r9, #0
  40094c:	d117      	bne.n	40097e <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
  40094e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400950:	3b01      	subs	r3, #1
  400952:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400954:	6823      	ldr	r3, [r4, #0]
  400956:	b913      	cbnz	r3, 40095e <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400958:	4b3c      	ldr	r3, [pc, #240]	; (400a4c <xQueueGenericReceive+0x144>)
  40095a:	4798      	blx	r3
  40095c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40095e:	6923      	ldr	r3, [r4, #16]
  400960:	b13b      	cbz	r3, 400972 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400962:	f104 0010 	add.w	r0, r4, #16
  400966:	4b3a      	ldr	r3, [pc, #232]	; (400a50 <xQueueGenericReceive+0x148>)
  400968:	4798      	blx	r3
  40096a:	2801      	cmp	r0, #1
  40096c:	d101      	bne.n	400972 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
  40096e:	4b39      	ldr	r3, [pc, #228]	; (400a54 <xQueueGenericReceive+0x14c>)
  400970:	4798      	blx	r3
				taskEXIT_CRITICAL();
  400972:	4b33      	ldr	r3, [pc, #204]	; (400a40 <xQueueGenericReceive+0x138>)
  400974:	4798      	blx	r3
				return pdPASS;
  400976:	2001      	movs	r0, #1
}
  400978:	b004      	add	sp, #16
  40097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  40097e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400980:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400982:	2b00      	cmp	r3, #0
  400984:	d0f5      	beq.n	400972 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400986:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40098a:	4b31      	ldr	r3, [pc, #196]	; (400a50 <xQueueGenericReceive+0x148>)
  40098c:	4798      	blx	r3
  40098e:	2800      	cmp	r0, #0
  400990:	d0ef      	beq.n	400972 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
  400992:	4b30      	ldr	r3, [pc, #192]	; (400a54 <xQueueGenericReceive+0x14c>)
  400994:	4798      	blx	r3
  400996:	e7ec      	b.n	400972 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
  400998:	4b29      	ldr	r3, [pc, #164]	; (400a40 <xQueueGenericReceive+0x138>)
  40099a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40099c:	2000      	movs	r0, #0
  40099e:	e7eb      	b.n	400978 <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
  4009a0:	a802      	add	r0, sp, #8
  4009a2:	47d0      	blx	sl
  4009a4:	e01a      	b.n	4009dc <xQueueGenericReceive+0xd4>
		prvLockQueue( pxQueue );
  4009a6:	2300      	movs	r3, #0
  4009a8:	6463      	str	r3, [r4, #68]	; 0x44
  4009aa:	e01f      	b.n	4009ec <xQueueGenericReceive+0xe4>
  4009ac:	2300      	movs	r3, #0
  4009ae:	64a3      	str	r3, [r4, #72]	; 0x48
  4009b0:	e020      	b.n	4009f4 <xQueueGenericReceive+0xec>
						portENTER_CRITICAL();
  4009b2:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4009b4:	6860      	ldr	r0, [r4, #4]
  4009b6:	4b28      	ldr	r3, [pc, #160]	; (400a58 <xQueueGenericReceive+0x150>)
  4009b8:	4798      	blx	r3
						portEXIT_CRITICAL();
  4009ba:	47a8      	blx	r5
  4009bc:	e028      	b.n	400a10 <xQueueGenericReceive+0x108>
				prvUnlockQueue( pxQueue );
  4009be:	4620      	mov	r0, r4
  4009c0:	4b26      	ldr	r3, [pc, #152]	; (400a5c <xQueueGenericReceive+0x154>)
  4009c2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4009c4:	4b26      	ldr	r3, [pc, #152]	; (400a60 <xQueueGenericReceive+0x158>)
  4009c6:	4798      	blx	r3
  4009c8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4009ca:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  4009cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009ce:	2b00      	cmp	r3, #0
  4009d0:	d1b5      	bne.n	40093e <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
  4009d2:	9b01      	ldr	r3, [sp, #4]
  4009d4:	2b00      	cmp	r3, #0
  4009d6:	d0df      	beq.n	400998 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
  4009d8:	2f00      	cmp	r7, #0
  4009da:	d0e1      	beq.n	4009a0 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
  4009dc:	47a8      	blx	r5
		vTaskSuspendAll();
  4009de:	4b21      	ldr	r3, [pc, #132]	; (400a64 <xQueueGenericReceive+0x15c>)
  4009e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4009e2:	47b0      	blx	r6
  4009e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4009e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009ea:	d0dc      	beq.n	4009a6 <xQueueGenericReceive+0x9e>
  4009ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009f2:	d0db      	beq.n	4009ac <xQueueGenericReceive+0xa4>
  4009f4:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4009f6:	a901      	add	r1, sp, #4
  4009f8:	a802      	add	r0, sp, #8
  4009fa:	4b1b      	ldr	r3, [pc, #108]	; (400a68 <xQueueGenericReceive+0x160>)
  4009fc:	4798      	blx	r3
  4009fe:	b9b0      	cbnz	r0, 400a2e <xQueueGenericReceive+0x126>
	taskENTER_CRITICAL();
  400a00:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  400a02:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400a04:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400a06:	2f00      	cmp	r7, #0
  400a08:	d1d9      	bne.n	4009be <xQueueGenericReceive+0xb6>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400a0a:	6823      	ldr	r3, [r4, #0]
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0d0      	beq.n	4009b2 <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400a10:	9901      	ldr	r1, [sp, #4]
  400a12:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a16:	4b15      	ldr	r3, [pc, #84]	; (400a6c <xQueueGenericReceive+0x164>)
  400a18:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400a1a:	4620      	mov	r0, r4
  400a1c:	4b0f      	ldr	r3, [pc, #60]	; (400a5c <xQueueGenericReceive+0x154>)
  400a1e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400a20:	4b0f      	ldr	r3, [pc, #60]	; (400a60 <xQueueGenericReceive+0x158>)
  400a22:	4798      	blx	r3
  400a24:	2800      	cmp	r0, #0
  400a26:	d1cf      	bne.n	4009c8 <xQueueGenericReceive+0xc0>
					portYIELD_WITHIN_API();
  400a28:	4b0a      	ldr	r3, [pc, #40]	; (400a54 <xQueueGenericReceive+0x14c>)
  400a2a:	4798      	blx	r3
  400a2c:	e7cc      	b.n	4009c8 <xQueueGenericReceive+0xc0>
			prvUnlockQueue( pxQueue );
  400a2e:	4620      	mov	r0, r4
  400a30:	4b0a      	ldr	r3, [pc, #40]	; (400a5c <xQueueGenericReceive+0x154>)
  400a32:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400a34:	4b0a      	ldr	r3, [pc, #40]	; (400a60 <xQueueGenericReceive+0x158>)
  400a36:	4798      	blx	r3
			return errQUEUE_EMPTY;
  400a38:	2000      	movs	r0, #0
  400a3a:	e79d      	b.n	400978 <xQueueGenericReceive+0x70>
  400a3c:	004002d1 	.word	0x004002d1
  400a40:	004002f1 	.word	0x004002f1
  400a44:	004002c1 	.word	0x004002c1
  400a48:	004005c1 	.word	0x004005c1
  400a4c:	00401325 	.word	0x00401325
  400a50:	004011e9 	.word	0x004011e9
  400a54:	004002b1 	.word	0x004002b1
  400a58:	00401351 	.word	0x00401351
  400a5c:	004005e9 	.word	0x004005e9
  400a60:	00400ed1 	.word	0x00400ed1
  400a64:	00400d7d 	.word	0x00400d7d
  400a68:	00401295 	.word	0x00401295
  400a6c:	00401145 	.word	0x00401145
  400a70:	0040126d 	.word	0x0040126d

00400a74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  400a74:	b538      	push	{r3, r4, r5, lr}
  400a76:	4604      	mov	r4, r0
  400a78:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  400a7a:	4b0f      	ldr	r3, [pc, #60]	; (400ab8 <vQueueWaitForMessageRestricted+0x44>)
  400a7c:	4798      	blx	r3
  400a7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a80:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a84:	d00b      	beq.n	400a9e <vQueueWaitForMessageRestricted+0x2a>
  400a86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a88:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a8c:	d00a      	beq.n	400aa4 <vQueueWaitForMessageRestricted+0x30>
  400a8e:	4b0b      	ldr	r3, [pc, #44]	; (400abc <vQueueWaitForMessageRestricted+0x48>)
  400a90:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  400a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400a94:	b14b      	cbz	r3, 400aaa <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
  400a96:	4620      	mov	r0, r4
  400a98:	4b09      	ldr	r3, [pc, #36]	; (400ac0 <vQueueWaitForMessageRestricted+0x4c>)
  400a9a:	4798      	blx	r3
  400a9c:	bd38      	pop	{r3, r4, r5, pc}
		prvLockQueue( pxQueue );
  400a9e:	2300      	movs	r3, #0
  400aa0:	6463      	str	r3, [r4, #68]	; 0x44
  400aa2:	e7f0      	b.n	400a86 <vQueueWaitForMessageRestricted+0x12>
  400aa4:	2300      	movs	r3, #0
  400aa6:	64a3      	str	r3, [r4, #72]	; 0x48
  400aa8:	e7f1      	b.n	400a8e <vQueueWaitForMessageRestricted+0x1a>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400aaa:	4629      	mov	r1, r5
  400aac:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ab0:	4b04      	ldr	r3, [pc, #16]	; (400ac4 <vQueueWaitForMessageRestricted+0x50>)
  400ab2:	4798      	blx	r3
  400ab4:	e7ef      	b.n	400a96 <vQueueWaitForMessageRestricted+0x22>
  400ab6:	bf00      	nop
  400ab8:	004002d1 	.word	0x004002d1
  400abc:	004002f1 	.word	0x004002f1
  400ac0:	004005e9 	.word	0x004005e9
  400ac4:	004011a5 	.word	0x004011a5

00400ac8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  400ac8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  400aca:	4b0f      	ldr	r3, [pc, #60]	; (400b08 <prvAddCurrentTaskToDelayedList+0x40>)
  400acc:	681b      	ldr	r3, [r3, #0]
  400ace:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  400ad0:	4b0e      	ldr	r3, [pc, #56]	; (400b0c <prvAddCurrentTaskToDelayedList+0x44>)
  400ad2:	681b      	ldr	r3, [r3, #0]
  400ad4:	4298      	cmp	r0, r3
  400ad6:	d30e      	bcc.n	400af6 <prvAddCurrentTaskToDelayedList+0x2e>
  400ad8:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  400ada:	4b0d      	ldr	r3, [pc, #52]	; (400b10 <prvAddCurrentTaskToDelayedList+0x48>)
  400adc:	6818      	ldr	r0, [r3, #0]
  400ade:	4b0a      	ldr	r3, [pc, #40]	; (400b08 <prvAddCurrentTaskToDelayedList+0x40>)
  400ae0:	6819      	ldr	r1, [r3, #0]
  400ae2:	3104      	adds	r1, #4
  400ae4:	4b0b      	ldr	r3, [pc, #44]	; (400b14 <prvAddCurrentTaskToDelayedList+0x4c>)
  400ae6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  400ae8:	4b0b      	ldr	r3, [pc, #44]	; (400b18 <prvAddCurrentTaskToDelayedList+0x50>)
  400aea:	681b      	ldr	r3, [r3, #0]
  400aec:	429c      	cmp	r4, r3
  400aee:	d201      	bcs.n	400af4 <prvAddCurrentTaskToDelayedList+0x2c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  400af0:	4b09      	ldr	r3, [pc, #36]	; (400b18 <prvAddCurrentTaskToDelayedList+0x50>)
  400af2:	601c      	str	r4, [r3, #0]
  400af4:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  400af6:	4b09      	ldr	r3, [pc, #36]	; (400b1c <prvAddCurrentTaskToDelayedList+0x54>)
  400af8:	6818      	ldr	r0, [r3, #0]
  400afa:	4b03      	ldr	r3, [pc, #12]	; (400b08 <prvAddCurrentTaskToDelayedList+0x40>)
  400afc:	6819      	ldr	r1, [r3, #0]
  400afe:	3104      	adds	r1, #4
  400b00:	4b04      	ldr	r3, [pc, #16]	; (400b14 <prvAddCurrentTaskToDelayedList+0x4c>)
  400b02:	4798      	blx	r3
  400b04:	bd10      	pop	{r4, pc}
  400b06:	bf00      	nop
  400b08:	2040a9f8 	.word	0x2040a9f8
  400b0c:	2040aaf4 	.word	0x2040aaf4
  400b10:	2040a9fc 	.word	0x2040a9fc
  400b14:	004001e5 	.word	0x004001e5
  400b18:	20400014 	.word	0x20400014
  400b1c:	2040aa00 	.word	0x2040aa00

00400b20 <xTaskGenericCreate>:
{
  400b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  400b26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  400b28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
  400b2a:	b148      	cbz	r0, 400b40 <xTaskGenericCreate+0x20>
  400b2c:	4688      	mov	r8, r1
  400b2e:	4693      	mov	fp, r2
  400b30:	469a      	mov	sl, r3
  400b32:	4681      	mov	r9, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  400b34:	2e04      	cmp	r6, #4
  400b36:	d907      	bls.n	400b48 <xTaskGenericCreate+0x28>
  400b38:	4b5c      	ldr	r3, [pc, #368]	; (400cac <xTaskGenericCreate+0x18c>)
  400b3a:	4798      	blx	r3
  400b3c:	bf00      	nop
  400b3e:	e7fd      	b.n	400b3c <xTaskGenericCreate+0x1c>
	configASSERT( pxTaskCode );
  400b40:	4b5a      	ldr	r3, [pc, #360]	; (400cac <xTaskGenericCreate+0x18c>)
  400b42:	4798      	blx	r3
  400b44:	bf00      	nop
  400b46:	e7fd      	b.n	400b44 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  400b48:	204c      	movs	r0, #76	; 0x4c
  400b4a:	4b59      	ldr	r3, [pc, #356]	; (400cb0 <xTaskGenericCreate+0x190>)
  400b4c:	4798      	blx	r3

	if( pxNewTCB != NULL )
  400b4e:	4604      	mov	r4, r0
  400b50:	2800      	cmp	r0, #0
  400b52:	d051      	beq.n	400bf8 <xTaskGenericCreate+0xd8>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  400b54:	2d00      	cmp	r5, #0
  400b56:	d044      	beq.n	400be2 <xTaskGenericCreate+0xc2>
  400b58:	6305      	str	r5, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  400b5a:	ea4f 028b 	mov.w	r2, fp, lsl #2
  400b5e:	21a5      	movs	r1, #165	; 0xa5
  400b60:	4628      	mov	r0, r5
  400b62:	4b54      	ldr	r3, [pc, #336]	; (400cb4 <xTaskGenericCreate+0x194>)
  400b64:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  400b66:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  400b6a:	445d      	add	r5, fp
  400b6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400b6e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  400b72:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  400b76:	220a      	movs	r2, #10
  400b78:	4641      	mov	r1, r8
  400b7a:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400b7e:	4b4e      	ldr	r3, [pc, #312]	; (400cb8 <xTaskGenericCreate+0x198>)
  400b80:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  400b82:	2300      	movs	r3, #0
  400b84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  400b88:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  400b8a:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  400b8c:	f104 0804 	add.w	r8, r4, #4
  400b90:	4640      	mov	r0, r8
  400b92:	f8df b178 	ldr.w	fp, [pc, #376]	; 400d0c <xTaskGenericCreate+0x1ec>
  400b96:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  400b98:	f104 0018 	add.w	r0, r4, #24
  400b9c:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  400b9e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  400ba0:	f1c6 0305 	rsb	r3, r6, #5
  400ba4:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  400ba6:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  400ba8:	4652      	mov	r2, sl
  400baa:	4649      	mov	r1, r9
  400bac:	4628      	mov	r0, r5
  400bae:	4b43      	ldr	r3, [pc, #268]	; (400cbc <xTaskGenericCreate+0x19c>)
  400bb0:	4798      	blx	r3
  400bb2:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  400bb4:	b107      	cbz	r7, 400bb8 <xTaskGenericCreate+0x98>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  400bb6:	603c      	str	r4, [r7, #0]
		taskENTER_CRITICAL();
  400bb8:	4b41      	ldr	r3, [pc, #260]	; (400cc0 <xTaskGenericCreate+0x1a0>)
  400bba:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  400bbc:	4a41      	ldr	r2, [pc, #260]	; (400cc4 <xTaskGenericCreate+0x1a4>)
  400bbe:	6813      	ldr	r3, [r2, #0]
  400bc0:	3301      	adds	r3, #1
  400bc2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  400bc4:	4b40      	ldr	r3, [pc, #256]	; (400cc8 <xTaskGenericCreate+0x1a8>)
  400bc6:	681b      	ldr	r3, [r3, #0]
  400bc8:	b1d3      	cbz	r3, 400c00 <xTaskGenericCreate+0xe0>
				if( xSchedulerRunning == pdFALSE )
  400bca:	4b40      	ldr	r3, [pc, #256]	; (400ccc <xTaskGenericCreate+0x1ac>)
  400bcc:	681b      	ldr	r3, [r3, #0]
  400bce:	2b00      	cmp	r3, #0
  400bd0:	d13d      	bne.n	400c4e <xTaskGenericCreate+0x12e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  400bd2:	4b3d      	ldr	r3, [pc, #244]	; (400cc8 <xTaskGenericCreate+0x1a8>)
  400bd4:	681b      	ldr	r3, [r3, #0]
  400bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400bd8:	429e      	cmp	r6, r3
  400bda:	d338      	bcc.n	400c4e <xTaskGenericCreate+0x12e>
						pxCurrentTCB = pxNewTCB;
  400bdc:	4b3a      	ldr	r3, [pc, #232]	; (400cc8 <xTaskGenericCreate+0x1a8>)
  400bde:	601c      	str	r4, [r3, #0]
  400be0:	e035      	b.n	400c4e <xTaskGenericCreate+0x12e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  400be2:	ea4f 008b 	mov.w	r0, fp, lsl #2
  400be6:	4b32      	ldr	r3, [pc, #200]	; (400cb0 <xTaskGenericCreate+0x190>)
  400be8:	4798      	blx	r3
  400bea:	4605      	mov	r5, r0
  400bec:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
  400bee:	2800      	cmp	r0, #0
  400bf0:	d1b3      	bne.n	400b5a <xTaskGenericCreate+0x3a>
			vPortFree( pxNewTCB );
  400bf2:	4620      	mov	r0, r4
  400bf4:	4b36      	ldr	r3, [pc, #216]	; (400cd0 <xTaskGenericCreate+0x1b0>)
  400bf6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  400bf8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  400c00:	4b31      	ldr	r3, [pc, #196]	; (400cc8 <xTaskGenericCreate+0x1a8>)
  400c02:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  400c04:	6813      	ldr	r3, [r2, #0]
  400c06:	2b01      	cmp	r3, #1
  400c08:	d121      	bne.n	400c4e <xTaskGenericCreate+0x12e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  400c0a:	4f32      	ldr	r7, [pc, #200]	; (400cd4 <xTaskGenericCreate+0x1b4>)
  400c0c:	4638      	mov	r0, r7
  400c0e:	4d32      	ldr	r5, [pc, #200]	; (400cd8 <xTaskGenericCreate+0x1b8>)
  400c10:	47a8      	blx	r5
  400c12:	f107 0014 	add.w	r0, r7, #20
  400c16:	47a8      	blx	r5
  400c18:	f107 0028 	add.w	r0, r7, #40	; 0x28
  400c1c:	47a8      	blx	r5
  400c1e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  400c22:	47a8      	blx	r5
  400c24:	f107 0050 	add.w	r0, r7, #80	; 0x50
  400c28:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  400c2a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 400d10 <xTaskGenericCreate+0x1f0>
  400c2e:	4648      	mov	r0, r9
  400c30:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  400c32:	4f2a      	ldr	r7, [pc, #168]	; (400cdc <xTaskGenericCreate+0x1bc>)
  400c34:	4638      	mov	r0, r7
  400c36:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  400c38:	4829      	ldr	r0, [pc, #164]	; (400ce0 <xTaskGenericCreate+0x1c0>)
  400c3a:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  400c3c:	4829      	ldr	r0, [pc, #164]	; (400ce4 <xTaskGenericCreate+0x1c4>)
  400c3e:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  400c40:	4829      	ldr	r0, [pc, #164]	; (400ce8 <xTaskGenericCreate+0x1c8>)
  400c42:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  400c44:	4b29      	ldr	r3, [pc, #164]	; (400cec <xTaskGenericCreate+0x1cc>)
  400c46:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  400c4a:	4b29      	ldr	r3, [pc, #164]	; (400cf0 <xTaskGenericCreate+0x1d0>)
  400c4c:	601f      	str	r7, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  400c4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400c50:	4b28      	ldr	r3, [pc, #160]	; (400cf4 <xTaskGenericCreate+0x1d4>)
  400c52:	681b      	ldr	r3, [r3, #0]
  400c54:	4298      	cmp	r0, r3
  400c56:	d901      	bls.n	400c5c <xTaskGenericCreate+0x13c>
				uxTopUsedPriority = pxNewTCB->uxPriority;
  400c58:	4b26      	ldr	r3, [pc, #152]	; (400cf4 <xTaskGenericCreate+0x1d4>)
  400c5a:	6018      	str	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  400c5c:	4a26      	ldr	r2, [pc, #152]	; (400cf8 <xTaskGenericCreate+0x1d8>)
  400c5e:	6813      	ldr	r3, [r2, #0]
  400c60:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
  400c62:	3301      	adds	r3, #1
  400c64:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
  400c66:	4b25      	ldr	r3, [pc, #148]	; (400cfc <xTaskGenericCreate+0x1dc>)
  400c68:	681b      	ldr	r3, [r3, #0]
  400c6a:	4298      	cmp	r0, r3
  400c6c:	d901      	bls.n	400c72 <xTaskGenericCreate+0x152>
  400c6e:	4b23      	ldr	r3, [pc, #140]	; (400cfc <xTaskGenericCreate+0x1dc>)
  400c70:	6018      	str	r0, [r3, #0]
  400c72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400c76:	4641      	mov	r1, r8
  400c78:	4b16      	ldr	r3, [pc, #88]	; (400cd4 <xTaskGenericCreate+0x1b4>)
  400c7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400c7e:	4b20      	ldr	r3, [pc, #128]	; (400d00 <xTaskGenericCreate+0x1e0>)
  400c80:	4798      	blx	r3
		taskEXIT_CRITICAL();
  400c82:	4b20      	ldr	r3, [pc, #128]	; (400d04 <xTaskGenericCreate+0x1e4>)
  400c84:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  400c86:	4b11      	ldr	r3, [pc, #68]	; (400ccc <xTaskGenericCreate+0x1ac>)
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	b14b      	cbz	r3, 400ca0 <xTaskGenericCreate+0x180>
			if( pxCurrentTCB->uxPriority < uxPriority )
  400c8c:	4b0e      	ldr	r3, [pc, #56]	; (400cc8 <xTaskGenericCreate+0x1a8>)
  400c8e:	681b      	ldr	r3, [r3, #0]
  400c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400c92:	429e      	cmp	r6, r3
  400c94:	d907      	bls.n	400ca6 <xTaskGenericCreate+0x186>
				portYIELD_WITHIN_API();
  400c96:	4b1c      	ldr	r3, [pc, #112]	; (400d08 <xTaskGenericCreate+0x1e8>)
  400c98:	4798      	blx	r3
  400c9a:	2001      	movs	r0, #1
  400c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ca0:	2001      	movs	r0, #1
  400ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ca6:	2001      	movs	r0, #1
	return xReturn;
  400ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cac:	004002c1 	.word	0x004002c1
  400cb0:	00400449 	.word	0x00400449
  400cb4:	00402881 	.word	0x00402881
  400cb8:	00402b9d 	.word	0x00402b9d
  400cbc:	00400271 	.word	0x00400271
  400cc0:	004002d1 	.word	0x004002d1
  400cc4:	2040aa68 	.word	0x2040aa68
  400cc8:	2040a9f8 	.word	0x2040a9f8
  400ccc:	2040aac8 	.word	0x2040aac8
  400cd0:	00400521 	.word	0x00400521
  400cd4:	2040aa04 	.word	0x2040aa04
  400cd8:	004001ad 	.word	0x004001ad
  400cdc:	2040aa98 	.word	0x2040aa98
  400ce0:	2040aab4 	.word	0x2040aab4
  400ce4:	2040aae0 	.word	0x2040aae0
  400ce8:	2040aacc 	.word	0x2040aacc
  400cec:	2040a9fc 	.word	0x2040a9fc
  400cf0:	2040aa00 	.word	0x2040aa00
  400cf4:	2040aa80 	.word	0x2040aa80
  400cf8:	2040aa74 	.word	0x2040aa74
  400cfc:	2040aa7c 	.word	0x2040aa7c
  400d00:	004001c9 	.word	0x004001c9
  400d04:	004002f1 	.word	0x004002f1
  400d08:	004002b1 	.word	0x004002b1
  400d0c:	004001c3 	.word	0x004001c3
  400d10:	2040aa84 	.word	0x2040aa84

00400d14 <vTaskStartScheduler>:
{
  400d14:	b510      	push	{r4, lr}
  400d16:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  400d18:	2300      	movs	r3, #0
  400d1a:	9303      	str	r3, [sp, #12]
  400d1c:	9302      	str	r3, [sp, #8]
  400d1e:	9301      	str	r3, [sp, #4]
  400d20:	9300      	str	r3, [sp, #0]
  400d22:	2282      	movs	r2, #130	; 0x82
  400d24:	490d      	ldr	r1, [pc, #52]	; (400d5c <vTaskStartScheduler+0x48>)
  400d26:	480e      	ldr	r0, [pc, #56]	; (400d60 <vTaskStartScheduler+0x4c>)
  400d28:	4c0e      	ldr	r4, [pc, #56]	; (400d64 <vTaskStartScheduler+0x50>)
  400d2a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  400d2c:	2801      	cmp	r0, #1
  400d2e:	d002      	beq.n	400d36 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
  400d30:	b180      	cbz	r0, 400d54 <vTaskStartScheduler+0x40>
}
  400d32:	b004      	add	sp, #16
  400d34:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  400d36:	4b0c      	ldr	r3, [pc, #48]	; (400d68 <vTaskStartScheduler+0x54>)
  400d38:	4798      	blx	r3
	if( xReturn == pdPASS )
  400d3a:	2801      	cmp	r0, #1
  400d3c:	d1f8      	bne.n	400d30 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
  400d3e:	4b0b      	ldr	r3, [pc, #44]	; (400d6c <vTaskStartScheduler+0x58>)
  400d40:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
  400d42:	2201      	movs	r2, #1
  400d44:	4b0a      	ldr	r3, [pc, #40]	; (400d70 <vTaskStartScheduler+0x5c>)
  400d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  400d48:	2200      	movs	r2, #0
  400d4a:	4b0a      	ldr	r3, [pc, #40]	; (400d74 <vTaskStartScheduler+0x60>)
  400d4c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  400d4e:	4b0a      	ldr	r3, [pc, #40]	; (400d78 <vTaskStartScheduler+0x64>)
  400d50:	4798      	blx	r3
  400d52:	e7ee      	b.n	400d32 <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
  400d54:	4b05      	ldr	r3, [pc, #20]	; (400d6c <vTaskStartScheduler+0x58>)
  400d56:	4798      	blx	r3
  400d58:	bf00      	nop
  400d5a:	e7fd      	b.n	400d58 <vTaskStartScheduler+0x44>
  400d5c:	004056a4 	.word	0x004056a4
  400d60:	0040101d 	.word	0x0040101d
  400d64:	00400b21 	.word	0x00400b21
  400d68:	004014c9 	.word	0x004014c9
  400d6c:	004002c1 	.word	0x004002c1
  400d70:	2040aac8 	.word	0x2040aac8
  400d74:	2040aaf4 	.word	0x2040aaf4
  400d78:	004003a5 	.word	0x004003a5

00400d7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  400d7c:	4a02      	ldr	r2, [pc, #8]	; (400d88 <vTaskSuspendAll+0xc>)
  400d7e:	6813      	ldr	r3, [r2, #0]
  400d80:	3301      	adds	r3, #1
  400d82:	6013      	str	r3, [r2, #0]
  400d84:	4770      	bx	lr
  400d86:	bf00      	nop
  400d88:	2040aa70 	.word	0x2040aa70

00400d8c <xTaskGetTickCount>:
{
  400d8c:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
  400d8e:	4b04      	ldr	r3, [pc, #16]	; (400da0 <xTaskGetTickCount+0x14>)
  400d90:	4798      	blx	r3
		xTicks = xTickCount;
  400d92:	4b04      	ldr	r3, [pc, #16]	; (400da4 <xTaskGetTickCount+0x18>)
  400d94:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
  400d96:	4b04      	ldr	r3, [pc, #16]	; (400da8 <xTaskGetTickCount+0x1c>)
  400d98:	4798      	blx	r3
}
  400d9a:	4620      	mov	r0, r4
  400d9c:	bd10      	pop	{r4, pc}
  400d9e:	bf00      	nop
  400da0:	004002d1 	.word	0x004002d1
  400da4:	2040aaf4 	.word	0x2040aaf4
  400da8:	004002f1 	.word	0x004002f1

00400dac <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  400dac:	4b3c      	ldr	r3, [pc, #240]	; (400ea0 <vTaskIncrementTick+0xf4>)
  400dae:	681b      	ldr	r3, [r3, #0]
  400db0:	2b00      	cmp	r3, #0
  400db2:	d16e      	bne.n	400e92 <vTaskIncrementTick+0xe6>
{
  400db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
  400db8:	4b3a      	ldr	r3, [pc, #232]	; (400ea4 <vTaskIncrementTick+0xf8>)
  400dba:	681a      	ldr	r2, [r3, #0]
  400dbc:	3201      	adds	r2, #1
  400dbe:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  400dc0:	681b      	ldr	r3, [r3, #0]
  400dc2:	b9ab      	cbnz	r3, 400df0 <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  400dc4:	4b38      	ldr	r3, [pc, #224]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400dc6:	681b      	ldr	r3, [r3, #0]
  400dc8:	681b      	ldr	r3, [r3, #0]
  400dca:	2b00      	cmp	r3, #0
  400dcc:	d128      	bne.n	400e20 <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
  400dce:	4b36      	ldr	r3, [pc, #216]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400dd0:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  400dd2:	4a36      	ldr	r2, [pc, #216]	; (400eac <vTaskIncrementTick+0x100>)
  400dd4:	6810      	ldr	r0, [r2, #0]
  400dd6:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  400dd8:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  400dda:	4935      	ldr	r1, [pc, #212]	; (400eb0 <vTaskIncrementTick+0x104>)
  400ddc:	680a      	ldr	r2, [r1, #0]
  400dde:	3201      	adds	r2, #1
  400de0:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400de2:	681b      	ldr	r3, [r3, #0]
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	b9fb      	cbnz	r3, 400e28 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
  400de8:	f04f 32ff 	mov.w	r2, #4294967295
  400dec:	4b31      	ldr	r3, [pc, #196]	; (400eb4 <vTaskIncrementTick+0x108>)
  400dee:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
  400df0:	4b2c      	ldr	r3, [pc, #176]	; (400ea4 <vTaskIncrementTick+0xf8>)
  400df2:	681a      	ldr	r2, [r3, #0]
  400df4:	4b2f      	ldr	r3, [pc, #188]	; (400eb4 <vTaskIncrementTick+0x108>)
  400df6:	681b      	ldr	r3, [r3, #0]
  400df8:	429a      	cmp	r2, r3
  400dfa:	d34f      	bcc.n	400e9c <vTaskIncrementTick+0xf0>
  400dfc:	4b2a      	ldr	r3, [pc, #168]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400dfe:	681b      	ldr	r3, [r3, #0]
  400e00:	681b      	ldr	r3, [r3, #0]
  400e02:	b1cb      	cbz	r3, 400e38 <vTaskIncrementTick+0x8c>
  400e04:	4b28      	ldr	r3, [pc, #160]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400e06:	681b      	ldr	r3, [r3, #0]
  400e08:	68db      	ldr	r3, [r3, #12]
  400e0a:	68dc      	ldr	r4, [r3, #12]
  400e0c:	6863      	ldr	r3, [r4, #4]
  400e0e:	4a25      	ldr	r2, [pc, #148]	; (400ea4 <vTaskIncrementTick+0xf8>)
  400e10:	6812      	ldr	r2, [r2, #0]
  400e12:	4293      	cmp	r3, r2
  400e14:	d816      	bhi.n	400e44 <vTaskIncrementTick+0x98>
  400e16:	4e28      	ldr	r6, [pc, #160]	; (400eb8 <vTaskIncrementTick+0x10c>)
  400e18:	4f28      	ldr	r7, [pc, #160]	; (400ebc <vTaskIncrementTick+0x110>)
  400e1a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 400ecc <vTaskIncrementTick+0x120>
  400e1e:	e02a      	b.n	400e76 <vTaskIncrementTick+0xca>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  400e20:	4b27      	ldr	r3, [pc, #156]	; (400ec0 <vTaskIncrementTick+0x114>)
  400e22:	4798      	blx	r3
  400e24:	bf00      	nop
  400e26:	e7fd      	b.n	400e24 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400e28:	4b1f      	ldr	r3, [pc, #124]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400e2a:	681b      	ldr	r3, [r3, #0]
  400e2c:	68db      	ldr	r3, [r3, #12]
  400e2e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  400e30:	685a      	ldr	r2, [r3, #4]
  400e32:	4b20      	ldr	r3, [pc, #128]	; (400eb4 <vTaskIncrementTick+0x108>)
  400e34:	601a      	str	r2, [r3, #0]
  400e36:	e7db      	b.n	400df0 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
  400e38:	f04f 32ff 	mov.w	r2, #4294967295
  400e3c:	4b1d      	ldr	r3, [pc, #116]	; (400eb4 <vTaskIncrementTick+0x108>)
  400e3e:	601a      	str	r2, [r3, #0]
  400e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e44:	4a1b      	ldr	r2, [pc, #108]	; (400eb4 <vTaskIncrementTick+0x108>)
  400e46:	6013      	str	r3, [r2, #0]
  400e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400e50:	4629      	mov	r1, r5
  400e52:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  400e56:	4b1b      	ldr	r3, [pc, #108]	; (400ec4 <vTaskIncrementTick+0x118>)
  400e58:	4798      	blx	r3
  400e5a:	4b13      	ldr	r3, [pc, #76]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400e5c:	681b      	ldr	r3, [r3, #0]
  400e5e:	681b      	ldr	r3, [r3, #0]
  400e60:	2b00      	cmp	r3, #0
  400e62:	d0e9      	beq.n	400e38 <vTaskIncrementTick+0x8c>
  400e64:	4b10      	ldr	r3, [pc, #64]	; (400ea8 <vTaskIncrementTick+0xfc>)
  400e66:	681b      	ldr	r3, [r3, #0]
  400e68:	68db      	ldr	r3, [r3, #12]
  400e6a:	68dc      	ldr	r4, [r3, #12]
  400e6c:	6863      	ldr	r3, [r4, #4]
  400e6e:	4a0d      	ldr	r2, [pc, #52]	; (400ea4 <vTaskIncrementTick+0xf8>)
  400e70:	6812      	ldr	r2, [r2, #0]
  400e72:	4293      	cmp	r3, r2
  400e74:	d8e6      	bhi.n	400e44 <vTaskIncrementTick+0x98>
  400e76:	1d25      	adds	r5, r4, #4
  400e78:	4628      	mov	r0, r5
  400e7a:	47b0      	blx	r6
  400e7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  400e7e:	b113      	cbz	r3, 400e86 <vTaskIncrementTick+0xda>
  400e80:	f104 0018 	add.w	r0, r4, #24
  400e84:	47b0      	blx	r6
  400e86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400e88:	683b      	ldr	r3, [r7, #0]
  400e8a:	4298      	cmp	r0, r3
  400e8c:	d9de      	bls.n	400e4c <vTaskIncrementTick+0xa0>
  400e8e:	6038      	str	r0, [r7, #0]
  400e90:	e7dc      	b.n	400e4c <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
  400e92:	4a0d      	ldr	r2, [pc, #52]	; (400ec8 <vTaskIncrementTick+0x11c>)
  400e94:	6813      	ldr	r3, [r2, #0]
  400e96:	3301      	adds	r3, #1
  400e98:	6013      	str	r3, [r2, #0]
}
  400e9a:	4770      	bx	lr
  400e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ea0:	2040aa70 	.word	0x2040aa70
  400ea4:	2040aaf4 	.word	0x2040aaf4
  400ea8:	2040a9fc 	.word	0x2040a9fc
  400eac:	2040aa00 	.word	0x2040aa00
  400eb0:	2040aab0 	.word	0x2040aab0
  400eb4:	20400014 	.word	0x20400014
  400eb8:	00400221 	.word	0x00400221
  400ebc:	2040aa7c 	.word	0x2040aa7c
  400ec0:	004002c1 	.word	0x004002c1
  400ec4:	004001c9 	.word	0x004001c9
  400ec8:	2040aa6c 	.word	0x2040aa6c
  400ecc:	2040aa04 	.word	0x2040aa04

00400ed0 <xTaskResumeAll>:
{
  400ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  400ed4:	4b2f      	ldr	r3, [pc, #188]	; (400f94 <xTaskResumeAll+0xc4>)
  400ed6:	681b      	ldr	r3, [r3, #0]
  400ed8:	b91b      	cbnz	r3, 400ee2 <xTaskResumeAll+0x12>
  400eda:	4b2f      	ldr	r3, [pc, #188]	; (400f98 <xTaskResumeAll+0xc8>)
  400edc:	4798      	blx	r3
  400ede:	bf00      	nop
  400ee0:	e7fd      	b.n	400ede <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
  400ee2:	4b2e      	ldr	r3, [pc, #184]	; (400f9c <xTaskResumeAll+0xcc>)
  400ee4:	4798      	blx	r3
		--uxSchedulerSuspended;
  400ee6:	4b2b      	ldr	r3, [pc, #172]	; (400f94 <xTaskResumeAll+0xc4>)
  400ee8:	681a      	ldr	r2, [r3, #0]
  400eea:	3a01      	subs	r2, #1
  400eec:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  400eee:	681b      	ldr	r3, [r3, #0]
  400ef0:	2b00      	cmp	r3, #0
  400ef2:	d14d      	bne.n	400f90 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  400ef4:	4b2a      	ldr	r3, [pc, #168]	; (400fa0 <xTaskResumeAll+0xd0>)
  400ef6:	681b      	ldr	r3, [r3, #0]
  400ef8:	b12b      	cbz	r3, 400f06 <xTaskResumeAll+0x36>
  400efa:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  400efc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 400fcc <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
  400f00:	4f28      	ldr	r7, [pc, #160]	; (400fa4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
  400f02:	4e29      	ldr	r6, [pc, #164]	; (400fa8 <xTaskResumeAll+0xd8>)
  400f04:	e014      	b.n	400f30 <xTaskResumeAll+0x60>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  400f06:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  400f08:	4b28      	ldr	r3, [pc, #160]	; (400fac <xTaskResumeAll+0xdc>)
  400f0a:	4798      	blx	r3
}
  400f0c:	4620      	mov	r0, r4
  400f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					prvAddTaskToReadyQueue( pxTCB );
  400f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400f16:	4649      	mov	r1, r9
  400f18:	4b25      	ldr	r3, [pc, #148]	; (400fb0 <xTaskResumeAll+0xe0>)
  400f1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400f1e:	4b25      	ldr	r3, [pc, #148]	; (400fb4 <xTaskResumeAll+0xe4>)
  400f20:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  400f22:	4b25      	ldr	r3, [pc, #148]	; (400fb8 <xTaskResumeAll+0xe8>)
  400f24:	681b      	ldr	r3, [r3, #0]
  400f26:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  400f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
  400f2a:	429a      	cmp	r2, r3
  400f2c:	bf28      	it	cs
  400f2e:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  400f30:	f8d8 3000 	ldr.w	r3, [r8]
  400f34:	b17b      	cbz	r3, 400f56 <xTaskResumeAll+0x86>
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  400f36:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400f3a:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  400f3c:	f105 0018 	add.w	r0, r5, #24
  400f40:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
  400f42:	f105 0904 	add.w	r9, r5, #4
  400f46:	4648      	mov	r0, r9
  400f48:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  400f4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  400f4c:	6833      	ldr	r3, [r6, #0]
  400f4e:	4298      	cmp	r0, r3
  400f50:	d9df      	bls.n	400f12 <xTaskResumeAll+0x42>
  400f52:	6030      	str	r0, [r6, #0]
  400f54:	e7dd      	b.n	400f12 <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  400f56:	4b19      	ldr	r3, [pc, #100]	; (400fbc <xTaskResumeAll+0xec>)
  400f58:	681b      	ldr	r3, [r3, #0]
  400f5a:	b193      	cbz	r3, 400f82 <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  400f5c:	4b17      	ldr	r3, [pc, #92]	; (400fbc <xTaskResumeAll+0xec>)
  400f5e:	681b      	ldr	r3, [r3, #0]
  400f60:	b143      	cbz	r3, 400f74 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
  400f62:	4d17      	ldr	r5, [pc, #92]	; (400fc0 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
  400f64:	4c15      	ldr	r4, [pc, #84]	; (400fbc <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
  400f66:	47a8      	blx	r5
						--uxMissedTicks;
  400f68:	6823      	ldr	r3, [r4, #0]
  400f6a:	3b01      	subs	r3, #1
  400f6c:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  400f6e:	6823      	ldr	r3, [r4, #0]
  400f70:	2b00      	cmp	r3, #0
  400f72:	d1f8      	bne.n	400f66 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
  400f74:	2200      	movs	r2, #0
  400f76:	4b13      	ldr	r3, [pc, #76]	; (400fc4 <xTaskResumeAll+0xf4>)
  400f78:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  400f7a:	4b13      	ldr	r3, [pc, #76]	; (400fc8 <xTaskResumeAll+0xf8>)
  400f7c:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
  400f7e:	2401      	movs	r4, #1
  400f80:	e7c2      	b.n	400f08 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  400f82:	2c01      	cmp	r4, #1
  400f84:	d0f6      	beq.n	400f74 <xTaskResumeAll+0xa4>
  400f86:	4b0f      	ldr	r3, [pc, #60]	; (400fc4 <xTaskResumeAll+0xf4>)
  400f88:	681b      	ldr	r3, [r3, #0]
  400f8a:	2b01      	cmp	r3, #1
  400f8c:	d1bc      	bne.n	400f08 <xTaskResumeAll+0x38>
  400f8e:	e7f1      	b.n	400f74 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  400f90:	2400      	movs	r4, #0
  400f92:	e7b9      	b.n	400f08 <xTaskResumeAll+0x38>
  400f94:	2040aa70 	.word	0x2040aa70
  400f98:	004002c1 	.word	0x004002c1
  400f9c:	004002d1 	.word	0x004002d1
  400fa0:	2040aa68 	.word	0x2040aa68
  400fa4:	00400221 	.word	0x00400221
  400fa8:	2040aa7c 	.word	0x2040aa7c
  400fac:	004002f1 	.word	0x004002f1
  400fb0:	2040aa04 	.word	0x2040aa04
  400fb4:	004001c9 	.word	0x004001c9
  400fb8:	2040a9f8 	.word	0x2040a9f8
  400fbc:	2040aa6c 	.word	0x2040aa6c
  400fc0:	00400dad 	.word	0x00400dad
  400fc4:	2040aaac 	.word	0x2040aaac
  400fc8:	004002b1 	.word	0x004002b1
  400fcc:	2040aab4 	.word	0x2040aab4

00400fd0 <vTaskDelay>:
	{
  400fd0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( portTickType ) 0U )
  400fd2:	b910      	cbnz	r0, 400fda <vTaskDelay+0xa>
			portYIELD_WITHIN_API();
  400fd4:	4b0a      	ldr	r3, [pc, #40]	; (401000 <vTaskDelay+0x30>)
  400fd6:	4798      	blx	r3
  400fd8:	bd10      	pop	{r4, pc}
  400fda:	4604      	mov	r4, r0
			vTaskSuspendAll();
  400fdc:	4b09      	ldr	r3, [pc, #36]	; (401004 <vTaskDelay+0x34>)
  400fde:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  400fe0:	4b09      	ldr	r3, [pc, #36]	; (401008 <vTaskDelay+0x38>)
  400fe2:	681b      	ldr	r3, [r3, #0]
  400fe4:	441c      	add	r4, r3
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  400fe6:	4b09      	ldr	r3, [pc, #36]	; (40100c <vTaskDelay+0x3c>)
  400fe8:	6818      	ldr	r0, [r3, #0]
  400fea:	3004      	adds	r0, #4
  400fec:	4b08      	ldr	r3, [pc, #32]	; (401010 <vTaskDelay+0x40>)
  400fee:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  400ff0:	4620      	mov	r0, r4
  400ff2:	4b08      	ldr	r3, [pc, #32]	; (401014 <vTaskDelay+0x44>)
  400ff4:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  400ff6:	4b08      	ldr	r3, [pc, #32]	; (401018 <vTaskDelay+0x48>)
  400ff8:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  400ffa:	2800      	cmp	r0, #0
  400ffc:	d1ec      	bne.n	400fd8 <vTaskDelay+0x8>
  400ffe:	e7e9      	b.n	400fd4 <vTaskDelay+0x4>
  401000:	004002b1 	.word	0x004002b1
  401004:	00400d7d 	.word	0x00400d7d
  401008:	2040aaf4 	.word	0x2040aaf4
  40100c:	2040a9f8 	.word	0x2040a9f8
  401010:	00400221 	.word	0x00400221
  401014:	00400ac9 	.word	0x00400ac9
  401018:	00400ed1 	.word	0x00400ed1

0040101c <prvIdleTask>:
{
  40101c:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40101e:	4d16      	ldr	r5, [pc, #88]	; (401078 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
  401020:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40109c <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401024:	4e15      	ldr	r6, [pc, #84]	; (40107c <prvIdleTask+0x60>)
  401026:	e024      	b.n	401072 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401028:	4b15      	ldr	r3, [pc, #84]	; (401080 <prvIdleTask+0x64>)
  40102a:	681b      	ldr	r3, [r3, #0]
  40102c:	2b01      	cmp	r3, #1
  40102e:	d81e      	bhi.n	40106e <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401030:	682b      	ldr	r3, [r5, #0]
  401032:	2b00      	cmp	r3, #0
  401034:	d0f8      	beq.n	401028 <prvIdleTask+0xc>
			vTaskSuspendAll();
  401036:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401038:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
  40103a:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40103c:	2c00      	cmp	r4, #0
  40103e:	d0f7      	beq.n	401030 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
  401040:	4b10      	ldr	r3, [pc, #64]	; (401084 <prvIdleTask+0x68>)
  401042:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401044:	68f3      	ldr	r3, [r6, #12]
  401046:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401048:	1d20      	adds	r0, r4, #4
  40104a:	4b0f      	ldr	r3, [pc, #60]	; (401088 <prvIdleTask+0x6c>)
  40104c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40104e:	4a0f      	ldr	r2, [pc, #60]	; (40108c <prvIdleTask+0x70>)
  401050:	6813      	ldr	r3, [r2, #0]
  401052:	3b01      	subs	r3, #1
  401054:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401056:	682b      	ldr	r3, [r5, #0]
  401058:	3b01      	subs	r3, #1
  40105a:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40105c:	4b0c      	ldr	r3, [pc, #48]	; (401090 <prvIdleTask+0x74>)
  40105e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401060:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401062:	f8df 903c 	ldr.w	r9, [pc, #60]	; 4010a0 <prvIdleTask+0x84>
  401066:	47c8      	blx	r9
		vPortFree( pxTCB );
  401068:	4620      	mov	r0, r4
  40106a:	47c8      	blx	r9
  40106c:	e7e0      	b.n	401030 <prvIdleTask+0x14>
				taskYIELD();
  40106e:	4b09      	ldr	r3, [pc, #36]	; (401094 <prvIdleTask+0x78>)
  401070:	4798      	blx	r3
			xTaskResumeAll();
  401072:	4f09      	ldr	r7, [pc, #36]	; (401098 <prvIdleTask+0x7c>)
  401074:	e7dc      	b.n	401030 <prvIdleTask+0x14>
  401076:	bf00      	nop
  401078:	2040aa78 	.word	0x2040aa78
  40107c:	2040aae0 	.word	0x2040aae0
  401080:	2040aa04 	.word	0x2040aa04
  401084:	004002d1 	.word	0x004002d1
  401088:	00400221 	.word	0x00400221
  40108c:	2040aa68 	.word	0x2040aa68
  401090:	004002f1 	.word	0x004002f1
  401094:	004002b1 	.word	0x004002b1
  401098:	00400ed1 	.word	0x00400ed1
  40109c:	00400d7d 	.word	0x00400d7d
  4010a0:	00400521 	.word	0x00400521

004010a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4010a4:	4b21      	ldr	r3, [pc, #132]	; (40112c <vTaskSwitchContext+0x88>)
  4010a6:	681b      	ldr	r3, [r3, #0]
  4010a8:	b9eb      	cbnz	r3, 4010e6 <vTaskSwitchContext+0x42>
{
  4010aa:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4010ac:	4b20      	ldr	r3, [pc, #128]	; (401130 <vTaskSwitchContext+0x8c>)
  4010ae:	681b      	ldr	r3, [r3, #0]
  4010b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4010b4:	009b      	lsls	r3, r3, #2
  4010b6:	4a1f      	ldr	r2, [pc, #124]	; (401134 <vTaskSwitchContext+0x90>)
  4010b8:	58d3      	ldr	r3, [r2, r3]
  4010ba:	b9c3      	cbnz	r3, 4010ee <vTaskSwitchContext+0x4a>
  4010bc:	4b1c      	ldr	r3, [pc, #112]	; (401130 <vTaskSwitchContext+0x8c>)
  4010be:	681b      	ldr	r3, [r3, #0]
  4010c0:	b16b      	cbz	r3, 4010de <vTaskSwitchContext+0x3a>
  4010c2:	4a1b      	ldr	r2, [pc, #108]	; (401130 <vTaskSwitchContext+0x8c>)
  4010c4:	491b      	ldr	r1, [pc, #108]	; (401134 <vTaskSwitchContext+0x90>)
  4010c6:	6813      	ldr	r3, [r2, #0]
  4010c8:	3b01      	subs	r3, #1
  4010ca:	6013      	str	r3, [r2, #0]
  4010cc:	6813      	ldr	r3, [r2, #0]
  4010ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4010d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4010d6:	b953      	cbnz	r3, 4010ee <vTaskSwitchContext+0x4a>
  4010d8:	6813      	ldr	r3, [r2, #0]
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d1f3      	bne.n	4010c6 <vTaskSwitchContext+0x22>
  4010de:	4b16      	ldr	r3, [pc, #88]	; (401138 <vTaskSwitchContext+0x94>)
  4010e0:	4798      	blx	r3
  4010e2:	bf00      	nop
  4010e4:	e7fd      	b.n	4010e2 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
  4010e6:	2201      	movs	r2, #1
  4010e8:	4b14      	ldr	r3, [pc, #80]	; (40113c <vTaskSwitchContext+0x98>)
  4010ea:	601a      	str	r2, [r3, #0]
  4010ec:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4010ee:	4b10      	ldr	r3, [pc, #64]	; (401130 <vTaskSwitchContext+0x8c>)
  4010f0:	681b      	ldr	r3, [r3, #0]
  4010f2:	4a10      	ldr	r2, [pc, #64]	; (401134 <vTaskSwitchContext+0x90>)
  4010f4:	0099      	lsls	r1, r3, #2
  4010f6:	18c8      	adds	r0, r1, r3
  4010f8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4010fc:	6844      	ldr	r4, [r0, #4]
  4010fe:	6864      	ldr	r4, [r4, #4]
  401100:	6044      	str	r4, [r0, #4]
  401102:	4419      	add	r1, r3
  401104:	4602      	mov	r2, r0
  401106:	3208      	adds	r2, #8
  401108:	4294      	cmp	r4, r2
  40110a:	d009      	beq.n	401120 <vTaskSwitchContext+0x7c>
  40110c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401110:	4a08      	ldr	r2, [pc, #32]	; (401134 <vTaskSwitchContext+0x90>)
  401112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401116:	685b      	ldr	r3, [r3, #4]
  401118:	68da      	ldr	r2, [r3, #12]
  40111a:	4b09      	ldr	r3, [pc, #36]	; (401140 <vTaskSwitchContext+0x9c>)
  40111c:	601a      	str	r2, [r3, #0]
  40111e:	bd10      	pop	{r4, pc}
  401120:	6860      	ldr	r0, [r4, #4]
  401122:	4a04      	ldr	r2, [pc, #16]	; (401134 <vTaskSwitchContext+0x90>)
  401124:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401128:	6050      	str	r0, [r2, #4]
  40112a:	e7ef      	b.n	40110c <vTaskSwitchContext+0x68>
  40112c:	2040aa70 	.word	0x2040aa70
  401130:	2040aa7c 	.word	0x2040aa7c
  401134:	2040aa04 	.word	0x2040aa04
  401138:	004002c1 	.word	0x004002c1
  40113c:	2040aaac 	.word	0x2040aaac
  401140:	2040a9f8 	.word	0x2040a9f8

00401144 <vTaskPlaceOnEventList>:
{
  401144:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  401146:	b190      	cbz	r0, 40116e <vTaskPlaceOnEventList+0x2a>
  401148:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40114a:	4d0e      	ldr	r5, [pc, #56]	; (401184 <vTaskPlaceOnEventList+0x40>)
  40114c:	6829      	ldr	r1, [r5, #0]
  40114e:	3118      	adds	r1, #24
  401150:	4b0d      	ldr	r3, [pc, #52]	; (401188 <vTaskPlaceOnEventList+0x44>)
  401152:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401154:	6828      	ldr	r0, [r5, #0]
  401156:	3004      	adds	r0, #4
  401158:	4b0c      	ldr	r3, [pc, #48]	; (40118c <vTaskPlaceOnEventList+0x48>)
  40115a:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
  40115c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401160:	d009      	beq.n	401176 <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
  401162:	4b0b      	ldr	r3, [pc, #44]	; (401190 <vTaskPlaceOnEventList+0x4c>)
  401164:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401166:	4420      	add	r0, r4
  401168:	4b0a      	ldr	r3, [pc, #40]	; (401194 <vTaskPlaceOnEventList+0x50>)
  40116a:	4798      	blx	r3
  40116c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  40116e:	4b0a      	ldr	r3, [pc, #40]	; (401198 <vTaskPlaceOnEventList+0x54>)
  401170:	4798      	blx	r3
  401172:	bf00      	nop
  401174:	e7fd      	b.n	401172 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401176:	6829      	ldr	r1, [r5, #0]
  401178:	3104      	adds	r1, #4
  40117a:	4808      	ldr	r0, [pc, #32]	; (40119c <vTaskPlaceOnEventList+0x58>)
  40117c:	4b08      	ldr	r3, [pc, #32]	; (4011a0 <vTaskPlaceOnEventList+0x5c>)
  40117e:	4798      	blx	r3
  401180:	bd38      	pop	{r3, r4, r5, pc}
  401182:	bf00      	nop
  401184:	2040a9f8 	.word	0x2040a9f8
  401188:	004001e5 	.word	0x004001e5
  40118c:	00400221 	.word	0x00400221
  401190:	2040aaf4 	.word	0x2040aaf4
  401194:	00400ac9 	.word	0x00400ac9
  401198:	004002c1 	.word	0x004002c1
  40119c:	2040aacc 	.word	0x2040aacc
  4011a0:	004001c9 	.word	0x004001c9

004011a4 <vTaskPlaceOnEventListRestricted>:
	{
  4011a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  4011a6:	b178      	cbz	r0, 4011c8 <vTaskPlaceOnEventListRestricted+0x24>
  4011a8:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4011aa:	4c09      	ldr	r4, [pc, #36]	; (4011d0 <vTaskPlaceOnEventListRestricted+0x2c>)
  4011ac:	6821      	ldr	r1, [r4, #0]
  4011ae:	3118      	adds	r1, #24
  4011b0:	4b08      	ldr	r3, [pc, #32]	; (4011d4 <vTaskPlaceOnEventListRestricted+0x30>)
  4011b2:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4011b4:	6820      	ldr	r0, [r4, #0]
  4011b6:	3004      	adds	r0, #4
  4011b8:	4b07      	ldr	r3, [pc, #28]	; (4011d8 <vTaskPlaceOnEventListRestricted+0x34>)
  4011ba:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
  4011bc:	4b07      	ldr	r3, [pc, #28]	; (4011dc <vTaskPlaceOnEventListRestricted+0x38>)
  4011be:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4011c0:	4428      	add	r0, r5
  4011c2:	4b07      	ldr	r3, [pc, #28]	; (4011e0 <vTaskPlaceOnEventListRestricted+0x3c>)
  4011c4:	4798      	blx	r3
  4011c6:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
  4011c8:	4b06      	ldr	r3, [pc, #24]	; (4011e4 <vTaskPlaceOnEventListRestricted+0x40>)
  4011ca:	4798      	blx	r3
  4011cc:	bf00      	nop
  4011ce:	e7fd      	b.n	4011cc <vTaskPlaceOnEventListRestricted+0x28>
  4011d0:	2040a9f8 	.word	0x2040a9f8
  4011d4:	004001c9 	.word	0x004001c9
  4011d8:	00400221 	.word	0x00400221
  4011dc:	2040aaf4 	.word	0x2040aaf4
  4011e0:	00400ac9 	.word	0x00400ac9
  4011e4:	004002c1 	.word	0x004002c1

004011e8 <xTaskRemoveFromEventList>:
{
  4011e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4011ea:	68c3      	ldr	r3, [r0, #12]
  4011ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4011ee:	b31c      	cbz	r4, 401238 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4011f0:	f104 0518 	add.w	r5, r4, #24
  4011f4:	4628      	mov	r0, r5
  4011f6:	4b15      	ldr	r3, [pc, #84]	; (40124c <xTaskRemoveFromEventList+0x64>)
  4011f8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4011fa:	4b15      	ldr	r3, [pc, #84]	; (401250 <xTaskRemoveFromEventList+0x68>)
  4011fc:	681b      	ldr	r3, [r3, #0]
  4011fe:	b9fb      	cbnz	r3, 401240 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401200:	1d25      	adds	r5, r4, #4
  401202:	4628      	mov	r0, r5
  401204:	4b11      	ldr	r3, [pc, #68]	; (40124c <xTaskRemoveFromEventList+0x64>)
  401206:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40120a:	4b12      	ldr	r3, [pc, #72]	; (401254 <xTaskRemoveFromEventList+0x6c>)
  40120c:	681b      	ldr	r3, [r3, #0]
  40120e:	4298      	cmp	r0, r3
  401210:	d901      	bls.n	401216 <xTaskRemoveFromEventList+0x2e>
  401212:	4b10      	ldr	r3, [pc, #64]	; (401254 <xTaskRemoveFromEventList+0x6c>)
  401214:	6018      	str	r0, [r3, #0]
  401216:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40121a:	4629      	mov	r1, r5
  40121c:	4b0e      	ldr	r3, [pc, #56]	; (401258 <xTaskRemoveFromEventList+0x70>)
  40121e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401222:	4b0e      	ldr	r3, [pc, #56]	; (40125c <xTaskRemoveFromEventList+0x74>)
  401224:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401226:	4b0e      	ldr	r3, [pc, #56]	; (401260 <xTaskRemoveFromEventList+0x78>)
  401228:	681b      	ldr	r3, [r3, #0]
  40122a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  40122e:	4298      	cmp	r0, r3
  401230:	bf34      	ite	cc
  401232:	2000      	movcc	r0, #0
  401234:	2001      	movcs	r0, #1
  401236:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  401238:	4b0a      	ldr	r3, [pc, #40]	; (401264 <xTaskRemoveFromEventList+0x7c>)
  40123a:	4798      	blx	r3
  40123c:	bf00      	nop
  40123e:	e7fd      	b.n	40123c <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401240:	4629      	mov	r1, r5
  401242:	4809      	ldr	r0, [pc, #36]	; (401268 <xTaskRemoveFromEventList+0x80>)
  401244:	4b05      	ldr	r3, [pc, #20]	; (40125c <xTaskRemoveFromEventList+0x74>)
  401246:	4798      	blx	r3
  401248:	e7ed      	b.n	401226 <xTaskRemoveFromEventList+0x3e>
  40124a:	bf00      	nop
  40124c:	00400221 	.word	0x00400221
  401250:	2040aa70 	.word	0x2040aa70
  401254:	2040aa7c 	.word	0x2040aa7c
  401258:	2040aa04 	.word	0x2040aa04
  40125c:	004001c9 	.word	0x004001c9
  401260:	2040a9f8 	.word	0x2040a9f8
  401264:	004002c1 	.word	0x004002c1
  401268:	2040aab4 	.word	0x2040aab4

0040126c <vTaskSetTimeOutState>:
{
  40126c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40126e:	b130      	cbz	r0, 40127e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401270:	4a05      	ldr	r2, [pc, #20]	; (401288 <vTaskSetTimeOutState+0x1c>)
  401272:	6812      	ldr	r2, [r2, #0]
  401274:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401276:	4a05      	ldr	r2, [pc, #20]	; (40128c <vTaskSetTimeOutState+0x20>)
  401278:	6812      	ldr	r2, [r2, #0]
  40127a:	6042      	str	r2, [r0, #4]
  40127c:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
  40127e:	4b04      	ldr	r3, [pc, #16]	; (401290 <vTaskSetTimeOutState+0x24>)
  401280:	4798      	blx	r3
  401282:	bf00      	nop
  401284:	e7fd      	b.n	401282 <vTaskSetTimeOutState+0x16>
  401286:	bf00      	nop
  401288:	2040aab0 	.word	0x2040aab0
  40128c:	2040aaf4 	.word	0x2040aaf4
  401290:	004002c1 	.word	0x004002c1

00401294 <xTaskCheckForTimeOut>:
{
  401294:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401296:	b1e8      	cbz	r0, 4012d4 <xTaskCheckForTimeOut+0x40>
  401298:	460d      	mov	r5, r1
  40129a:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40129c:	b1f1      	cbz	r1, 4012dc <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
  40129e:	4b18      	ldr	r3, [pc, #96]	; (401300 <xTaskCheckForTimeOut+0x6c>)
  4012a0:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  4012a2:	682b      	ldr	r3, [r5, #0]
  4012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012a8:	d026      	beq.n	4012f8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4012aa:	4a16      	ldr	r2, [pc, #88]	; (401304 <xTaskCheckForTimeOut+0x70>)
  4012ac:	6812      	ldr	r2, [r2, #0]
  4012ae:	6821      	ldr	r1, [r4, #0]
  4012b0:	4291      	cmp	r1, r2
  4012b2:	d004      	beq.n	4012be <xTaskCheckForTimeOut+0x2a>
  4012b4:	4a14      	ldr	r2, [pc, #80]	; (401308 <xTaskCheckForTimeOut+0x74>)
  4012b6:	6812      	ldr	r2, [r2, #0]
  4012b8:	6861      	ldr	r1, [r4, #4]
  4012ba:	4291      	cmp	r1, r2
  4012bc:	d91e      	bls.n	4012fc <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4012be:	4a12      	ldr	r2, [pc, #72]	; (401308 <xTaskCheckForTimeOut+0x74>)
  4012c0:	6812      	ldr	r2, [r2, #0]
  4012c2:	6861      	ldr	r1, [r4, #4]
  4012c4:	1a52      	subs	r2, r2, r1
  4012c6:	4293      	cmp	r3, r2
  4012c8:	d80c      	bhi.n	4012e4 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
  4012ca:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4012cc:	4b0f      	ldr	r3, [pc, #60]	; (40130c <xTaskCheckForTimeOut+0x78>)
  4012ce:	4798      	blx	r3
}
  4012d0:	4620      	mov	r0, r4
  4012d2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
  4012d4:	4b0e      	ldr	r3, [pc, #56]	; (401310 <xTaskCheckForTimeOut+0x7c>)
  4012d6:	4798      	blx	r3
  4012d8:	bf00      	nop
  4012da:	e7fd      	b.n	4012d8 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
  4012dc:	4b0c      	ldr	r3, [pc, #48]	; (401310 <xTaskCheckForTimeOut+0x7c>)
  4012de:	4798      	blx	r3
  4012e0:	bf00      	nop
  4012e2:	e7fd      	b.n	4012e0 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4012e4:	4a08      	ldr	r2, [pc, #32]	; (401308 <xTaskCheckForTimeOut+0x74>)
  4012e6:	6812      	ldr	r2, [r2, #0]
  4012e8:	1a52      	subs	r2, r2, r1
  4012ea:	1a9b      	subs	r3, r3, r2
  4012ec:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4012ee:	4620      	mov	r0, r4
  4012f0:	4b08      	ldr	r3, [pc, #32]	; (401314 <xTaskCheckForTimeOut+0x80>)
  4012f2:	4798      	blx	r3
			xReturn = pdFALSE;
  4012f4:	2400      	movs	r4, #0
  4012f6:	e7e9      	b.n	4012cc <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
  4012f8:	2400      	movs	r4, #0
  4012fa:	e7e7      	b.n	4012cc <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  4012fc:	2401      	movs	r4, #1
  4012fe:	e7e5      	b.n	4012cc <xTaskCheckForTimeOut+0x38>
  401300:	004002d1 	.word	0x004002d1
  401304:	2040aab0 	.word	0x2040aab0
  401308:	2040aaf4 	.word	0x2040aaf4
  40130c:	004002f1 	.word	0x004002f1
  401310:	004002c1 	.word	0x004002c1
  401314:	0040126d 	.word	0x0040126d

00401318 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
  401318:	2201      	movs	r2, #1
  40131a:	4b01      	ldr	r3, [pc, #4]	; (401320 <vTaskMissedYield+0x8>)
  40131c:	601a      	str	r2, [r3, #0]
  40131e:	4770      	bx	lr
  401320:	2040aaac 	.word	0x2040aaac

00401324 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401324:	4b01      	ldr	r3, [pc, #4]	; (40132c <xTaskGetCurrentTaskHandle+0x8>)
  401326:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  401328:	4770      	bx	lr
  40132a:	bf00      	nop
  40132c:	2040a9f8 	.word	0x2040a9f8

00401330 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401330:	4b05      	ldr	r3, [pc, #20]	; (401348 <xTaskGetSchedulerState+0x18>)
  401332:	681b      	ldr	r3, [r3, #0]
  401334:	b133      	cbz	r3, 401344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401336:	4b05      	ldr	r3, [pc, #20]	; (40134c <xTaskGetSchedulerState+0x1c>)
  401338:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40133a:	2b00      	cmp	r3, #0
  40133c:	bf0c      	ite	eq
  40133e:	2001      	moveq	r0, #1
  401340:	2002      	movne	r0, #2
  401342:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401344:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  401346:	4770      	bx	lr
  401348:	2040aac8 	.word	0x2040aac8
  40134c:	2040aa70 	.word	0x2040aa70

00401350 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401350:	2800      	cmp	r0, #0
  401352:	d031      	beq.n	4013b8 <vTaskPriorityInherit+0x68>
	{
  401354:	b538      	push	{r3, r4, r5, lr}
  401356:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401358:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40135a:	4918      	ldr	r1, [pc, #96]	; (4013bc <vTaskPriorityInherit+0x6c>)
  40135c:	6809      	ldr	r1, [r1, #0]
  40135e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401360:	428b      	cmp	r3, r1
  401362:	d211      	bcs.n	401388 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401364:	4915      	ldr	r1, [pc, #84]	; (4013bc <vTaskPriorityInherit+0x6c>)
  401366:	6809      	ldr	r1, [r1, #0]
  401368:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40136a:	f1c1 0105 	rsb	r1, r1, #5
  40136e:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401370:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401374:	4912      	ldr	r1, [pc, #72]	; (4013c0 <vTaskPriorityInherit+0x70>)
  401376:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40137a:	6941      	ldr	r1, [r0, #20]
  40137c:	4299      	cmp	r1, r3
  40137e:	d004      	beq.n	40138a <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401380:	4b0e      	ldr	r3, [pc, #56]	; (4013bc <vTaskPriorityInherit+0x6c>)
  401382:	681b      	ldr	r3, [r3, #0]
  401384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401386:	62c3      	str	r3, [r0, #44]	; 0x2c
  401388:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40138a:	1d04      	adds	r4, r0, #4
  40138c:	4620      	mov	r0, r4
  40138e:	4b0d      	ldr	r3, [pc, #52]	; (4013c4 <vTaskPriorityInherit+0x74>)
  401390:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401392:	4b0a      	ldr	r3, [pc, #40]	; (4013bc <vTaskPriorityInherit+0x6c>)
  401394:	681b      	ldr	r3, [r3, #0]
  401396:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401398:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  40139a:	4b0b      	ldr	r3, [pc, #44]	; (4013c8 <vTaskPriorityInherit+0x78>)
  40139c:	681b      	ldr	r3, [r3, #0]
  40139e:	4298      	cmp	r0, r3
  4013a0:	d901      	bls.n	4013a6 <vTaskPriorityInherit+0x56>
  4013a2:	4b09      	ldr	r3, [pc, #36]	; (4013c8 <vTaskPriorityInherit+0x78>)
  4013a4:	6018      	str	r0, [r3, #0]
  4013a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4013aa:	4621      	mov	r1, r4
  4013ac:	4b04      	ldr	r3, [pc, #16]	; (4013c0 <vTaskPriorityInherit+0x70>)
  4013ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4013b2:	4b06      	ldr	r3, [pc, #24]	; (4013cc <vTaskPriorityInherit+0x7c>)
  4013b4:	4798      	blx	r3
  4013b6:	bd38      	pop	{r3, r4, r5, pc}
  4013b8:	4770      	bx	lr
  4013ba:	bf00      	nop
  4013bc:	2040a9f8 	.word	0x2040a9f8
  4013c0:	2040aa04 	.word	0x2040aa04
  4013c4:	00400221 	.word	0x00400221
  4013c8:	2040aa7c 	.word	0x2040aa7c
  4013cc:	004001c9 	.word	0x004001c9

004013d0 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4013d0:	b1e8      	cbz	r0, 40140e <vTaskPriorityDisinherit+0x3e>
	{
  4013d2:	b538      	push	{r3, r4, r5, lr}
  4013d4:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4013d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4013d8:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4013da:	4291      	cmp	r1, r2
  4013dc:	d016      	beq.n	40140c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4013de:	1d05      	adds	r5, r0, #4
  4013e0:	4628      	mov	r0, r5
  4013e2:	4b0b      	ldr	r3, [pc, #44]	; (401410 <vTaskPriorityDisinherit+0x40>)
  4013e4:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4013e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4013e8:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4013ea:	f1c0 0305 	rsb	r3, r0, #5
  4013ee:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4013f0:	4b08      	ldr	r3, [pc, #32]	; (401414 <vTaskPriorityDisinherit+0x44>)
  4013f2:	681b      	ldr	r3, [r3, #0]
  4013f4:	4298      	cmp	r0, r3
  4013f6:	d901      	bls.n	4013fc <vTaskPriorityDisinherit+0x2c>
  4013f8:	4b06      	ldr	r3, [pc, #24]	; (401414 <vTaskPriorityDisinherit+0x44>)
  4013fa:	6018      	str	r0, [r3, #0]
  4013fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401400:	4629      	mov	r1, r5
  401402:	4b05      	ldr	r3, [pc, #20]	; (401418 <vTaskPriorityDisinherit+0x48>)
  401404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401408:	4b04      	ldr	r3, [pc, #16]	; (40141c <vTaskPriorityDisinherit+0x4c>)
  40140a:	4798      	blx	r3
  40140c:	bd38      	pop	{r3, r4, r5, pc}
  40140e:	4770      	bx	lr
  401410:	00400221 	.word	0x00400221
  401414:	2040aa7c 	.word	0x2040aa7c
  401418:	2040aa04 	.word	0x2040aa04
  40141c:	004001c9 	.word	0x004001c9

00401420 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  401420:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401422:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401424:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401426:	4291      	cmp	r1, r2
  401428:	d80c      	bhi.n	401444 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40142a:	1ad2      	subs	r2, r2, r3
  40142c:	6983      	ldr	r3, [r0, #24]
  40142e:	429a      	cmp	r2, r3
  401430:	d301      	bcc.n	401436 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401432:	2001      	movs	r0, #1
  401434:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401436:	1d01      	adds	r1, r0, #4
  401438:	4b09      	ldr	r3, [pc, #36]	; (401460 <prvInsertTimerInActiveList+0x40>)
  40143a:	6818      	ldr	r0, [r3, #0]
  40143c:	4b09      	ldr	r3, [pc, #36]	; (401464 <prvInsertTimerInActiveList+0x44>)
  40143e:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
  401440:	2000      	movs	r0, #0
  401442:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401444:	429a      	cmp	r2, r3
  401446:	d203      	bcs.n	401450 <prvInsertTimerInActiveList+0x30>
  401448:	4299      	cmp	r1, r3
  40144a:	d301      	bcc.n	401450 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40144c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40144e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401450:	1d01      	adds	r1, r0, #4
  401452:	4b05      	ldr	r3, [pc, #20]	; (401468 <prvInsertTimerInActiveList+0x48>)
  401454:	6818      	ldr	r0, [r3, #0]
  401456:	4b03      	ldr	r3, [pc, #12]	; (401464 <prvInsertTimerInActiveList+0x44>)
  401458:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40145a:	2000      	movs	r0, #0
  40145c:	bd08      	pop	{r3, pc}
  40145e:	bf00      	nop
  401460:	2040aafc 	.word	0x2040aafc
  401464:	004001e5 	.word	0x004001e5
  401468:	2040aaf8 	.word	0x2040aaf8

0040146c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40146c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40146e:	4b0d      	ldr	r3, [pc, #52]	; (4014a4 <prvCheckForValidListAndQueue+0x38>)
  401470:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401472:	4b0d      	ldr	r3, [pc, #52]	; (4014a8 <prvCheckForValidListAndQueue+0x3c>)
  401474:	681b      	ldr	r3, [r3, #0]
  401476:	b113      	cbz	r3, 40147e <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
  401478:	4b0c      	ldr	r3, [pc, #48]	; (4014ac <prvCheckForValidListAndQueue+0x40>)
  40147a:	4798      	blx	r3
  40147c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40147e:	4d0c      	ldr	r5, [pc, #48]	; (4014b0 <prvCheckForValidListAndQueue+0x44>)
  401480:	4628      	mov	r0, r5
  401482:	4e0c      	ldr	r6, [pc, #48]	; (4014b4 <prvCheckForValidListAndQueue+0x48>)
  401484:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401486:	4c0c      	ldr	r4, [pc, #48]	; (4014b8 <prvCheckForValidListAndQueue+0x4c>)
  401488:	4620      	mov	r0, r4
  40148a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40148c:	4b0b      	ldr	r3, [pc, #44]	; (4014bc <prvCheckForValidListAndQueue+0x50>)
  40148e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401490:	4b0b      	ldr	r3, [pc, #44]	; (4014c0 <prvCheckForValidListAndQueue+0x54>)
  401492:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  401494:	2200      	movs	r2, #0
  401496:	210c      	movs	r1, #12
  401498:	2005      	movs	r0, #5
  40149a:	4b0a      	ldr	r3, [pc, #40]	; (4014c4 <prvCheckForValidListAndQueue+0x58>)
  40149c:	4798      	blx	r3
  40149e:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <prvCheckForValidListAndQueue+0x3c>)
  4014a0:	6018      	str	r0, [r3, #0]
  4014a2:	e7e9      	b.n	401478 <prvCheckForValidListAndQueue+0xc>
  4014a4:	004002d1 	.word	0x004002d1
  4014a8:	2040ab2c 	.word	0x2040ab2c
  4014ac:	004002f1 	.word	0x004002f1
  4014b0:	2040ab00 	.word	0x2040ab00
  4014b4:	004001ad 	.word	0x004001ad
  4014b8:	2040ab14 	.word	0x2040ab14
  4014bc:	2040aaf8 	.word	0x2040aaf8
  4014c0:	2040aafc 	.word	0x2040aafc
  4014c4:	004006fd 	.word	0x004006fd

004014c8 <xTimerCreateTimerTask>:
{
  4014c8:	b510      	push	{r4, lr}
  4014ca:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4014cc:	4b0b      	ldr	r3, [pc, #44]	; (4014fc <xTimerCreateTimerTask+0x34>)
  4014ce:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4014d0:	4b0b      	ldr	r3, [pc, #44]	; (401500 <xTimerCreateTimerTask+0x38>)
  4014d2:	681b      	ldr	r3, [r3, #0]
  4014d4:	b173      	cbz	r3, 4014f4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4014d6:	2300      	movs	r3, #0
  4014d8:	9303      	str	r3, [sp, #12]
  4014da:	9302      	str	r3, [sp, #8]
  4014dc:	9301      	str	r3, [sp, #4]
  4014de:	2204      	movs	r2, #4
  4014e0:	9200      	str	r2, [sp, #0]
  4014e2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4014e6:	4907      	ldr	r1, [pc, #28]	; (401504 <xTimerCreateTimerTask+0x3c>)
  4014e8:	4807      	ldr	r0, [pc, #28]	; (401508 <xTimerCreateTimerTask+0x40>)
  4014ea:	4c08      	ldr	r4, [pc, #32]	; (40150c <xTimerCreateTimerTask+0x44>)
  4014ec:	47a0      	blx	r4
	configASSERT( xReturn );
  4014ee:	b108      	cbz	r0, 4014f4 <xTimerCreateTimerTask+0x2c>
}
  4014f0:	b004      	add	sp, #16
  4014f2:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
  4014f4:	4b06      	ldr	r3, [pc, #24]	; (401510 <xTimerCreateTimerTask+0x48>)
  4014f6:	4798      	blx	r3
  4014f8:	bf00      	nop
  4014fa:	e7fd      	b.n	4014f8 <xTimerCreateTimerTask+0x30>
  4014fc:	0040146d 	.word	0x0040146d
  401500:	2040ab2c 	.word	0x2040ab2c
  401504:	004056ac 	.word	0x004056ac
  401508:	00401619 	.word	0x00401619
  40150c:	00400b21 	.word	0x00400b21
  401510:	004002c1 	.word	0x004002c1

00401514 <xTimerGenericCommand>:
{
  401514:	b530      	push	{r4, r5, lr}
  401516:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  401518:	4c0f      	ldr	r4, [pc, #60]	; (401558 <xTimerGenericCommand+0x44>)
  40151a:	6825      	ldr	r5, [r4, #0]
  40151c:	b1d5      	cbz	r5, 401554 <xTimerGenericCommand+0x40>
  40151e:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  401520:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  401522:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401524:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
  401526:	b13b      	cbz	r3, 401538 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401528:	2300      	movs	r3, #0
  40152a:	4622      	mov	r2, r4
  40152c:	a901      	add	r1, sp, #4
  40152e:	4628      	mov	r0, r5
  401530:	4c0a      	ldr	r4, [pc, #40]	; (40155c <xTimerGenericCommand+0x48>)
  401532:	47a0      	blx	r4
}
  401534:	b005      	add	sp, #20
  401536:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401538:	4b09      	ldr	r3, [pc, #36]	; (401560 <xTimerGenericCommand+0x4c>)
  40153a:	4798      	blx	r3
  40153c:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  40153e:	f04f 0300 	mov.w	r3, #0
  401542:	bf0c      	ite	eq
  401544:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401546:	461a      	movne	r2, r3
  401548:	a901      	add	r1, sp, #4
  40154a:	4803      	ldr	r0, [pc, #12]	; (401558 <xTimerGenericCommand+0x44>)
  40154c:	6800      	ldr	r0, [r0, #0]
  40154e:	4c05      	ldr	r4, [pc, #20]	; (401564 <xTimerGenericCommand+0x50>)
  401550:	47a0      	blx	r4
  401552:	e7ef      	b.n	401534 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
  401554:	2000      	movs	r0, #0
	return xReturn;
  401556:	e7ed      	b.n	401534 <xTimerGenericCommand+0x20>
  401558:	2040ab2c 	.word	0x2040ab2c
  40155c:	0040087d 	.word	0x0040087d
  401560:	00401331 	.word	0x00401331
  401564:	00400751 	.word	0x00400751

00401568 <prvSampleTimeNow>:
{
  401568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40156c:	b082      	sub	sp, #8
  40156e:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
  401570:	4b21      	ldr	r3, [pc, #132]	; (4015f8 <prvSampleTimeNow+0x90>)
  401572:	4798      	blx	r3
  401574:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
  401576:	4b21      	ldr	r3, [pc, #132]	; (4015fc <prvSampleTimeNow+0x94>)
  401578:	681b      	ldr	r3, [r3, #0]
  40157a:	4298      	cmp	r0, r3
  40157c:	d315      	bcc.n	4015aa <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
  40157e:	2300      	movs	r3, #0
  401580:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
  401584:	4b1d      	ldr	r3, [pc, #116]	; (4015fc <prvSampleTimeNow+0x94>)
  401586:	f8c3 8000 	str.w	r8, [r3]
}
  40158a:	4640      	mov	r0, r8
  40158c:	b002      	add	sp, #8
  40158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401592:	2100      	movs	r1, #0
  401594:	9100      	str	r1, [sp, #0]
  401596:	460b      	mov	r3, r1
  401598:	4652      	mov	r2, sl
  40159a:	4620      	mov	r0, r4
  40159c:	4c18      	ldr	r4, [pc, #96]	; (401600 <prvSampleTimeNow+0x98>)
  40159e:	47a0      	blx	r4
				configASSERT( xResult );
  4015a0:	b928      	cbnz	r0, 4015ae <prvSampleTimeNow+0x46>
  4015a2:	4b18      	ldr	r3, [pc, #96]	; (401604 <prvSampleTimeNow+0x9c>)
  4015a4:	4798      	blx	r3
  4015a6:	bf00      	nop
  4015a8:	e7fd      	b.n	4015a6 <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4015aa:	4e17      	ldr	r6, [pc, #92]	; (401608 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4015ac:	4f17      	ldr	r7, [pc, #92]	; (40160c <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4015ae:	6833      	ldr	r3, [r6, #0]
  4015b0:	681a      	ldr	r2, [r3, #0]
  4015b2:	b1c2      	cbz	r2, 4015e6 <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4015b4:	68da      	ldr	r2, [r3, #12]
  4015b6:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4015ba:	68db      	ldr	r3, [r3, #12]
  4015bc:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4015be:	1d25      	adds	r5, r4, #4
  4015c0:	4628      	mov	r0, r5
  4015c2:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4015c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015c6:	4620      	mov	r0, r4
  4015c8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4015ca:	69e3      	ldr	r3, [r4, #28]
  4015cc:	2b01      	cmp	r3, #1
  4015ce:	d1ee      	bne.n	4015ae <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4015d0:	69a3      	ldr	r3, [r4, #24]
  4015d2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4015d4:	459a      	cmp	sl, r3
  4015d6:	d2dc      	bcs.n	401592 <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4015d8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4015da:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4015dc:	4629      	mov	r1, r5
  4015de:	6830      	ldr	r0, [r6, #0]
  4015e0:	4b0b      	ldr	r3, [pc, #44]	; (401610 <prvSampleTimeNow+0xa8>)
  4015e2:	4798      	blx	r3
  4015e4:	e7e3      	b.n	4015ae <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
  4015e6:	4a0b      	ldr	r2, [pc, #44]	; (401614 <prvSampleTimeNow+0xac>)
  4015e8:	6810      	ldr	r0, [r2, #0]
  4015ea:	4907      	ldr	r1, [pc, #28]	; (401608 <prvSampleTimeNow+0xa0>)
  4015ec:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4015ee:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4015f0:	2301      	movs	r3, #1
  4015f2:	f8c9 3000 	str.w	r3, [r9]
  4015f6:	e7c5      	b.n	401584 <prvSampleTimeNow+0x1c>
  4015f8:	00400d8d 	.word	0x00400d8d
  4015fc:	2040ab28 	.word	0x2040ab28
  401600:	00401515 	.word	0x00401515
  401604:	004002c1 	.word	0x004002c1
  401608:	2040aaf8 	.word	0x2040aaf8
  40160c:	00400221 	.word	0x00400221
  401610:	004001e5 	.word	0x004001e5
  401614:	2040aafc 	.word	0x2040aafc

00401618 <prvTimerTask>:
{
  401618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40161c:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
  40161e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 40178c <prvTimerTask+0x174>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401622:	4b4e      	ldr	r3, [pc, #312]	; (40175c <prvTimerTask+0x144>)
  401624:	681b      	ldr	r3, [r3, #0]
  401626:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401628:	2a00      	cmp	r2, #0
  40162a:	f000 808a 	beq.w	401742 <prvTimerTask+0x12a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40162e:	68db      	ldr	r3, [r3, #12]
  401630:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
  401632:	4b4b      	ldr	r3, [pc, #300]	; (401760 <prvTimerTask+0x148>)
  401634:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401636:	a803      	add	r0, sp, #12
  401638:	4b4a      	ldr	r3, [pc, #296]	; (401764 <prvTimerTask+0x14c>)
  40163a:	4798      	blx	r3
  40163c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40163e:	9b03      	ldr	r3, [sp, #12]
  401640:	2b00      	cmp	r3, #0
  401642:	f040 8087 	bne.w	401754 <prvTimerTask+0x13c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401646:	42a8      	cmp	r0, r5
  401648:	d32a      	bcc.n	4016a0 <prvTimerTask+0x88>
				xTaskResumeAll();
  40164a:	4b47      	ldr	r3, [pc, #284]	; (401768 <prvTimerTask+0x150>)
  40164c:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40164e:	4b43      	ldr	r3, [pc, #268]	; (40175c <prvTimerTask+0x144>)
  401650:	681b      	ldr	r3, [r3, #0]
  401652:	68db      	ldr	r3, [r3, #12]
  401654:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401656:	1d20      	adds	r0, r4, #4
  401658:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40165a:	69e3      	ldr	r3, [r4, #28]
  40165c:	2b01      	cmp	r3, #1
  40165e:	d008      	beq.n	401672 <prvTimerTask+0x5a>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401660:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401662:	4620      	mov	r0, r4
  401664:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401666:	a802      	add	r0, sp, #8
  401668:	4b3e      	ldr	r3, [pc, #248]	; (401764 <prvTimerTask+0x14c>)
  40166a:	4798      	blx	r3
  40166c:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40166e:	4e3f      	ldr	r6, [pc, #252]	; (40176c <prvTimerTask+0x154>)
  401670:	e033      	b.n	4016da <prvTimerTask+0xc2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401672:	69a1      	ldr	r1, [r4, #24]
  401674:	462b      	mov	r3, r5
  401676:	4632      	mov	r2, r6
  401678:	4429      	add	r1, r5
  40167a:	4620      	mov	r0, r4
  40167c:	4e3c      	ldr	r6, [pc, #240]	; (401770 <prvTimerTask+0x158>)
  40167e:	47b0      	blx	r6
  401680:	2801      	cmp	r0, #1
  401682:	d1ed      	bne.n	401660 <prvTimerTask+0x48>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401684:	2100      	movs	r1, #0
  401686:	9100      	str	r1, [sp, #0]
  401688:	460b      	mov	r3, r1
  40168a:	462a      	mov	r2, r5
  40168c:	4620      	mov	r0, r4
  40168e:	4d39      	ldr	r5, [pc, #228]	; (401774 <prvTimerTask+0x15c>)
  401690:	47a8      	blx	r5
			configASSERT( xResult );
  401692:	2800      	cmp	r0, #0
  401694:	d1e4      	bne.n	401660 <prvTimerTask+0x48>
  401696:	4b38      	ldr	r3, [pc, #224]	; (401778 <prvTimerTask+0x160>)
  401698:	4798      	blx	r3
  40169a:	bf00      	nop
  40169c:	e7fd      	b.n	40169a <prvTimerTask+0x82>
		xNextExpireTime = ( portTickType ) 0U;
  40169e:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4016a0:	1ba9      	subs	r1, r5, r6
  4016a2:	4b32      	ldr	r3, [pc, #200]	; (40176c <prvTimerTask+0x154>)
  4016a4:	6818      	ldr	r0, [r3, #0]
  4016a6:	4b35      	ldr	r3, [pc, #212]	; (40177c <prvTimerTask+0x164>)
  4016a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016aa:	4b2f      	ldr	r3, [pc, #188]	; (401768 <prvTimerTask+0x150>)
  4016ac:	4798      	blx	r3
  4016ae:	2800      	cmp	r0, #0
  4016b0:	d1d9      	bne.n	401666 <prvTimerTask+0x4e>
					portYIELD_WITHIN_API();
  4016b2:	4b33      	ldr	r3, [pc, #204]	; (401780 <prvTimerTask+0x168>)
  4016b4:	4798      	blx	r3
  4016b6:	e7d6      	b.n	401666 <prvTimerTask+0x4e>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4016b8:	9904      	ldr	r1, [sp, #16]
  4016ba:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4016bc:	b131      	cbz	r1, 4016cc <prvTimerTask+0xb4>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4016be:	463b      	mov	r3, r7
  4016c0:	463a      	mov	r2, r7
  4016c2:	4439      	add	r1, r7
  4016c4:	4620      	mov	r0, r4
  4016c6:	4c2a      	ldr	r4, [pc, #168]	; (401770 <prvTimerTask+0x158>)
  4016c8:	47a0      	blx	r4
  4016ca:	e006      	b.n	4016da <prvTimerTask+0xc2>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4016cc:	4b2a      	ldr	r3, [pc, #168]	; (401778 <prvTimerTask+0x160>)
  4016ce:	4798      	blx	r3
  4016d0:	bf00      	nop
  4016d2:	e7fd      	b.n	4016d0 <prvTimerTask+0xb8>
				vPortFree( pxTimer );
  4016d4:	4620      	mov	r0, r4
  4016d6:	4b2b      	ldr	r3, [pc, #172]	; (401784 <prvTimerTask+0x16c>)
  4016d8:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4016da:	4d2b      	ldr	r5, [pc, #172]	; (401788 <prvTimerTask+0x170>)
  4016dc:	2300      	movs	r3, #0
  4016de:	461a      	mov	r2, r3
  4016e0:	a903      	add	r1, sp, #12
  4016e2:	6830      	ldr	r0, [r6, #0]
  4016e4:	47a8      	blx	r5
  4016e6:	2800      	cmp	r0, #0
  4016e8:	d09b      	beq.n	401622 <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
  4016ea:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
  4016ec:	b11c      	cbz	r4, 4016f6 <prvTimerTask+0xde>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4016ee:	6963      	ldr	r3, [r4, #20]
  4016f0:	b10b      	cbz	r3, 4016f6 <prvTimerTask+0xde>
				uxListRemove( &( pxTimer->xTimerListItem ) );
  4016f2:	1d20      	adds	r0, r4, #4
  4016f4:	47c0      	blx	r8
		switch( xMessage.xMessageID )
  4016f6:	9b03      	ldr	r3, [sp, #12]
  4016f8:	2b02      	cmp	r3, #2
  4016fa:	d0dd      	beq.n	4016b8 <prvTimerTask+0xa0>
  4016fc:	2b03      	cmp	r3, #3
  4016fe:	d0e9      	beq.n	4016d4 <prvTimerTask+0xbc>
  401700:	2b00      	cmp	r3, #0
  401702:	d1eb      	bne.n	4016dc <prvTimerTask+0xc4>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  401704:	9904      	ldr	r1, [sp, #16]
  401706:	69a0      	ldr	r0, [r4, #24]
  401708:	460b      	mov	r3, r1
  40170a:	463a      	mov	r2, r7
  40170c:	4401      	add	r1, r0
  40170e:	4620      	mov	r0, r4
  401710:	4d17      	ldr	r5, [pc, #92]	; (401770 <prvTimerTask+0x158>)
  401712:	47a8      	blx	r5
  401714:	2801      	cmp	r0, #1
  401716:	d1e0      	bne.n	4016da <prvTimerTask+0xc2>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401718:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40171a:	4620      	mov	r0, r4
  40171c:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40171e:	69e3      	ldr	r3, [r4, #28]
  401720:	2b01      	cmp	r3, #1
  401722:	d1da      	bne.n	4016da <prvTimerTask+0xc2>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401724:	69a2      	ldr	r2, [r4, #24]
  401726:	2100      	movs	r1, #0
  401728:	9100      	str	r1, [sp, #0]
  40172a:	460b      	mov	r3, r1
  40172c:	9804      	ldr	r0, [sp, #16]
  40172e:	4402      	add	r2, r0
  401730:	4620      	mov	r0, r4
  401732:	4c10      	ldr	r4, [pc, #64]	; (401774 <prvTimerTask+0x15c>)
  401734:	47a0      	blx	r4
						configASSERT( xResult );
  401736:	2800      	cmp	r0, #0
  401738:	d1cf      	bne.n	4016da <prvTimerTask+0xc2>
  40173a:	4b0f      	ldr	r3, [pc, #60]	; (401778 <prvTimerTask+0x160>)
  40173c:	4798      	blx	r3
  40173e:	bf00      	nop
  401740:	e7fd      	b.n	40173e <prvTimerTask+0x126>
	vTaskSuspendAll();
  401742:	4b07      	ldr	r3, [pc, #28]	; (401760 <prvTimerTask+0x148>)
  401744:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401746:	a803      	add	r0, sp, #12
  401748:	4b06      	ldr	r3, [pc, #24]	; (401764 <prvTimerTask+0x14c>)
  40174a:	4798      	blx	r3
  40174c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40174e:	9b03      	ldr	r3, [sp, #12]
  401750:	2b00      	cmp	r3, #0
  401752:	d0a4      	beq.n	40169e <prvTimerTask+0x86>
			xTaskResumeAll();
  401754:	4b04      	ldr	r3, [pc, #16]	; (401768 <prvTimerTask+0x150>)
  401756:	4798      	blx	r3
  401758:	e785      	b.n	401666 <prvTimerTask+0x4e>
  40175a:	bf00      	nop
  40175c:	2040aaf8 	.word	0x2040aaf8
  401760:	00400d7d 	.word	0x00400d7d
  401764:	00401569 	.word	0x00401569
  401768:	00400ed1 	.word	0x00400ed1
  40176c:	2040ab2c 	.word	0x2040ab2c
  401770:	00401421 	.word	0x00401421
  401774:	00401515 	.word	0x00401515
  401778:	004002c1 	.word	0x004002c1
  40177c:	00400a75 	.word	0x00400a75
  401780:	004002b1 	.word	0x004002b1
  401784:	00400521 	.word	0x00400521
  401788:	00400909 	.word	0x00400909
  40178c:	00400221 	.word	0x00400221

00401790 <USART0_Handler>:
#include "snep.h"

volatile xQueueHandle xQueueNFCSend;
volatile xQueueHandle xQueueNFCReceive;

void USART0_Handler(void){
  401790:	b570      	push	{r4, r5, r6, lr}
  401792:	b082      	sub	sp, #8
	uint32_t ret = usart_get_status(USART0);
  401794:	480e      	ldr	r0, [pc, #56]	; (4017d0 <USART0_Handler+0x40>)
  401796:	4b0f      	ldr	r3, [pc, #60]	; (4017d4 <USART0_Handler+0x44>)
  401798:	4798      	blx	r3
	char c;

	// Verifica por qual motivo entrou na interrup?cao
	//  - Dado dispon?vel para leitura
	if(ret & US_IER_RXRDY){
  40179a:	f010 0f01 	tst.w	r0, #1
  40179e:	d101      	bne.n	4017a4 <USART0_Handler+0x14>
		xQueueSendFromISR(xQueueNFCReceive, &c, NULL);
		// -  Transmissoa finalizada
		} else if(ret & US_IER_TXRDY){

	}
}
  4017a0:	b002      	add	sp, #8
  4017a2:	bd70      	pop	{r4, r5, r6, pc}
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
  4017a4:	ac02      	add	r4, sp, #8
  4017a6:	2300      	movs	r3, #0
  4017a8:	f844 3d08 	str.w	r3, [r4, #-8]!
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_read(p_usart, &val));
  4017ac:	4e08      	ldr	r6, [pc, #32]	; (4017d0 <USART0_Handler+0x40>)
  4017ae:	4d0a      	ldr	r5, [pc, #40]	; (4017d8 <USART0_Handler+0x48>)
  4017b0:	4621      	mov	r1, r4
  4017b2:	4630      	mov	r0, r6
  4017b4:	47a8      	blx	r5
  4017b6:	2800      	cmp	r0, #0
  4017b8:	d1fa      	bne.n	4017b0 <USART0_Handler+0x20>
		*data = (uint8_t)(val & 0xFF);
  4017ba:	a902      	add	r1, sp, #8
  4017bc:	9b00      	ldr	r3, [sp, #0]
  4017be:	f801 3d01 	strb.w	r3, [r1, #-1]!
		xQueueSendFromISR(xQueueNFCReceive, &c, NULL);
  4017c2:	4b06      	ldr	r3, [pc, #24]	; (4017dc <USART0_Handler+0x4c>)
  4017c4:	6818      	ldr	r0, [r3, #0]
  4017c6:	2300      	movs	r3, #0
  4017c8:	461a      	mov	r2, r3
  4017ca:	4c05      	ldr	r4, [pc, #20]	; (4017e0 <USART0_Handler+0x50>)
  4017cc:	47a0      	blx	r4
}
  4017ce:	e7e7      	b.n	4017a0 <USART0_Handler+0x10>
  4017d0:	40024000 	.word	0x40024000
  4017d4:	0040209d 	.word	0x0040209d
  4017d8:	004020b7 	.word	0x004020b7
  4017dc:	2040abdc 	.word	0x2040abdc
  4017e0:	0040087d 	.word	0x0040087d

004017e4 <taskNfc>:
	//usart_enable_rx(USART1);
//}
//


int taskNfc(void) {
  4017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017e6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t rvb[32];
	uint8_t c;
	uint8_t b;
	int counter = 0;
	
	xQueueNFCReceive = xQueueCreate(64,sizeof(uint8_t));
  4017e8:	2200      	movs	r2, #0
  4017ea:	2101      	movs	r1, #1
  4017ec:	2040      	movs	r0, #64	; 0x40
  4017ee:	4b20      	ldr	r3, [pc, #128]	; (401870 <taskNfc+0x8c>)
  4017f0:	4798      	blx	r3
  4017f2:	4b20      	ldr	r3, [pc, #128]	; (401874 <taskNfc+0x90>)
  4017f4:	6018      	str	r0, [r3, #0]
	if (xQueueNFCReceive == NULL) {
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	b133      	cbz	r3, 401808 <taskNfc+0x24>
		printf("Falha em criar a fila\n");
	}
	
	
	pn532_config();
  4017fa:	4b1f      	ldr	r3, [pc, #124]	; (401878 <taskNfc+0x94>)
  4017fc:	4798      	blx	r3
	int counter = 0;
  4017fe:	2400      	movs	r4, #0
	
	//pn532_wakeup();
	//snep_read(ndefBuf, sizeof(ndefBuf), 0);
	
	for(;;) {
		if (xQueueReceive(xQueueNFCReceive, &c, portMAX_DELAY)) {
  401800:	4f1c      	ldr	r7, [pc, #112]	; (401874 <taskNfc+0x90>)
  401802:	4e1e      	ldr	r6, [pc, #120]	; (40187c <taskNfc+0x98>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401804:	4d1e      	ldr	r5, [pc, #120]	; (401880 <taskNfc+0x9c>)
  401806:	e019      	b.n	40183c <taskNfc+0x58>
		printf("Falha em criar a fila\n");
  401808:	481e      	ldr	r0, [pc, #120]	; (401884 <taskNfc+0xa0>)
  40180a:	4b1f      	ldr	r3, [pc, #124]	; (401888 <taskNfc+0xa4>)
  40180c:	4798      	blx	r3
  40180e:	e7f4      	b.n	4017fa <taskNfc+0x16>
			//printf("%c (%d)\n", c, c);
			rvb[counter] = c;
			counter++;
			
			if ((char) c == '\0' || counter == 9) {
				printf("[NFC] EOS reached\n");
  401810:	481e      	ldr	r0, [pc, #120]	; (40188c <taskNfc+0xa8>)
  401812:	4c1d      	ldr	r4, [pc, #116]	; (401888 <taskNfc+0xa4>)
  401814:	47a0      	blx	r4
				printf("[NFC] ID is %s\n", rvb);
  401816:	a902      	add	r1, sp, #8
  401818:	481d      	ldr	r0, [pc, #116]	; (401890 <taskNfc+0xac>)
  40181a:	47a0      	blx	r4
				counter = 0;
				memset(rvb, 0, 32);
  40181c:	2220      	movs	r2, #32
  40181e:	2100      	movs	r1, #0
  401820:	a802      	add	r0, sp, #8
  401822:	4b1c      	ldr	r3, [pc, #112]	; (401894 <taskNfc+0xb0>)
  401824:	4798      	blx	r3
				counter = 0;
  401826:	2400      	movs	r4, #0
  401828:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40182a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40182e:	d01a      	beq.n	401866 <taskNfc+0x82>
		port->PIO_CODR = mask;
  401830:	f44f 7380 	mov.w	r3, #256	; 0x100
  401834:	636b      	str	r3, [r5, #52]	; 0x34
			////msg.print();
			//printf("\nSuccess");
			//} else {
			//printf("failed");
		//}
		vTaskDelay(10);
  401836:	200a      	movs	r0, #10
  401838:	4b17      	ldr	r3, [pc, #92]	; (401898 <taskNfc+0xb4>)
  40183a:	4798      	blx	r3
		if (xQueueReceive(xQueueNFCReceive, &c, portMAX_DELAY)) {
  40183c:	6838      	ldr	r0, [r7, #0]
  40183e:	2300      	movs	r3, #0
  401840:	f04f 32ff 	mov.w	r2, #4294967295
  401844:	f10d 0107 	add.w	r1, sp, #7
  401848:	47b0      	blx	r6
  40184a:	2800      	cmp	r0, #0
  40184c:	d0ec      	beq.n	401828 <taskNfc+0x44>
			rvb[counter] = c;
  40184e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401852:	aa0a      	add	r2, sp, #40	; 0x28
  401854:	4422      	add	r2, r4
  401856:	f802 3c20 	strb.w	r3, [r2, #-32]
			counter++;
  40185a:	3401      	adds	r4, #1
			if ((char) c == '\0' || counter == 9) {
  40185c:	2c09      	cmp	r4, #9
  40185e:	d0d7      	beq.n	401810 <taskNfc+0x2c>
  401860:	2b00      	cmp	r3, #0
  401862:	d1e1      	bne.n	401828 <taskNfc+0x44>
  401864:	e7d4      	b.n	401810 <taskNfc+0x2c>
	} else {
		port->PIO_SODR = mask;
  401866:	f44f 7380 	mov.w	r3, #256	; 0x100
  40186a:	632b      	str	r3, [r5, #48]	; 0x30
  40186c:	e7e3      	b.n	401836 <taskNfc+0x52>
  40186e:	bf00      	nop
  401870:	004006fd 	.word	0x004006fd
  401874:	2040abdc 	.word	0x2040abdc
  401878:	0040189d 	.word	0x0040189d
  40187c:	00400909 	.word	0x00400909
  401880:	400e1200 	.word	0x400e1200
  401884:	004056b4 	.word	0x004056b4
  401888:	00402725 	.word	0x00402725
  40188c:	004056cc 	.word	0x004056cc
  401890:	004056e0 	.word	0x004056e0
  401894:	00402881 	.word	0x00402881
  401898:	00400fd1 	.word	0x00400fd1

0040189c <pn532_config>:
	printf("[readAckFrame] Valid ack!\n");
	
	return 0;
}

void pn532_config(void) {
  40189c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018a0:	b087      	sub	sp, #28
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4018a2:	200d      	movs	r0, #13
  4018a4:	4c1f      	ldr	r4, [pc, #124]	; (401924 <pn532_config+0x88>)
  4018a6:	47a0      	blx	r4
  4018a8:	200b      	movs	r0, #11
  4018aa:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  4018ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4018b0:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4018b2:	23c0      	movs	r3, #192	; 0xc0
  4018b4:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4018b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4018ba:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4018bc:	2500      	movs	r5, #0
  4018be:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4018c0:	9504      	str	r5, [sp, #16]
  4018c2:	200d      	movs	r0, #13
  4018c4:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  4018c6:	4c18      	ldr	r4, [pc, #96]	; (401928 <pn532_config+0x8c>)
  4018c8:	4a18      	ldr	r2, [pc, #96]	; (40192c <pn532_config+0x90>)
  4018ca:	4669      	mov	r1, sp
  4018cc:	4620      	mov	r0, r4
  4018ce:	4b18      	ldr	r3, [pc, #96]	; (401930 <pn532_config+0x94>)
  4018d0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4018d2:	4620      	mov	r0, r4
  4018d4:	4f17      	ldr	r7, [pc, #92]	; (401934 <pn532_config+0x98>)
  4018d6:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  4018d8:	4620      	mov	r0, r4
  4018da:	4e17      	ldr	r6, [pc, #92]	; (401938 <pn532_config+0x9c>)
  4018dc:	47b0      	blx	r6
	sysclk_enable_peripheral_clock(ID_PIOB);
	
	usart_serial_init(USART0, &config);

	// RX - PB0  TX - PB1
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  4018de:	f8df 9064 	ldr.w	r9, [pc, #100]	; 401944 <pn532_config+0xa8>
  4018e2:	462b      	mov	r3, r5
  4018e4:	2201      	movs	r2, #1
  4018e6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4018ea:	4648      	mov	r0, r9
  4018ec:	f8df 8058 	ldr.w	r8, [pc, #88]	; 401948 <pn532_config+0xac>
  4018f0:	47c0      	blx	r8
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  4018f2:	462b      	mov	r3, r5
  4018f4:	2202      	movs	r2, #2
  4018f6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4018fa:	4648      	mov	r0, r9
  4018fc:	47c0      	blx	r8
	
	usart_enable_tx(USART0);
  4018fe:	4620      	mov	r0, r4
  401900:	47b8      	blx	r7
	usart_enable_rx(USART0);
  401902:	4620      	mov	r0, r4
  401904:	47b0      	blx	r6
	
	usart_enable_interrupt(USART0, US_IER_RXRDY);
  401906:	2101      	movs	r1, #1
  401908:	4620      	mov	r0, r4
  40190a:	4b0c      	ldr	r3, [pc, #48]	; (40193c <pn532_config+0xa0>)
  40190c:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40190e:	4b0c      	ldr	r3, [pc, #48]	; (401940 <pn532_config+0xa4>)
  401910:	2280      	movs	r2, #128	; 0x80
  401912:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40191a:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(ID_USART0, 4);
	NVIC_EnableIRQ(ID_USART0);
}
  40191c:	b007      	add	sp, #28
  40191e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401922:	bf00      	nop
  401924:	00401f3d 	.word	0x00401f3d
  401928:	40024000 	.word	0x40024000
  40192c:	08f0d180 	.word	0x08f0d180
  401930:	00402039 	.word	0x00402039
  401934:	0040208d 	.word	0x0040208d
  401938:	00402093 	.word	0x00402093
  40193c:	00402099 	.word	0x00402099
  401940:	e000e100 	.word	0xe000e100
  401944:	400e1000 	.word	0x400e1000
  401948:	00401cd1 	.word	0x00401cd1

0040194c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40194c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40194e:	4810      	ldr	r0, [pc, #64]	; (401990 <sysclk_init+0x44>)
  401950:	4b10      	ldr	r3, [pc, #64]	; (401994 <sysclk_init+0x48>)
  401952:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401954:	213e      	movs	r1, #62	; 0x3e
  401956:	2000      	movs	r0, #0
  401958:	4b0f      	ldr	r3, [pc, #60]	; (401998 <sysclk_init+0x4c>)
  40195a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40195c:	4c0f      	ldr	r4, [pc, #60]	; (40199c <sysclk_init+0x50>)
  40195e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401960:	2800      	cmp	r0, #0
  401962:	d0fc      	beq.n	40195e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401964:	4b0e      	ldr	r3, [pc, #56]	; (4019a0 <sysclk_init+0x54>)
  401966:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401968:	4a0e      	ldr	r2, [pc, #56]	; (4019a4 <sysclk_init+0x58>)
  40196a:	4b0f      	ldr	r3, [pc, #60]	; (4019a8 <sysclk_init+0x5c>)
  40196c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40196e:	4c0f      	ldr	r4, [pc, #60]	; (4019ac <sysclk_init+0x60>)
  401970:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401972:	2800      	cmp	r0, #0
  401974:	d0fc      	beq.n	401970 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401976:	2002      	movs	r0, #2
  401978:	4b0d      	ldr	r3, [pc, #52]	; (4019b0 <sysclk_init+0x64>)
  40197a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40197c:	2000      	movs	r0, #0
  40197e:	4b0d      	ldr	r3, [pc, #52]	; (4019b4 <sysclk_init+0x68>)
  401980:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401982:	4b0d      	ldr	r3, [pc, #52]	; (4019b8 <sysclk_init+0x6c>)
  401984:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401986:	4802      	ldr	r0, [pc, #8]	; (401990 <sysclk_init+0x44>)
  401988:	4b02      	ldr	r3, [pc, #8]	; (401994 <sysclk_init+0x48>)
  40198a:	4798      	blx	r3
  40198c:	bd10      	pop	{r4, pc}
  40198e:	bf00      	nop
  401990:	11e1a300 	.word	0x11e1a300
  401994:	004022a5 	.word	0x004022a5
  401998:	00401eb9 	.word	0x00401eb9
  40199c:	00401f0d 	.word	0x00401f0d
  4019a0:	00401f1d 	.word	0x00401f1d
  4019a4:	20183f01 	.word	0x20183f01
  4019a8:	400e0600 	.word	0x400e0600
  4019ac:	00401f2d 	.word	0x00401f2d
  4019b0:	00401e1d 	.word	0x00401e1d
  4019b4:	00401e55 	.word	0x00401e55
  4019b8:	00402199 	.word	0x00402199

004019bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4019bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4019c0:	b980      	cbnz	r0, 4019e4 <_read+0x28>
  4019c2:	460c      	mov	r4, r1
  4019c4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4019c6:	2a00      	cmp	r2, #0
  4019c8:	dd0f      	ble.n	4019ea <_read+0x2e>
  4019ca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4019cc:	4e08      	ldr	r6, [pc, #32]	; (4019f0 <_read+0x34>)
  4019ce:	4d09      	ldr	r5, [pc, #36]	; (4019f4 <_read+0x38>)
  4019d0:	6830      	ldr	r0, [r6, #0]
  4019d2:	4621      	mov	r1, r4
  4019d4:	682b      	ldr	r3, [r5, #0]
  4019d6:	4798      	blx	r3
		ptr++;
  4019d8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4019da:	42bc      	cmp	r4, r7
  4019dc:	d1f8      	bne.n	4019d0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4019de:	4640      	mov	r0, r8
  4019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4019e4:	f04f 38ff 	mov.w	r8, #4294967295
  4019e8:	e7f9      	b.n	4019de <_read+0x22>
	for (; len > 0; --len) {
  4019ea:	4680      	mov	r8, r0
  4019ec:	e7f7      	b.n	4019de <_read+0x22>
  4019ee:	bf00      	nop
  4019f0:	2040abec 	.word	0x2040abec
  4019f4:	2040abe4 	.word	0x2040abe4

004019f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4019f8:	3801      	subs	r0, #1
  4019fa:	2802      	cmp	r0, #2
  4019fc:	d815      	bhi.n	401a2a <_write+0x32>
{
  4019fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a02:	460e      	mov	r6, r1
  401a04:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401a06:	b19a      	cbz	r2, 401a30 <_write+0x38>
  401a08:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401a0a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401a44 <_write+0x4c>
  401a0e:	4f0c      	ldr	r7, [pc, #48]	; (401a40 <_write+0x48>)
  401a10:	f8d8 0000 	ldr.w	r0, [r8]
  401a14:	f815 1b01 	ldrb.w	r1, [r5], #1
  401a18:	683b      	ldr	r3, [r7, #0]
  401a1a:	4798      	blx	r3
  401a1c:	2800      	cmp	r0, #0
  401a1e:	db0a      	blt.n	401a36 <_write+0x3e>
  401a20:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401a22:	3c01      	subs	r4, #1
  401a24:	d1f4      	bne.n	401a10 <_write+0x18>
  401a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401a2a:	f04f 30ff 	mov.w	r0, #4294967295
  401a2e:	4770      	bx	lr
	for (; len != 0; --len) {
  401a30:	4610      	mov	r0, r2
  401a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401a36:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a3e:	bf00      	nop
  401a40:	2040abe8 	.word	0x2040abe8
  401a44:	2040abec 	.word	0x2040abec

00401a48 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401a4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401a4e:	4b5c      	ldr	r3, [pc, #368]	; (401bc0 <board_init+0x178>)
  401a50:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a56:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401a5a:	4b5a      	ldr	r3, [pc, #360]	; (401bc4 <board_init+0x17c>)
  401a5c:	2200      	movs	r2, #0
  401a5e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401a62:	695a      	ldr	r2, [r3, #20]
  401a64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401a68:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  401a6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a6e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401a72:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401a76:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401a7a:	f007 0007 	and.w	r0, r7, #7
  401a7e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401a80:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401a84:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401a88:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401a8c:	f3bf 8f4f 	dsb	sy
  401a90:	f04f 34ff 	mov.w	r4, #4294967295
  401a94:	fa04 fc00 	lsl.w	ip, r4, r0
  401a98:	fa06 f000 	lsl.w	r0, r6, r0
  401a9c:	fa04 f40e 	lsl.w	r4, r4, lr
  401aa0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  401aa4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  401aa6:	463a      	mov	r2, r7
  401aa8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401aaa:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  401aae:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  401ab2:	3a01      	subs	r2, #1
  401ab4:	4423      	add	r3, r4
  401ab6:	f1b2 3fff 	cmp.w	r2, #4294967295
  401aba:	d1f6      	bne.n	401aaa <board_init+0x62>
        } while(sets--);
  401abc:	3e01      	subs	r6, #1
  401abe:	4460      	add	r0, ip
  401ac0:	f1b6 3fff 	cmp.w	r6, #4294967295
  401ac4:	d1ef      	bne.n	401aa6 <board_init+0x5e>
  401ac6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401aca:	4b3e      	ldr	r3, [pc, #248]	; (401bc4 <board_init+0x17c>)
  401acc:	695a      	ldr	r2, [r3, #20]
  401ace:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401ad2:	615a      	str	r2, [r3, #20]
  401ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ad8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401adc:	4a3a      	ldr	r2, [pc, #232]	; (401bc8 <board_init+0x180>)
  401ade:	493b      	ldr	r1, [pc, #236]	; (401bcc <board_init+0x184>)
  401ae0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ae2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401ae6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  401ae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401aec:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401af0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401af4:	f022 0201 	bic.w	r2, r2, #1
  401af8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401afc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401b00:	f022 0201 	bic.w	r2, r2, #1
  401b04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b0c:	f3bf 8f6f 	isb	sy
  401b10:	200a      	movs	r0, #10
  401b12:	4c2f      	ldr	r4, [pc, #188]	; (401bd0 <board_init+0x188>)
  401b14:	47a0      	blx	r4
  401b16:	200b      	movs	r0, #11
  401b18:	47a0      	blx	r4
  401b1a:	200c      	movs	r0, #12
  401b1c:	47a0      	blx	r4
  401b1e:	2010      	movs	r0, #16
  401b20:	47a0      	blx	r4
  401b22:	2011      	movs	r0, #17
  401b24:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b26:	4b2b      	ldr	r3, [pc, #172]	; (401bd4 <board_init+0x18c>)
  401b28:	f44f 7280 	mov.w	r2, #256	; 0x100
  401b2c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b32:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b34:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b3c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401b42:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b48:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401b4a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401b50:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401b52:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401b56:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401b58:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401b5a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401b5e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401b60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401b64:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401b68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401b6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401b70:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b76:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401b78:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401b7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401b80:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401b84:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401b86:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401b88:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401b8c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401b8e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401b90:	4a11      	ldr	r2, [pc, #68]	; (401bd8 <board_init+0x190>)
  401b92:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401b96:	f043 0310 	orr.w	r3, r3, #16
  401b9a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  401b9e:	4b0f      	ldr	r3, [pc, #60]	; (401bdc <board_init+0x194>)
  401ba0:	2210      	movs	r2, #16
  401ba2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ba8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401baa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401bb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401bb2:	4311      	orrs	r1, r2
  401bb4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401bb6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401bb8:	4311      	orrs	r1, r2
  401bba:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401bbc:	605a      	str	r2, [r3, #4]
  401bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401bc0:	400e1850 	.word	0x400e1850
  401bc4:	e000ed00 	.word	0xe000ed00
  401bc8:	400e0c00 	.word	0x400e0c00
  401bcc:	5a00080c 	.word	0x5a00080c
  401bd0:	00401f3d 	.word	0x00401f3d
  401bd4:	400e1200 	.word	0x400e1200
  401bd8:	40088000 	.word	0x40088000
  401bdc:	400e1000 	.word	0x400e1000

00401be0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401be0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401be2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401be6:	d03a      	beq.n	401c5e <pio_set_peripheral+0x7e>
  401be8:	d813      	bhi.n	401c12 <pio_set_peripheral+0x32>
  401bea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401bee:	d025      	beq.n	401c3c <pio_set_peripheral+0x5c>
  401bf0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401bf4:	d10a      	bne.n	401c0c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bf6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401bf8:	4313      	orrs	r3, r2
  401bfa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401bfc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401bfe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c00:	400b      	ands	r3, r1
  401c02:	ea23 0302 	bic.w	r3, r3, r2
  401c06:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c08:	6042      	str	r2, [r0, #4]
  401c0a:	4770      	bx	lr
	switch (ul_type) {
  401c0c:	2900      	cmp	r1, #0
  401c0e:	d1fb      	bne.n	401c08 <pio_set_peripheral+0x28>
  401c10:	4770      	bx	lr
  401c12:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c16:	d021      	beq.n	401c5c <pio_set_peripheral+0x7c>
  401c18:	d809      	bhi.n	401c2e <pio_set_peripheral+0x4e>
  401c1a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c1e:	d1f3      	bne.n	401c08 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c20:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c22:	4313      	orrs	r3, r2
  401c24:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c26:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c28:	4313      	orrs	r3, r2
  401c2a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c2c:	e7ec      	b.n	401c08 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401c2e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c32:	d013      	beq.n	401c5c <pio_set_peripheral+0x7c>
  401c34:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c38:	d010      	beq.n	401c5c <pio_set_peripheral+0x7c>
  401c3a:	e7e5      	b.n	401c08 <pio_set_peripheral+0x28>
{
  401c3c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c3e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c40:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401c42:	43d3      	mvns	r3, r2
  401c44:	4021      	ands	r1, r4
  401c46:	461c      	mov	r4, r3
  401c48:	4019      	ands	r1, r3
  401c4a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c4e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c50:	400b      	ands	r3, r1
  401c52:	4023      	ands	r3, r4
  401c54:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401c56:	6042      	str	r2, [r0, #4]
}
  401c58:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c5c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c60:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c62:	400b      	ands	r3, r1
  401c64:	ea23 0302 	bic.w	r3, r3, r2
  401c68:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c6a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c6c:	4313      	orrs	r3, r2
  401c6e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c70:	e7ca      	b.n	401c08 <pio_set_peripheral+0x28>

00401c72 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c72:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c74:	f012 0f01 	tst.w	r2, #1
  401c78:	d10d      	bne.n	401c96 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401c7a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c7c:	f012 0f0a 	tst.w	r2, #10
  401c80:	d00b      	beq.n	401c9a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401c82:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c84:	f012 0f02 	tst.w	r2, #2
  401c88:	d109      	bne.n	401c9e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401c8a:	f012 0f08 	tst.w	r2, #8
  401c8e:	d008      	beq.n	401ca2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401c90:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401c94:	e005      	b.n	401ca2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401c96:	6641      	str	r1, [r0, #100]	; 0x64
  401c98:	e7f0      	b.n	401c7c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401c9a:	6241      	str	r1, [r0, #36]	; 0x24
  401c9c:	e7f2      	b.n	401c84 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401c9e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401ca2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401ca4:	6001      	str	r1, [r0, #0]
  401ca6:	4770      	bx	lr

00401ca8 <pio_set_output>:
{
  401ca8:	b410      	push	{r4}
  401caa:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401cac:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401cae:	b94c      	cbnz	r4, 401cc4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401cb0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401cb2:	b14b      	cbz	r3, 401cc8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401cb4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401cb6:	b94a      	cbnz	r2, 401ccc <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401cb8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401cba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401cbc:	6001      	str	r1, [r0, #0]
}
  401cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cc2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401cc4:	6641      	str	r1, [r0, #100]	; 0x64
  401cc6:	e7f4      	b.n	401cb2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401cc8:	6541      	str	r1, [r0, #84]	; 0x54
  401cca:	e7f4      	b.n	401cb6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401ccc:	6301      	str	r1, [r0, #48]	; 0x30
  401cce:	e7f4      	b.n	401cba <pio_set_output+0x12>

00401cd0 <pio_configure>:
{
  401cd0:	b570      	push	{r4, r5, r6, lr}
  401cd2:	b082      	sub	sp, #8
  401cd4:	4605      	mov	r5, r0
  401cd6:	4616      	mov	r6, r2
  401cd8:	461c      	mov	r4, r3
	switch (ul_type) {
  401cda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401cde:	d014      	beq.n	401d0a <pio_configure+0x3a>
  401ce0:	d90a      	bls.n	401cf8 <pio_configure+0x28>
  401ce2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401ce6:	d024      	beq.n	401d32 <pio_configure+0x62>
  401ce8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401cec:	d021      	beq.n	401d32 <pio_configure+0x62>
  401cee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401cf2:	d017      	beq.n	401d24 <pio_configure+0x54>
		return 0;
  401cf4:	2000      	movs	r0, #0
  401cf6:	e01a      	b.n	401d2e <pio_configure+0x5e>
	switch (ul_type) {
  401cf8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401cfc:	d005      	beq.n	401d0a <pio_configure+0x3a>
  401cfe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401d02:	d002      	beq.n	401d0a <pio_configure+0x3a>
  401d04:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401d08:	d1f4      	bne.n	401cf4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401d0a:	4632      	mov	r2, r6
  401d0c:	4628      	mov	r0, r5
  401d0e:	4b11      	ldr	r3, [pc, #68]	; (401d54 <pio_configure+0x84>)
  401d10:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401d12:	f014 0f01 	tst.w	r4, #1
  401d16:	d102      	bne.n	401d1e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401d18:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401d1a:	2001      	movs	r0, #1
  401d1c:	e007      	b.n	401d2e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401d1e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401d20:	2001      	movs	r0, #1
  401d22:	e004      	b.n	401d2e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401d24:	461a      	mov	r2, r3
  401d26:	4631      	mov	r1, r6
  401d28:	4b0b      	ldr	r3, [pc, #44]	; (401d58 <pio_configure+0x88>)
  401d2a:	4798      	blx	r3
	return 1;
  401d2c:	2001      	movs	r0, #1
}
  401d2e:	b002      	add	sp, #8
  401d30:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401d32:	f004 0301 	and.w	r3, r4, #1
  401d36:	9300      	str	r3, [sp, #0]
  401d38:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401d3c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401d40:	bf14      	ite	ne
  401d42:	2200      	movne	r2, #0
  401d44:	2201      	moveq	r2, #1
  401d46:	4631      	mov	r1, r6
  401d48:	4628      	mov	r0, r5
  401d4a:	4c04      	ldr	r4, [pc, #16]	; (401d5c <pio_configure+0x8c>)
  401d4c:	47a0      	blx	r4
	return 1;
  401d4e:	2001      	movs	r0, #1
		break;
  401d50:	e7ed      	b.n	401d2e <pio_configure+0x5e>
  401d52:	bf00      	nop
  401d54:	00401be1 	.word	0x00401be1
  401d58:	00401c73 	.word	0x00401c73
  401d5c:	00401ca9 	.word	0x00401ca9

00401d60 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d60:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d62:	4770      	bx	lr

00401d64 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d64:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d66:	4770      	bx	lr

00401d68 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d6c:	4604      	mov	r4, r0
  401d6e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401d70:	4b0e      	ldr	r3, [pc, #56]	; (401dac <pio_handler_process+0x44>)
  401d72:	4798      	blx	r3
  401d74:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401d76:	4620      	mov	r0, r4
  401d78:	4b0d      	ldr	r3, [pc, #52]	; (401db0 <pio_handler_process+0x48>)
  401d7a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401d7c:	4005      	ands	r5, r0
  401d7e:	d013      	beq.n	401da8 <pio_handler_process+0x40>
  401d80:	4c0c      	ldr	r4, [pc, #48]	; (401db4 <pio_handler_process+0x4c>)
  401d82:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401d86:	e003      	b.n	401d90 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401d88:	42b4      	cmp	r4, r6
  401d8a:	d00d      	beq.n	401da8 <pio_handler_process+0x40>
  401d8c:	3410      	adds	r4, #16
		while (status != 0) {
  401d8e:	b15d      	cbz	r5, 401da8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401d90:	6820      	ldr	r0, [r4, #0]
  401d92:	4540      	cmp	r0, r8
  401d94:	d1f8      	bne.n	401d88 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d96:	6861      	ldr	r1, [r4, #4]
  401d98:	4229      	tst	r1, r5
  401d9a:	d0f5      	beq.n	401d88 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d9c:	68e3      	ldr	r3, [r4, #12]
  401d9e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401da0:	6863      	ldr	r3, [r4, #4]
  401da2:	ea25 0503 	bic.w	r5, r5, r3
  401da6:	e7ef      	b.n	401d88 <pio_handler_process+0x20>
  401da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401dac:	00401d61 	.word	0x00401d61
  401db0:	00401d65 	.word	0x00401d65
  401db4:	2040ab30 	.word	0x2040ab30

00401db8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401db8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401dba:	210a      	movs	r1, #10
  401dbc:	4801      	ldr	r0, [pc, #4]	; (401dc4 <PIOA_Handler+0xc>)
  401dbe:	4b02      	ldr	r3, [pc, #8]	; (401dc8 <PIOA_Handler+0x10>)
  401dc0:	4798      	blx	r3
  401dc2:	bd08      	pop	{r3, pc}
  401dc4:	400e0e00 	.word	0x400e0e00
  401dc8:	00401d69 	.word	0x00401d69

00401dcc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401dcc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401dce:	210b      	movs	r1, #11
  401dd0:	4801      	ldr	r0, [pc, #4]	; (401dd8 <PIOB_Handler+0xc>)
  401dd2:	4b02      	ldr	r3, [pc, #8]	; (401ddc <PIOB_Handler+0x10>)
  401dd4:	4798      	blx	r3
  401dd6:	bd08      	pop	{r3, pc}
  401dd8:	400e1000 	.word	0x400e1000
  401ddc:	00401d69 	.word	0x00401d69

00401de0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401de0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401de2:	210c      	movs	r1, #12
  401de4:	4801      	ldr	r0, [pc, #4]	; (401dec <PIOC_Handler+0xc>)
  401de6:	4b02      	ldr	r3, [pc, #8]	; (401df0 <PIOC_Handler+0x10>)
  401de8:	4798      	blx	r3
  401dea:	bd08      	pop	{r3, pc}
  401dec:	400e1200 	.word	0x400e1200
  401df0:	00401d69 	.word	0x00401d69

00401df4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401df4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401df6:	2110      	movs	r1, #16
  401df8:	4801      	ldr	r0, [pc, #4]	; (401e00 <PIOD_Handler+0xc>)
  401dfa:	4b02      	ldr	r3, [pc, #8]	; (401e04 <PIOD_Handler+0x10>)
  401dfc:	4798      	blx	r3
  401dfe:	bd08      	pop	{r3, pc}
  401e00:	400e1400 	.word	0x400e1400
  401e04:	00401d69 	.word	0x00401d69

00401e08 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401e08:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401e0a:	2111      	movs	r1, #17
  401e0c:	4801      	ldr	r0, [pc, #4]	; (401e14 <PIOE_Handler+0xc>)
  401e0e:	4b02      	ldr	r3, [pc, #8]	; (401e18 <PIOE_Handler+0x10>)
  401e10:	4798      	blx	r3
  401e12:	bd08      	pop	{r3, pc}
  401e14:	400e1600 	.word	0x400e1600
  401e18:	00401d69 	.word	0x00401d69

00401e1c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401e1c:	2803      	cmp	r0, #3
  401e1e:	d011      	beq.n	401e44 <pmc_mck_set_division+0x28>
  401e20:	2804      	cmp	r0, #4
  401e22:	d012      	beq.n	401e4a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401e24:	2802      	cmp	r0, #2
  401e26:	bf0c      	ite	eq
  401e28:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401e2c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401e2e:	4a08      	ldr	r2, [pc, #32]	; (401e50 <pmc_mck_set_division+0x34>)
  401e30:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401e36:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401e38:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401e3a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e3c:	f013 0f08 	tst.w	r3, #8
  401e40:	d0fb      	beq.n	401e3a <pmc_mck_set_division+0x1e>
}
  401e42:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401e44:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401e48:	e7f1      	b.n	401e2e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401e4e:	e7ee      	b.n	401e2e <pmc_mck_set_division+0x12>
  401e50:	400e0600 	.word	0x400e0600

00401e54 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e54:	4a17      	ldr	r2, [pc, #92]	; (401eb4 <pmc_switch_mck_to_pllack+0x60>)
  401e56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401e5c:	4318      	orrs	r0, r3
  401e5e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e62:	f013 0f08 	tst.w	r3, #8
  401e66:	d10a      	bne.n	401e7e <pmc_switch_mck_to_pllack+0x2a>
  401e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e6c:	4911      	ldr	r1, [pc, #68]	; (401eb4 <pmc_switch_mck_to_pllack+0x60>)
  401e6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e70:	f012 0f08 	tst.w	r2, #8
  401e74:	d103      	bne.n	401e7e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e76:	3b01      	subs	r3, #1
  401e78:	d1f9      	bne.n	401e6e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401e7a:	2001      	movs	r0, #1
  401e7c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e7e:	4a0d      	ldr	r2, [pc, #52]	; (401eb4 <pmc_switch_mck_to_pllack+0x60>)
  401e80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e82:	f023 0303 	bic.w	r3, r3, #3
  401e86:	f043 0302 	orr.w	r3, r3, #2
  401e8a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e8e:	f013 0f08 	tst.w	r3, #8
  401e92:	d10a      	bne.n	401eaa <pmc_switch_mck_to_pllack+0x56>
  401e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e98:	4906      	ldr	r1, [pc, #24]	; (401eb4 <pmc_switch_mck_to_pllack+0x60>)
  401e9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e9c:	f012 0f08 	tst.w	r2, #8
  401ea0:	d105      	bne.n	401eae <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ea2:	3b01      	subs	r3, #1
  401ea4:	d1f9      	bne.n	401e9a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401ea6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401ea8:	4770      	bx	lr
	return 0;
  401eaa:	2000      	movs	r0, #0
  401eac:	4770      	bx	lr
  401eae:	2000      	movs	r0, #0
  401eb0:	4770      	bx	lr
  401eb2:	bf00      	nop
  401eb4:	400e0600 	.word	0x400e0600

00401eb8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401eb8:	b9a0      	cbnz	r0, 401ee4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401eba:	480e      	ldr	r0, [pc, #56]	; (401ef4 <pmc_switch_mainck_to_xtal+0x3c>)
  401ebc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401ebe:	0209      	lsls	r1, r1, #8
  401ec0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ec2:	4a0d      	ldr	r2, [pc, #52]	; (401ef8 <pmc_switch_mainck_to_xtal+0x40>)
  401ec4:	401a      	ands	r2, r3
  401ec6:	4b0d      	ldr	r3, [pc, #52]	; (401efc <pmc_switch_mainck_to_xtal+0x44>)
  401ec8:	4313      	orrs	r3, r2
  401eca:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ecc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401ece:	4602      	mov	r2, r0
  401ed0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ed2:	f013 0f01 	tst.w	r3, #1
  401ed6:	d0fb      	beq.n	401ed0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ed8:	4a06      	ldr	r2, [pc, #24]	; (401ef4 <pmc_switch_mainck_to_xtal+0x3c>)
  401eda:	6a11      	ldr	r1, [r2, #32]
  401edc:	4b08      	ldr	r3, [pc, #32]	; (401f00 <pmc_switch_mainck_to_xtal+0x48>)
  401ede:	430b      	orrs	r3, r1
  401ee0:	6213      	str	r3, [r2, #32]
  401ee2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ee4:	4903      	ldr	r1, [pc, #12]	; (401ef4 <pmc_switch_mainck_to_xtal+0x3c>)
  401ee6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401ee8:	4a06      	ldr	r2, [pc, #24]	; (401f04 <pmc_switch_mainck_to_xtal+0x4c>)
  401eea:	401a      	ands	r2, r3
  401eec:	4b06      	ldr	r3, [pc, #24]	; (401f08 <pmc_switch_mainck_to_xtal+0x50>)
  401eee:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ef0:	620b      	str	r3, [r1, #32]
  401ef2:	4770      	bx	lr
  401ef4:	400e0600 	.word	0x400e0600
  401ef8:	ffc8fffc 	.word	0xffc8fffc
  401efc:	00370001 	.word	0x00370001
  401f00:	01370000 	.word	0x01370000
  401f04:	fec8fffc 	.word	0xfec8fffc
  401f08:	01370002 	.word	0x01370002

00401f0c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401f0c:	4b02      	ldr	r3, [pc, #8]	; (401f18 <pmc_osc_is_ready_mainck+0xc>)
  401f0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f10:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401f14:	4770      	bx	lr
  401f16:	bf00      	nop
  401f18:	400e0600 	.word	0x400e0600

00401f1c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401f1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401f20:	4b01      	ldr	r3, [pc, #4]	; (401f28 <pmc_disable_pllack+0xc>)
  401f22:	629a      	str	r2, [r3, #40]	; 0x28
  401f24:	4770      	bx	lr
  401f26:	bf00      	nop
  401f28:	400e0600 	.word	0x400e0600

00401f2c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401f2c:	4b02      	ldr	r3, [pc, #8]	; (401f38 <pmc_is_locked_pllack+0xc>)
  401f2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f30:	f000 0002 	and.w	r0, r0, #2
  401f34:	4770      	bx	lr
  401f36:	bf00      	nop
  401f38:	400e0600 	.word	0x400e0600

00401f3c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401f3c:	283f      	cmp	r0, #63	; 0x3f
  401f3e:	d81e      	bhi.n	401f7e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401f40:	281f      	cmp	r0, #31
  401f42:	d80c      	bhi.n	401f5e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401f44:	4b11      	ldr	r3, [pc, #68]	; (401f8c <pmc_enable_periph_clk+0x50>)
  401f46:	699a      	ldr	r2, [r3, #24]
  401f48:	2301      	movs	r3, #1
  401f4a:	4083      	lsls	r3, r0
  401f4c:	4393      	bics	r3, r2
  401f4e:	d018      	beq.n	401f82 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401f50:	2301      	movs	r3, #1
  401f52:	fa03 f000 	lsl.w	r0, r3, r0
  401f56:	4b0d      	ldr	r3, [pc, #52]	; (401f8c <pmc_enable_periph_clk+0x50>)
  401f58:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f5a:	2000      	movs	r0, #0
  401f5c:	4770      	bx	lr
		ul_id -= 32;
  401f5e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401f60:	4b0a      	ldr	r3, [pc, #40]	; (401f8c <pmc_enable_periph_clk+0x50>)
  401f62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401f66:	2301      	movs	r3, #1
  401f68:	4083      	lsls	r3, r0
  401f6a:	4393      	bics	r3, r2
  401f6c:	d00b      	beq.n	401f86 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401f6e:	2301      	movs	r3, #1
  401f70:	fa03 f000 	lsl.w	r0, r3, r0
  401f74:	4b05      	ldr	r3, [pc, #20]	; (401f8c <pmc_enable_periph_clk+0x50>)
  401f76:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401f7a:	2000      	movs	r0, #0
  401f7c:	4770      	bx	lr
		return 1;
  401f7e:	2001      	movs	r0, #1
  401f80:	4770      	bx	lr
	return 0;
  401f82:	2000      	movs	r0, #0
  401f84:	4770      	bx	lr
  401f86:	2000      	movs	r0, #0
}
  401f88:	4770      	bx	lr
  401f8a:	bf00      	nop
  401f8c:	400e0600 	.word	0x400e0600

00401f90 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401f90:	6943      	ldr	r3, [r0, #20]
  401f92:	f013 0f02 	tst.w	r3, #2
  401f96:	d002      	beq.n	401f9e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401f98:	61c1      	str	r1, [r0, #28]
	return 0;
  401f9a:	2000      	movs	r0, #0
  401f9c:	4770      	bx	lr
		return 1;
  401f9e:	2001      	movs	r0, #1
}
  401fa0:	4770      	bx	lr

00401fa2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401fa2:	6943      	ldr	r3, [r0, #20]
  401fa4:	f013 0f01 	tst.w	r3, #1
  401fa8:	d003      	beq.n	401fb2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401faa:	6983      	ldr	r3, [r0, #24]
  401fac:	700b      	strb	r3, [r1, #0]
	return 0;
  401fae:	2000      	movs	r0, #0
  401fb0:	4770      	bx	lr
		return 1;
  401fb2:	2001      	movs	r0, #1
}
  401fb4:	4770      	bx	lr

00401fb6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401fb6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401fb8:	010b      	lsls	r3, r1, #4
  401fba:	4293      	cmp	r3, r2
  401fbc:	d914      	bls.n	401fe8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401fbe:	00c9      	lsls	r1, r1, #3
  401fc0:	084b      	lsrs	r3, r1, #1
  401fc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401fc6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401fca:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401fcc:	1e5c      	subs	r4, r3, #1
  401fce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401fd2:	428c      	cmp	r4, r1
  401fd4:	d901      	bls.n	401fda <usart_set_async_baudrate+0x24>
		return 1;
  401fd6:	2001      	movs	r0, #1
  401fd8:	e017      	b.n	40200a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401fda:	6841      	ldr	r1, [r0, #4]
  401fdc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401fe0:	6041      	str	r1, [r0, #4]
  401fe2:	e00c      	b.n	401ffe <usart_set_async_baudrate+0x48>
		return 1;
  401fe4:	2001      	movs	r0, #1
  401fe6:	e010      	b.n	40200a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401fe8:	0859      	lsrs	r1, r3, #1
  401fea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401fee:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401ff2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ff4:	1e5c      	subs	r4, r3, #1
  401ff6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401ffa:	428c      	cmp	r4, r1
  401ffc:	d8f2      	bhi.n	401fe4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401ffe:	0412      	lsls	r2, r2, #16
  402000:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402004:	431a      	orrs	r2, r3
  402006:	6202      	str	r2, [r0, #32]

	return 0;
  402008:	2000      	movs	r0, #0
}
  40200a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40200e:	4770      	bx	lr

00402010 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402010:	4b08      	ldr	r3, [pc, #32]	; (402034 <usart_reset+0x24>)
  402012:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  402016:	2300      	movs	r3, #0
  402018:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40201a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40201c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40201e:	2388      	movs	r3, #136	; 0x88
  402020:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402022:	2324      	movs	r3, #36	; 0x24
  402024:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  402026:	f44f 7380 	mov.w	r3, #256	; 0x100
  40202a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40202c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402030:	6003      	str	r3, [r0, #0]
  402032:	4770      	bx	lr
  402034:	55534100 	.word	0x55534100

00402038 <usart_init_rs232>:
{
  402038:	b570      	push	{r4, r5, r6, lr}
  40203a:	4605      	mov	r5, r0
  40203c:	460c      	mov	r4, r1
  40203e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402040:	4b0f      	ldr	r3, [pc, #60]	; (402080 <usart_init_rs232+0x48>)
  402042:	4798      	blx	r3
	ul_reg_val = 0;
  402044:	2200      	movs	r2, #0
  402046:	4b0f      	ldr	r3, [pc, #60]	; (402084 <usart_init_rs232+0x4c>)
  402048:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40204a:	b1a4      	cbz	r4, 402076 <usart_init_rs232+0x3e>
  40204c:	4632      	mov	r2, r6
  40204e:	6821      	ldr	r1, [r4, #0]
  402050:	4628      	mov	r0, r5
  402052:	4b0d      	ldr	r3, [pc, #52]	; (402088 <usart_init_rs232+0x50>)
  402054:	4798      	blx	r3
  402056:	4602      	mov	r2, r0
  402058:	b978      	cbnz	r0, 40207a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40205a:	6863      	ldr	r3, [r4, #4]
  40205c:	68a1      	ldr	r1, [r4, #8]
  40205e:	430b      	orrs	r3, r1
  402060:	6921      	ldr	r1, [r4, #16]
  402062:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402064:	68e1      	ldr	r1, [r4, #12]
  402066:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402068:	4906      	ldr	r1, [pc, #24]	; (402084 <usart_init_rs232+0x4c>)
  40206a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40206c:	6869      	ldr	r1, [r5, #4]
  40206e:	430b      	orrs	r3, r1
  402070:	606b      	str	r3, [r5, #4]
}
  402072:	4610      	mov	r0, r2
  402074:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  402076:	2201      	movs	r2, #1
  402078:	e7fb      	b.n	402072 <usart_init_rs232+0x3a>
  40207a:	2201      	movs	r2, #1
  40207c:	e7f9      	b.n	402072 <usart_init_rs232+0x3a>
  40207e:	bf00      	nop
  402080:	00402011 	.word	0x00402011
  402084:	2040aba0 	.word	0x2040aba0
  402088:	00401fb7 	.word	0x00401fb7

0040208c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40208c:	2340      	movs	r3, #64	; 0x40
  40208e:	6003      	str	r3, [r0, #0]
  402090:	4770      	bx	lr

00402092 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402092:	2310      	movs	r3, #16
  402094:	6003      	str	r3, [r0, #0]
  402096:	4770      	bx	lr

00402098 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  402098:	6081      	str	r1, [r0, #8]
  40209a:	4770      	bx	lr

0040209c <usart_get_status>:
	return p_usart->US_CSR;
  40209c:	6940      	ldr	r0, [r0, #20]
}
  40209e:	4770      	bx	lr

004020a0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4020a0:	6943      	ldr	r3, [r0, #20]
  4020a2:	f013 0f02 	tst.w	r3, #2
  4020a6:	d004      	beq.n	4020b2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4020a8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4020ac:	61c1      	str	r1, [r0, #28]
	return 0;
  4020ae:	2000      	movs	r0, #0
  4020b0:	4770      	bx	lr
		return 1;
  4020b2:	2001      	movs	r0, #1
}
  4020b4:	4770      	bx	lr

004020b6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4020b6:	6943      	ldr	r3, [r0, #20]
  4020b8:	f013 0f01 	tst.w	r3, #1
  4020bc:	d005      	beq.n	4020ca <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4020be:	6983      	ldr	r3, [r0, #24]
  4020c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4020c4:	600b      	str	r3, [r1, #0]
	return 0;
  4020c6:	2000      	movs	r0, #0
  4020c8:	4770      	bx	lr
		return 1;
  4020ca:	2001      	movs	r0, #1
}
  4020cc:	4770      	bx	lr

004020ce <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4020ce:	e7fe      	b.n	4020ce <Dummy_Handler>

004020d0 <Reset_Handler>:
{
  4020d0:	b500      	push	{lr}
  4020d2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4020d4:	4b25      	ldr	r3, [pc, #148]	; (40216c <Reset_Handler+0x9c>)
  4020d6:	4a26      	ldr	r2, [pc, #152]	; (402170 <Reset_Handler+0xa0>)
  4020d8:	429a      	cmp	r2, r3
  4020da:	d010      	beq.n	4020fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4020dc:	4b25      	ldr	r3, [pc, #148]	; (402174 <Reset_Handler+0xa4>)
  4020de:	4a23      	ldr	r2, [pc, #140]	; (40216c <Reset_Handler+0x9c>)
  4020e0:	429a      	cmp	r2, r3
  4020e2:	d20c      	bcs.n	4020fe <Reset_Handler+0x2e>
  4020e4:	3b01      	subs	r3, #1
  4020e6:	1a9b      	subs	r3, r3, r2
  4020e8:	f023 0303 	bic.w	r3, r3, #3
  4020ec:	3304      	adds	r3, #4
  4020ee:	4413      	add	r3, r2
  4020f0:	491f      	ldr	r1, [pc, #124]	; (402170 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4020f2:	f851 0b04 	ldr.w	r0, [r1], #4
  4020f6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4020fa:	429a      	cmp	r2, r3
  4020fc:	d1f9      	bne.n	4020f2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4020fe:	4b1e      	ldr	r3, [pc, #120]	; (402178 <Reset_Handler+0xa8>)
  402100:	4a1e      	ldr	r2, [pc, #120]	; (40217c <Reset_Handler+0xac>)
  402102:	429a      	cmp	r2, r3
  402104:	d20a      	bcs.n	40211c <Reset_Handler+0x4c>
  402106:	3b01      	subs	r3, #1
  402108:	1a9b      	subs	r3, r3, r2
  40210a:	f023 0303 	bic.w	r3, r3, #3
  40210e:	3304      	adds	r3, #4
  402110:	4413      	add	r3, r2
                *pDest++ = 0;
  402112:	2100      	movs	r1, #0
  402114:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402118:	4293      	cmp	r3, r2
  40211a:	d1fb      	bne.n	402114 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40211c:	4a18      	ldr	r2, [pc, #96]	; (402180 <Reset_Handler+0xb0>)
  40211e:	4b19      	ldr	r3, [pc, #100]	; (402184 <Reset_Handler+0xb4>)
  402120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402124:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402126:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40212a:	fab3 f383 	clz	r3, r3
  40212e:	095b      	lsrs	r3, r3, #5
  402130:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402132:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402134:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402138:	2200      	movs	r2, #0
  40213a:	4b13      	ldr	r3, [pc, #76]	; (402188 <Reset_Handler+0xb8>)
  40213c:	701a      	strb	r2, [r3, #0]
	return flags;
  40213e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402140:	4a12      	ldr	r2, [pc, #72]	; (40218c <Reset_Handler+0xbc>)
  402142:	6813      	ldr	r3, [r2, #0]
  402144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402148:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40214a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40214e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402152:	b129      	cbz	r1, 402160 <Reset_Handler+0x90>
		cpu_irq_enable();
  402154:	2201      	movs	r2, #1
  402156:	4b0c      	ldr	r3, [pc, #48]	; (402188 <Reset_Handler+0xb8>)
  402158:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40215a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40215e:	b662      	cpsie	i
        __libc_init_array();
  402160:	4b0b      	ldr	r3, [pc, #44]	; (402190 <Reset_Handler+0xc0>)
  402162:	4798      	blx	r3
        main();
  402164:	4b0b      	ldr	r3, [pc, #44]	; (402194 <Reset_Handler+0xc4>)
  402166:	4798      	blx	r3
  402168:	e7fe      	b.n	402168 <Reset_Handler+0x98>
  40216a:	bf00      	nop
  40216c:	20400000 	.word	0x20400000
  402170:	00405950 	.word	0x00405950
  402174:	204009d0 	.word	0x204009d0
  402178:	2040ac18 	.word	0x2040ac18
  40217c:	204009d0 	.word	0x204009d0
  402180:	e000ed00 	.word	0xe000ed00
  402184:	00400000 	.word	0x00400000
  402188:	20400018 	.word	0x20400018
  40218c:	e000ed88 	.word	0xe000ed88
  402190:	004026d5 	.word	0x004026d5
  402194:	00402605 	.word	0x00402605

00402198 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402198:	4b3b      	ldr	r3, [pc, #236]	; (402288 <SystemCoreClockUpdate+0xf0>)
  40219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40219c:	f003 0303 	and.w	r3, r3, #3
  4021a0:	2b01      	cmp	r3, #1
  4021a2:	d01d      	beq.n	4021e0 <SystemCoreClockUpdate+0x48>
  4021a4:	b183      	cbz	r3, 4021c8 <SystemCoreClockUpdate+0x30>
  4021a6:	2b02      	cmp	r3, #2
  4021a8:	d036      	beq.n	402218 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4021aa:	4b37      	ldr	r3, [pc, #220]	; (402288 <SystemCoreClockUpdate+0xf0>)
  4021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021b2:	2b70      	cmp	r3, #112	; 0x70
  4021b4:	d05f      	beq.n	402276 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021b6:	4b34      	ldr	r3, [pc, #208]	; (402288 <SystemCoreClockUpdate+0xf0>)
  4021b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021ba:	4934      	ldr	r1, [pc, #208]	; (40228c <SystemCoreClockUpdate+0xf4>)
  4021bc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4021c0:	680b      	ldr	r3, [r1, #0]
  4021c2:	40d3      	lsrs	r3, r2
  4021c4:	600b      	str	r3, [r1, #0]
  4021c6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4021c8:	4b31      	ldr	r3, [pc, #196]	; (402290 <SystemCoreClockUpdate+0xf8>)
  4021ca:	695b      	ldr	r3, [r3, #20]
  4021cc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4021d0:	bf14      	ite	ne
  4021d2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4021d6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4021da:	4b2c      	ldr	r3, [pc, #176]	; (40228c <SystemCoreClockUpdate+0xf4>)
  4021dc:	601a      	str	r2, [r3, #0]
  4021de:	e7e4      	b.n	4021aa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4021e0:	4b29      	ldr	r3, [pc, #164]	; (402288 <SystemCoreClockUpdate+0xf0>)
  4021e2:	6a1b      	ldr	r3, [r3, #32]
  4021e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4021e8:	d003      	beq.n	4021f2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4021ea:	4a2a      	ldr	r2, [pc, #168]	; (402294 <SystemCoreClockUpdate+0xfc>)
  4021ec:	4b27      	ldr	r3, [pc, #156]	; (40228c <SystemCoreClockUpdate+0xf4>)
  4021ee:	601a      	str	r2, [r3, #0]
  4021f0:	e7db      	b.n	4021aa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4021f2:	4a29      	ldr	r2, [pc, #164]	; (402298 <SystemCoreClockUpdate+0x100>)
  4021f4:	4b25      	ldr	r3, [pc, #148]	; (40228c <SystemCoreClockUpdate+0xf4>)
  4021f6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4021f8:	4b23      	ldr	r3, [pc, #140]	; (402288 <SystemCoreClockUpdate+0xf0>)
  4021fa:	6a1b      	ldr	r3, [r3, #32]
  4021fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402200:	2b10      	cmp	r3, #16
  402202:	d005      	beq.n	402210 <SystemCoreClockUpdate+0x78>
  402204:	2b20      	cmp	r3, #32
  402206:	d1d0      	bne.n	4021aa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402208:	4a22      	ldr	r2, [pc, #136]	; (402294 <SystemCoreClockUpdate+0xfc>)
  40220a:	4b20      	ldr	r3, [pc, #128]	; (40228c <SystemCoreClockUpdate+0xf4>)
  40220c:	601a      	str	r2, [r3, #0]
          break;
  40220e:	e7cc      	b.n	4021aa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402210:	4a22      	ldr	r2, [pc, #136]	; (40229c <SystemCoreClockUpdate+0x104>)
  402212:	4b1e      	ldr	r3, [pc, #120]	; (40228c <SystemCoreClockUpdate+0xf4>)
  402214:	601a      	str	r2, [r3, #0]
          break;
  402216:	e7c8      	b.n	4021aa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402218:	4b1b      	ldr	r3, [pc, #108]	; (402288 <SystemCoreClockUpdate+0xf0>)
  40221a:	6a1b      	ldr	r3, [r3, #32]
  40221c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402220:	d016      	beq.n	402250 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402222:	4a1c      	ldr	r2, [pc, #112]	; (402294 <SystemCoreClockUpdate+0xfc>)
  402224:	4b19      	ldr	r3, [pc, #100]	; (40228c <SystemCoreClockUpdate+0xf4>)
  402226:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402228:	4b17      	ldr	r3, [pc, #92]	; (402288 <SystemCoreClockUpdate+0xf0>)
  40222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40222c:	f003 0303 	and.w	r3, r3, #3
  402230:	2b02      	cmp	r3, #2
  402232:	d1ba      	bne.n	4021aa <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402234:	4a14      	ldr	r2, [pc, #80]	; (402288 <SystemCoreClockUpdate+0xf0>)
  402236:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402238:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40223a:	4814      	ldr	r0, [pc, #80]	; (40228c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40223c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402240:	6803      	ldr	r3, [r0, #0]
  402242:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402246:	b2d2      	uxtb	r2, r2
  402248:	fbb3 f3f2 	udiv	r3, r3, r2
  40224c:	6003      	str	r3, [r0, #0]
  40224e:	e7ac      	b.n	4021aa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402250:	4a11      	ldr	r2, [pc, #68]	; (402298 <SystemCoreClockUpdate+0x100>)
  402252:	4b0e      	ldr	r3, [pc, #56]	; (40228c <SystemCoreClockUpdate+0xf4>)
  402254:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402256:	4b0c      	ldr	r3, [pc, #48]	; (402288 <SystemCoreClockUpdate+0xf0>)
  402258:	6a1b      	ldr	r3, [r3, #32]
  40225a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40225e:	2b10      	cmp	r3, #16
  402260:	d005      	beq.n	40226e <SystemCoreClockUpdate+0xd6>
  402262:	2b20      	cmp	r3, #32
  402264:	d1e0      	bne.n	402228 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402266:	4a0b      	ldr	r2, [pc, #44]	; (402294 <SystemCoreClockUpdate+0xfc>)
  402268:	4b08      	ldr	r3, [pc, #32]	; (40228c <SystemCoreClockUpdate+0xf4>)
  40226a:	601a      	str	r2, [r3, #0]
          break;
  40226c:	e7dc      	b.n	402228 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40226e:	4a0b      	ldr	r2, [pc, #44]	; (40229c <SystemCoreClockUpdate+0x104>)
  402270:	4b06      	ldr	r3, [pc, #24]	; (40228c <SystemCoreClockUpdate+0xf4>)
  402272:	601a      	str	r2, [r3, #0]
          break;
  402274:	e7d8      	b.n	402228 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402276:	4a05      	ldr	r2, [pc, #20]	; (40228c <SystemCoreClockUpdate+0xf4>)
  402278:	6813      	ldr	r3, [r2, #0]
  40227a:	4909      	ldr	r1, [pc, #36]	; (4022a0 <SystemCoreClockUpdate+0x108>)
  40227c:	fba1 1303 	umull	r1, r3, r1, r3
  402280:	085b      	lsrs	r3, r3, #1
  402282:	6013      	str	r3, [r2, #0]
  402284:	4770      	bx	lr
  402286:	bf00      	nop
  402288:	400e0600 	.word	0x400e0600
  40228c:	2040001c 	.word	0x2040001c
  402290:	400e1810 	.word	0x400e1810
  402294:	00b71b00 	.word	0x00b71b00
  402298:	003d0900 	.word	0x003d0900
  40229c:	007a1200 	.word	0x007a1200
  4022a0:	aaaaaaab 	.word	0xaaaaaaab

004022a4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4022a4:	4b12      	ldr	r3, [pc, #72]	; (4022f0 <system_init_flash+0x4c>)
  4022a6:	4298      	cmp	r0, r3
  4022a8:	d911      	bls.n	4022ce <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4022aa:	4b12      	ldr	r3, [pc, #72]	; (4022f4 <system_init_flash+0x50>)
  4022ac:	4298      	cmp	r0, r3
  4022ae:	d913      	bls.n	4022d8 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4022b0:	4b11      	ldr	r3, [pc, #68]	; (4022f8 <system_init_flash+0x54>)
  4022b2:	4298      	cmp	r0, r3
  4022b4:	d914      	bls.n	4022e0 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4022b6:	4b11      	ldr	r3, [pc, #68]	; (4022fc <system_init_flash+0x58>)
  4022b8:	4298      	cmp	r0, r3
  4022ba:	d915      	bls.n	4022e8 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4022bc:	4b10      	ldr	r3, [pc, #64]	; (402300 <system_init_flash+0x5c>)
  4022be:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4022c0:	bf94      	ite	ls
  4022c2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4022c6:	4a0f      	ldrhi	r2, [pc, #60]	; (402304 <system_init_flash+0x60>)
  4022c8:	4b0f      	ldr	r3, [pc, #60]	; (402308 <system_init_flash+0x64>)
  4022ca:	601a      	str	r2, [r3, #0]
  4022cc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4022ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4022d2:	4b0d      	ldr	r3, [pc, #52]	; (402308 <system_init_flash+0x64>)
  4022d4:	601a      	str	r2, [r3, #0]
  4022d6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4022d8:	4a0c      	ldr	r2, [pc, #48]	; (40230c <system_init_flash+0x68>)
  4022da:	4b0b      	ldr	r3, [pc, #44]	; (402308 <system_init_flash+0x64>)
  4022dc:	601a      	str	r2, [r3, #0]
  4022de:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4022e0:	4a0b      	ldr	r2, [pc, #44]	; (402310 <system_init_flash+0x6c>)
  4022e2:	4b09      	ldr	r3, [pc, #36]	; (402308 <system_init_flash+0x64>)
  4022e4:	601a      	str	r2, [r3, #0]
  4022e6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4022e8:	4a0a      	ldr	r2, [pc, #40]	; (402314 <system_init_flash+0x70>)
  4022ea:	4b07      	ldr	r3, [pc, #28]	; (402308 <system_init_flash+0x64>)
  4022ec:	601a      	str	r2, [r3, #0]
  4022ee:	4770      	bx	lr
  4022f0:	01312cff 	.word	0x01312cff
  4022f4:	026259ff 	.word	0x026259ff
  4022f8:	039386ff 	.word	0x039386ff
  4022fc:	04c4b3ff 	.word	0x04c4b3ff
  402300:	05f5e0ff 	.word	0x05f5e0ff
  402304:	04000500 	.word	0x04000500
  402308:	400e0c00 	.word	0x400e0c00
  40230c:	04000100 	.word	0x04000100
  402310:	04000200 	.word	0x04000200
  402314:	04000300 	.word	0x04000300

00402318 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402318:	4b0a      	ldr	r3, [pc, #40]	; (402344 <_sbrk+0x2c>)
  40231a:	681b      	ldr	r3, [r3, #0]
  40231c:	b153      	cbz	r3, 402334 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40231e:	4b09      	ldr	r3, [pc, #36]	; (402344 <_sbrk+0x2c>)
  402320:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402322:	181a      	adds	r2, r3, r0
  402324:	4908      	ldr	r1, [pc, #32]	; (402348 <_sbrk+0x30>)
  402326:	4291      	cmp	r1, r2
  402328:	db08      	blt.n	40233c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40232a:	4610      	mov	r0, r2
  40232c:	4a05      	ldr	r2, [pc, #20]	; (402344 <_sbrk+0x2c>)
  40232e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402330:	4618      	mov	r0, r3
  402332:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402334:	4a05      	ldr	r2, [pc, #20]	; (40234c <_sbrk+0x34>)
  402336:	4b03      	ldr	r3, [pc, #12]	; (402344 <_sbrk+0x2c>)
  402338:	601a      	str	r2, [r3, #0]
  40233a:	e7f0      	b.n	40231e <_sbrk+0x6>
		return (caddr_t) -1;	
  40233c:	f04f 30ff 	mov.w	r0, #4294967295
}
  402340:	4770      	bx	lr
  402342:	bf00      	nop
  402344:	2040aba4 	.word	0x2040aba4
  402348:	2045fffc 	.word	0x2045fffc
  40234c:	2040ce18 	.word	0x2040ce18

00402350 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402350:	f04f 30ff 	mov.w	r0, #4294967295
  402354:	4770      	bx	lr

00402356 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40235a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40235c:	2000      	movs	r0, #0
  40235e:	4770      	bx	lr

00402360 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402360:	2001      	movs	r0, #1
  402362:	4770      	bx	lr

00402364 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402364:	2000      	movs	r0, #0
  402366:	4770      	bx	lr

00402368 <usart_serial_getchar>:
{
  402368:	b5f0      	push	{r4, r5, r6, r7, lr}
  40236a:	b083      	sub	sp, #12
  40236c:	4605      	mov	r5, r0
  40236e:	460c      	mov	r4, r1
	uint32_t val = 0;
  402370:	2300      	movs	r3, #0
  402372:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  402374:	4b2a      	ldr	r3, [pc, #168]	; (402420 <usart_serial_getchar+0xb8>)
  402376:	4298      	cmp	r0, r3
  402378:	d013      	beq.n	4023a2 <usart_serial_getchar+0x3a>
	if (UART1 == (Uart*)p_usart) {
  40237a:	4b2a      	ldr	r3, [pc, #168]	; (402424 <usart_serial_getchar+0xbc>)
  40237c:	4298      	cmp	r0, r3
  40237e:	d018      	beq.n	4023b2 <usart_serial_getchar+0x4a>
	if (UART2 == (Uart*)p_usart) {
  402380:	4b29      	ldr	r3, [pc, #164]	; (402428 <usart_serial_getchar+0xc0>)
  402382:	4298      	cmp	r0, r3
  402384:	d01d      	beq.n	4023c2 <usart_serial_getchar+0x5a>
	if (UART3 == (Uart*)p_usart) {
  402386:	4b29      	ldr	r3, [pc, #164]	; (40242c <usart_serial_getchar+0xc4>)
  402388:	429d      	cmp	r5, r3
  40238a:	d022      	beq.n	4023d2 <usart_serial_getchar+0x6a>
	if (USART0 == p_usart) {
  40238c:	4b28      	ldr	r3, [pc, #160]	; (402430 <usart_serial_getchar+0xc8>)
  40238e:	429d      	cmp	r5, r3
  402390:	d027      	beq.n	4023e2 <usart_serial_getchar+0x7a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402392:	4b28      	ldr	r3, [pc, #160]	; (402434 <usart_serial_getchar+0xcc>)
  402394:	429d      	cmp	r5, r3
  402396:	d02e      	beq.n	4023f6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402398:	4b27      	ldr	r3, [pc, #156]	; (402438 <usart_serial_getchar+0xd0>)
  40239a:	429d      	cmp	r5, r3
  40239c:	d035      	beq.n	40240a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40239e:	b003      	add	sp, #12
  4023a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4023a2:	461f      	mov	r7, r3
  4023a4:	4e25      	ldr	r6, [pc, #148]	; (40243c <usart_serial_getchar+0xd4>)
  4023a6:	4621      	mov	r1, r4
  4023a8:	4638      	mov	r0, r7
  4023aa:	47b0      	blx	r6
  4023ac:	2800      	cmp	r0, #0
  4023ae:	d1fa      	bne.n	4023a6 <usart_serial_getchar+0x3e>
  4023b0:	e7e9      	b.n	402386 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4023b2:	461f      	mov	r7, r3
  4023b4:	4e21      	ldr	r6, [pc, #132]	; (40243c <usart_serial_getchar+0xd4>)
  4023b6:	4621      	mov	r1, r4
  4023b8:	4638      	mov	r0, r7
  4023ba:	47b0      	blx	r6
  4023bc:	2800      	cmp	r0, #0
  4023be:	d1fa      	bne.n	4023b6 <usart_serial_getchar+0x4e>
  4023c0:	e7e4      	b.n	40238c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4023c2:	461f      	mov	r7, r3
  4023c4:	4e1d      	ldr	r6, [pc, #116]	; (40243c <usart_serial_getchar+0xd4>)
  4023c6:	4621      	mov	r1, r4
  4023c8:	4638      	mov	r0, r7
  4023ca:	47b0      	blx	r6
  4023cc:	2800      	cmp	r0, #0
  4023ce:	d1fa      	bne.n	4023c6 <usart_serial_getchar+0x5e>
  4023d0:	e7df      	b.n	402392 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4023d2:	461f      	mov	r7, r3
  4023d4:	4e19      	ldr	r6, [pc, #100]	; (40243c <usart_serial_getchar+0xd4>)
  4023d6:	4621      	mov	r1, r4
  4023d8:	4638      	mov	r0, r7
  4023da:	47b0      	blx	r6
  4023dc:	2800      	cmp	r0, #0
  4023de:	d1fa      	bne.n	4023d6 <usart_serial_getchar+0x6e>
  4023e0:	e7da      	b.n	402398 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4023e2:	461e      	mov	r6, r3
  4023e4:	4d16      	ldr	r5, [pc, #88]	; (402440 <usart_serial_getchar+0xd8>)
  4023e6:	a901      	add	r1, sp, #4
  4023e8:	4630      	mov	r0, r6
  4023ea:	47a8      	blx	r5
  4023ec:	2800      	cmp	r0, #0
  4023ee:	d1fa      	bne.n	4023e6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4023f0:	9b01      	ldr	r3, [sp, #4]
  4023f2:	7023      	strb	r3, [r4, #0]
  4023f4:	e7d3      	b.n	40239e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4023f6:	461e      	mov	r6, r3
  4023f8:	4d11      	ldr	r5, [pc, #68]	; (402440 <usart_serial_getchar+0xd8>)
  4023fa:	a901      	add	r1, sp, #4
  4023fc:	4630      	mov	r0, r6
  4023fe:	47a8      	blx	r5
  402400:	2800      	cmp	r0, #0
  402402:	d1fa      	bne.n	4023fa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402404:	9b01      	ldr	r3, [sp, #4]
  402406:	7023      	strb	r3, [r4, #0]
  402408:	e7c9      	b.n	40239e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40240a:	461e      	mov	r6, r3
  40240c:	4d0c      	ldr	r5, [pc, #48]	; (402440 <usart_serial_getchar+0xd8>)
  40240e:	a901      	add	r1, sp, #4
  402410:	4630      	mov	r0, r6
  402412:	47a8      	blx	r5
  402414:	2800      	cmp	r0, #0
  402416:	d1fa      	bne.n	40240e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402418:	9b01      	ldr	r3, [sp, #4]
  40241a:	7023      	strb	r3, [r4, #0]
}
  40241c:	e7bf      	b.n	40239e <usart_serial_getchar+0x36>
  40241e:	bf00      	nop
  402420:	400e0800 	.word	0x400e0800
  402424:	400e0a00 	.word	0x400e0a00
  402428:	400e1a00 	.word	0x400e1a00
  40242c:	400e1c00 	.word	0x400e1c00
  402430:	40024000 	.word	0x40024000
  402434:	40028000 	.word	0x40028000
  402438:	4002c000 	.word	0x4002c000
  40243c:	00401fa3 	.word	0x00401fa3
  402440:	004020b7 	.word	0x004020b7

00402444 <usart_serial_putchar>:
{
  402444:	b570      	push	{r4, r5, r6, lr}
  402446:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402448:	4b2a      	ldr	r3, [pc, #168]	; (4024f4 <usart_serial_putchar+0xb0>)
  40244a:	4298      	cmp	r0, r3
  40244c:	d013      	beq.n	402476 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40244e:	4b2a      	ldr	r3, [pc, #168]	; (4024f8 <usart_serial_putchar+0xb4>)
  402450:	4298      	cmp	r0, r3
  402452:	d019      	beq.n	402488 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402454:	4b29      	ldr	r3, [pc, #164]	; (4024fc <usart_serial_putchar+0xb8>)
  402456:	4298      	cmp	r0, r3
  402458:	d01f      	beq.n	40249a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40245a:	4b29      	ldr	r3, [pc, #164]	; (402500 <usart_serial_putchar+0xbc>)
  40245c:	4298      	cmp	r0, r3
  40245e:	d025      	beq.n	4024ac <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402460:	4b28      	ldr	r3, [pc, #160]	; (402504 <usart_serial_putchar+0xc0>)
  402462:	4298      	cmp	r0, r3
  402464:	d02b      	beq.n	4024be <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402466:	4b28      	ldr	r3, [pc, #160]	; (402508 <usart_serial_putchar+0xc4>)
  402468:	4298      	cmp	r0, r3
  40246a:	d031      	beq.n	4024d0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40246c:	4b27      	ldr	r3, [pc, #156]	; (40250c <usart_serial_putchar+0xc8>)
  40246e:	4298      	cmp	r0, r3
  402470:	d037      	beq.n	4024e2 <usart_serial_putchar+0x9e>
	return 0;
  402472:	2000      	movs	r0, #0
}
  402474:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402476:	461e      	mov	r6, r3
  402478:	4d25      	ldr	r5, [pc, #148]	; (402510 <usart_serial_putchar+0xcc>)
  40247a:	4621      	mov	r1, r4
  40247c:	4630      	mov	r0, r6
  40247e:	47a8      	blx	r5
  402480:	2800      	cmp	r0, #0
  402482:	d1fa      	bne.n	40247a <usart_serial_putchar+0x36>
		return 1;
  402484:	2001      	movs	r0, #1
  402486:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402488:	461e      	mov	r6, r3
  40248a:	4d21      	ldr	r5, [pc, #132]	; (402510 <usart_serial_putchar+0xcc>)
  40248c:	4621      	mov	r1, r4
  40248e:	4630      	mov	r0, r6
  402490:	47a8      	blx	r5
  402492:	2800      	cmp	r0, #0
  402494:	d1fa      	bne.n	40248c <usart_serial_putchar+0x48>
		return 1;
  402496:	2001      	movs	r0, #1
  402498:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40249a:	461e      	mov	r6, r3
  40249c:	4d1c      	ldr	r5, [pc, #112]	; (402510 <usart_serial_putchar+0xcc>)
  40249e:	4621      	mov	r1, r4
  4024a0:	4630      	mov	r0, r6
  4024a2:	47a8      	blx	r5
  4024a4:	2800      	cmp	r0, #0
  4024a6:	d1fa      	bne.n	40249e <usart_serial_putchar+0x5a>
		return 1;
  4024a8:	2001      	movs	r0, #1
  4024aa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4024ac:	461e      	mov	r6, r3
  4024ae:	4d18      	ldr	r5, [pc, #96]	; (402510 <usart_serial_putchar+0xcc>)
  4024b0:	4621      	mov	r1, r4
  4024b2:	4630      	mov	r0, r6
  4024b4:	47a8      	blx	r5
  4024b6:	2800      	cmp	r0, #0
  4024b8:	d1fa      	bne.n	4024b0 <usart_serial_putchar+0x6c>
		return 1;
  4024ba:	2001      	movs	r0, #1
  4024bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024be:	461e      	mov	r6, r3
  4024c0:	4d14      	ldr	r5, [pc, #80]	; (402514 <usart_serial_putchar+0xd0>)
  4024c2:	4621      	mov	r1, r4
  4024c4:	4630      	mov	r0, r6
  4024c6:	47a8      	blx	r5
  4024c8:	2800      	cmp	r0, #0
  4024ca:	d1fa      	bne.n	4024c2 <usart_serial_putchar+0x7e>
		return 1;
  4024cc:	2001      	movs	r0, #1
  4024ce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024d0:	461e      	mov	r6, r3
  4024d2:	4d10      	ldr	r5, [pc, #64]	; (402514 <usart_serial_putchar+0xd0>)
  4024d4:	4621      	mov	r1, r4
  4024d6:	4630      	mov	r0, r6
  4024d8:	47a8      	blx	r5
  4024da:	2800      	cmp	r0, #0
  4024dc:	d1fa      	bne.n	4024d4 <usart_serial_putchar+0x90>
		return 1;
  4024de:	2001      	movs	r0, #1
  4024e0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024e2:	461e      	mov	r6, r3
  4024e4:	4d0b      	ldr	r5, [pc, #44]	; (402514 <usart_serial_putchar+0xd0>)
  4024e6:	4621      	mov	r1, r4
  4024e8:	4630      	mov	r0, r6
  4024ea:	47a8      	blx	r5
  4024ec:	2800      	cmp	r0, #0
  4024ee:	d1fa      	bne.n	4024e6 <usart_serial_putchar+0xa2>
		return 1;
  4024f0:	2001      	movs	r0, #1
  4024f2:	bd70      	pop	{r4, r5, r6, pc}
  4024f4:	400e0800 	.word	0x400e0800
  4024f8:	400e0a00 	.word	0x400e0a00
  4024fc:	400e1a00 	.word	0x400e1a00
  402500:	400e1c00 	.word	0x400e1c00
  402504:	40024000 	.word	0x40024000
  402508:	40028000 	.word	0x40028000
  40250c:	4002c000 	.word	0x4002c000
  402510:	00401f91 	.word	0x00401f91
  402514:	004020a1 	.word	0x004020a1

00402518 <taskLed>:
			
		vTaskDelay(10000);	
	}
}

static void taskLed(void *pvParameters) {
  402518:	b508      	push	{r3, lr}
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40251a:	4c07      	ldr	r4, [pc, #28]	; (402538 <taskLed+0x20>)
		port->PIO_SODR = mask;
  40251c:	f44f 7680 	mov.w	r6, #256	; 0x100
	UNUSED(pvParameters);
		
	for (;;) {
		LED_Toggle(LED0);
		//printf("[LED] Rodando...\n");
		vTaskDelay(10000);
  402520:	4d06      	ldr	r5, [pc, #24]	; (40253c <taskLed+0x24>)
  402522:	e003      	b.n	40252c <taskLed+0x14>
  402524:	6326      	str	r6, [r4, #48]	; 0x30
  402526:	f242 7010 	movw	r0, #10000	; 0x2710
  40252a:	47a8      	blx	r5
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40252c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40252e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402532:	d0f7      	beq.n	402524 <taskLed+0xc>
		port->PIO_CODR = mask;
  402534:	6366      	str	r6, [r4, #52]	; 0x34
  402536:	e7f6      	b.n	402526 <taskLed+0xe>
  402538:	400e1200 	.word	0x400e1200
  40253c:	00400fd1 	.word	0x00400fd1

00402540 <taskMain>:
static void taskMain(void *pvParameters) {
  402540:	b538      	push	{r3, r4, r5, lr}
	vTaskDelay(3000);
  402542:	f640 30b8 	movw	r0, #3000	; 0xbb8
  402546:	4b04      	ldr	r3, [pc, #16]	; (402558 <taskMain+0x18>)
  402548:	4798      	blx	r3
		vTaskDelay(10000);	
  40254a:	f242 7510 	movw	r5, #10000	; 0x2710
  40254e:	4c02      	ldr	r4, [pc, #8]	; (402558 <taskMain+0x18>)
  402550:	4628      	mov	r0, r5
  402552:	47a0      	blx	r4
  402554:	e7fc      	b.n	402550 <taskMain+0x10>
  402556:	bf00      	nop
  402558:	00400fd1 	.word	0x00400fd1

0040255c <configure_console>:
void configure_console(void) {
  40255c:	b570      	push	{r4, r5, r6, lr}
  40255e:	b086      	sub	sp, #24
  402560:	200e      	movs	r0, #14
  402562:	4e17      	ldr	r6, [pc, #92]	; (4025c0 <configure_console+0x64>)
  402564:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402566:	4d17      	ldr	r5, [pc, #92]	; (4025c4 <configure_console+0x68>)
  402568:	4b17      	ldr	r3, [pc, #92]	; (4025c8 <configure_console+0x6c>)
  40256a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40256c:	4a17      	ldr	r2, [pc, #92]	; (4025cc <configure_console+0x70>)
  40256e:	4b18      	ldr	r3, [pc, #96]	; (4025d0 <configure_console+0x74>)
  402570:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402572:	4a18      	ldr	r2, [pc, #96]	; (4025d4 <configure_console+0x78>)
  402574:	4b18      	ldr	r3, [pc, #96]	; (4025d8 <configure_console+0x7c>)
  402576:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402578:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40257c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40257e:	23c0      	movs	r3, #192	; 0xc0
  402580:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  402582:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402586:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  402588:	2400      	movs	r4, #0
  40258a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40258c:	9404      	str	r4, [sp, #16]
  40258e:	200e      	movs	r0, #14
  402590:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  402592:	4a12      	ldr	r2, [pc, #72]	; (4025dc <configure_console+0x80>)
  402594:	4669      	mov	r1, sp
  402596:	4628      	mov	r0, r5
  402598:	4b11      	ldr	r3, [pc, #68]	; (4025e0 <configure_console+0x84>)
  40259a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40259c:	4628      	mov	r0, r5
  40259e:	4b11      	ldr	r3, [pc, #68]	; (4025e4 <configure_console+0x88>)
  4025a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4025a2:	4628      	mov	r0, r5
  4025a4:	4b10      	ldr	r3, [pc, #64]	; (4025e8 <configure_console+0x8c>)
  4025a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4025a8:	4e10      	ldr	r6, [pc, #64]	; (4025ec <configure_console+0x90>)
  4025aa:	6833      	ldr	r3, [r6, #0]
  4025ac:	4621      	mov	r1, r4
  4025ae:	6898      	ldr	r0, [r3, #8]
  4025b0:	4d0f      	ldr	r5, [pc, #60]	; (4025f0 <configure_console+0x94>)
  4025b2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4025b4:	6833      	ldr	r3, [r6, #0]
  4025b6:	4621      	mov	r1, r4
  4025b8:	6858      	ldr	r0, [r3, #4]
  4025ba:	47a8      	blx	r5
}
  4025bc:	b006      	add	sp, #24
  4025be:	bd70      	pop	{r4, r5, r6, pc}
  4025c0:	00401f3d 	.word	0x00401f3d
  4025c4:	40028000 	.word	0x40028000
  4025c8:	2040abec 	.word	0x2040abec
  4025cc:	00402445 	.word	0x00402445
  4025d0:	2040abe8 	.word	0x2040abe8
  4025d4:	00402369 	.word	0x00402369
  4025d8:	2040abe4 	.word	0x2040abe4
  4025dc:	08f0d180 	.word	0x08f0d180
  4025e0:	00402039 	.word	0x00402039
  4025e4:	0040208d 	.word	0x0040208d
  4025e8:	00402093 	.word	0x00402093
  4025ec:	20400020 	.word	0x20400020
  4025f0:	0040291d 	.word	0x0040291d

004025f4 <vApplicationMallocFailedHook>:
{
  4025f4:	b508      	push	{r3, lr}
	configASSERT( ( volatile void * ) NULL );
  4025f6:	4b02      	ldr	r3, [pc, #8]	; (402600 <vApplicationMallocFailedHook+0xc>)
  4025f8:	4798      	blx	r3
  4025fa:	bf00      	nop
  4025fc:	e7fd      	b.n	4025fa <vApplicationMallocFailedHook+0x6>
  4025fe:	bf00      	nop
  402600:	004002c1 	.word	0x004002c1

00402604 <main>:
 *
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void) {
  402604:	b510      	push	{r4, lr}
  402606:	b084      	sub	sp, #16
	uint8_t wifiIsConnected = 0;
	/* Initialize the board. */
	sysclk_init();
  402608:	4b20      	ldr	r3, [pc, #128]	; (40268c <main+0x88>)
  40260a:	4798      	blx	r3
	board_init();
  40260c:	4b20      	ldr	r3, [pc, #128]	; (402690 <main+0x8c>)
  40260e:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
  402610:	4b20      	ldr	r3, [pc, #128]	; (402694 <main+0x90>)
  402612:	4798      	blx	r3
	printf(STRING_HEADER);
  402614:	4820      	ldr	r0, [pc, #128]	; (402698 <main+0x94>)
  402616:	4b21      	ldr	r3, [pc, #132]	; (40269c <main+0x98>)
  402618:	4798      	blx	r3
	
	delay_s(5);
  40261a:	4821      	ldr	r0, [pc, #132]	; (4026a0 <main+0x9c>)
  40261c:	4b21      	ldr	r3, [pc, #132]	; (4026a4 <main+0xa0>)
  40261e:	4798      	blx	r3
	//if (xTaskCreate(taskWifi, "Wifi", TASK_LED_STACK_SIZE, NULL,
	//TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create Wifi task\r\n");
	//}

	if (xTaskCreate(taskMain, "MAIN", TASK_MONITOR_STACK_SIZE, NULL,
  402620:	2300      	movs	r3, #0
  402622:	9303      	str	r3, [sp, #12]
  402624:	9302      	str	r3, [sp, #8]
  402626:	9301      	str	r3, [sp, #4]
  402628:	9300      	str	r3, [sp, #0]
  40262a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40262e:	491e      	ldr	r1, [pc, #120]	; (4026a8 <main+0xa4>)
  402630:	481e      	ldr	r0, [pc, #120]	; (4026ac <main+0xa8>)
  402632:	4c1f      	ldr	r4, [pc, #124]	; (4026b0 <main+0xac>)
  402634:	47a0      	blx	r4
  402636:	2801      	cmp	r0, #1
  402638:	d002      	beq.n	402640 <main+0x3c>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Main task\r\n");
  40263a:	481e      	ldr	r0, [pc, #120]	; (4026b4 <main+0xb0>)
  40263c:	4b17      	ldr	r3, [pc, #92]	; (40269c <main+0x98>)
  40263e:	4798      	blx	r3
	}
	
	if (xTaskCreate(taskNfc, "NFC", TASK_MONITOR_STACK_SIZE, NULL,
  402640:	2300      	movs	r3, #0
  402642:	9303      	str	r3, [sp, #12]
  402644:	9302      	str	r3, [sp, #8]
  402646:	9301      	str	r3, [sp, #4]
  402648:	9300      	str	r3, [sp, #0]
  40264a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40264e:	491a      	ldr	r1, [pc, #104]	; (4026b8 <main+0xb4>)
  402650:	481a      	ldr	r0, [pc, #104]	; (4026bc <main+0xb8>)
  402652:	4c17      	ldr	r4, [pc, #92]	; (4026b0 <main+0xac>)
  402654:	47a0      	blx	r4
  402656:	2801      	cmp	r0, #1
  402658:	d002      	beq.n	402660 <main+0x5c>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create NFC task\r\n");
  40265a:	4819      	ldr	r0, [pc, #100]	; (4026c0 <main+0xbc>)
  40265c:	4b0f      	ldr	r3, [pc, #60]	; (40269c <main+0x98>)
  40265e:	4798      	blx	r3
	}
	
	if (xTaskCreate(taskLed, "LED", TASK_MONITOR_STACK_SIZE, NULL,
  402660:	2300      	movs	r3, #0
  402662:	9303      	str	r3, [sp, #12]
  402664:	9302      	str	r3, [sp, #8]
  402666:	9301      	str	r3, [sp, #4]
  402668:	9300      	str	r3, [sp, #0]
  40266a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40266e:	4915      	ldr	r1, [pc, #84]	; (4026c4 <main+0xc0>)
  402670:	4815      	ldr	r0, [pc, #84]	; (4026c8 <main+0xc4>)
  402672:	4c0f      	ldr	r4, [pc, #60]	; (4026b0 <main+0xac>)
  402674:	47a0      	blx	r4
  402676:	2801      	cmp	r0, #1
  402678:	d002      	beq.n	402680 <main+0x7c>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create LED task\r\n");
  40267a:	4814      	ldr	r0, [pc, #80]	; (4026cc <main+0xc8>)
  40267c:	4b07      	ldr	r3, [pc, #28]	; (40269c <main+0x98>)
  40267e:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
  402680:	4b13      	ldr	r3, [pc, #76]	; (4026d0 <main+0xcc>)
  402682:	4798      	blx	r3

	return 0;
}
  402684:	2000      	movs	r0, #0
  402686:	b004      	add	sp, #16
  402688:	bd10      	pop	{r4, pc}
  40268a:	bf00      	nop
  40268c:	0040194d 	.word	0x0040194d
  402690:	00401a49 	.word	0x00401a49
  402694:	0040255d 	.word	0x0040255d
  402698:	004056f0 	.word	0x004056f0
  40269c:	00402725 	.word	0x00402725
  4026a0:	0f126d15 	.word	0x0f126d15
  4026a4:	20400001 	.word	0x20400001
  4026a8:	00405754 	.word	0x00405754
  4026ac:	00402541 	.word	0x00402541
  4026b0:	00400b21 	.word	0x00400b21
  4026b4:	0040575c 	.word	0x0040575c
  4026b8:	0040577c 	.word	0x0040577c
  4026bc:	004017e5 	.word	0x004017e5
  4026c0:	00405780 	.word	0x00405780
  4026c4:	0040579c 	.word	0x0040579c
  4026c8:	00402519 	.word	0x00402519
  4026cc:	004057a0 	.word	0x004057a0
  4026d0:	00400d15 	.word	0x00400d15

004026d4 <__libc_init_array>:
  4026d4:	b570      	push	{r4, r5, r6, lr}
  4026d6:	4e0f      	ldr	r6, [pc, #60]	; (402714 <__libc_init_array+0x40>)
  4026d8:	4d0f      	ldr	r5, [pc, #60]	; (402718 <__libc_init_array+0x44>)
  4026da:	1b76      	subs	r6, r6, r5
  4026dc:	10b6      	asrs	r6, r6, #2
  4026de:	bf18      	it	ne
  4026e0:	2400      	movne	r4, #0
  4026e2:	d005      	beq.n	4026f0 <__libc_init_array+0x1c>
  4026e4:	3401      	adds	r4, #1
  4026e6:	f855 3b04 	ldr.w	r3, [r5], #4
  4026ea:	4798      	blx	r3
  4026ec:	42a6      	cmp	r6, r4
  4026ee:	d1f9      	bne.n	4026e4 <__libc_init_array+0x10>
  4026f0:	4e0a      	ldr	r6, [pc, #40]	; (40271c <__libc_init_array+0x48>)
  4026f2:	4d0b      	ldr	r5, [pc, #44]	; (402720 <__libc_init_array+0x4c>)
  4026f4:	1b76      	subs	r6, r6, r5
  4026f6:	f003 f915 	bl	405924 <_init>
  4026fa:	10b6      	asrs	r6, r6, #2
  4026fc:	bf18      	it	ne
  4026fe:	2400      	movne	r4, #0
  402700:	d006      	beq.n	402710 <__libc_init_array+0x3c>
  402702:	3401      	adds	r4, #1
  402704:	f855 3b04 	ldr.w	r3, [r5], #4
  402708:	4798      	blx	r3
  40270a:	42a6      	cmp	r6, r4
  40270c:	d1f9      	bne.n	402702 <__libc_init_array+0x2e>
  40270e:	bd70      	pop	{r4, r5, r6, pc}
  402710:	bd70      	pop	{r4, r5, r6, pc}
  402712:	bf00      	nop
  402714:	00405930 	.word	0x00405930
  402718:	00405930 	.word	0x00405930
  40271c:	00405938 	.word	0x00405938
  402720:	00405930 	.word	0x00405930

00402724 <iprintf>:
  402724:	b40f      	push	{r0, r1, r2, r3}
  402726:	b500      	push	{lr}
  402728:	4907      	ldr	r1, [pc, #28]	; (402748 <iprintf+0x24>)
  40272a:	b083      	sub	sp, #12
  40272c:	ab04      	add	r3, sp, #16
  40272e:	6808      	ldr	r0, [r1, #0]
  402730:	f853 2b04 	ldr.w	r2, [r3], #4
  402734:	6881      	ldr	r1, [r0, #8]
  402736:	9301      	str	r3, [sp, #4]
  402738:	f000 faa2 	bl	402c80 <_vfiprintf_r>
  40273c:	b003      	add	sp, #12
  40273e:	f85d eb04 	ldr.w	lr, [sp], #4
  402742:	b004      	add	sp, #16
  402744:	4770      	bx	lr
  402746:	bf00      	nop
  402748:	20400020 	.word	0x20400020

0040274c <memcpy>:
  40274c:	4684      	mov	ip, r0
  40274e:	ea41 0300 	orr.w	r3, r1, r0
  402752:	f013 0303 	ands.w	r3, r3, #3
  402756:	d16d      	bne.n	402834 <memcpy+0xe8>
  402758:	3a40      	subs	r2, #64	; 0x40
  40275a:	d341      	bcc.n	4027e0 <memcpy+0x94>
  40275c:	f851 3b04 	ldr.w	r3, [r1], #4
  402760:	f840 3b04 	str.w	r3, [r0], #4
  402764:	f851 3b04 	ldr.w	r3, [r1], #4
  402768:	f840 3b04 	str.w	r3, [r0], #4
  40276c:	f851 3b04 	ldr.w	r3, [r1], #4
  402770:	f840 3b04 	str.w	r3, [r0], #4
  402774:	f851 3b04 	ldr.w	r3, [r1], #4
  402778:	f840 3b04 	str.w	r3, [r0], #4
  40277c:	f851 3b04 	ldr.w	r3, [r1], #4
  402780:	f840 3b04 	str.w	r3, [r0], #4
  402784:	f851 3b04 	ldr.w	r3, [r1], #4
  402788:	f840 3b04 	str.w	r3, [r0], #4
  40278c:	f851 3b04 	ldr.w	r3, [r1], #4
  402790:	f840 3b04 	str.w	r3, [r0], #4
  402794:	f851 3b04 	ldr.w	r3, [r1], #4
  402798:	f840 3b04 	str.w	r3, [r0], #4
  40279c:	f851 3b04 	ldr.w	r3, [r1], #4
  4027a0:	f840 3b04 	str.w	r3, [r0], #4
  4027a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027a8:	f840 3b04 	str.w	r3, [r0], #4
  4027ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4027b0:	f840 3b04 	str.w	r3, [r0], #4
  4027b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027b8:	f840 3b04 	str.w	r3, [r0], #4
  4027bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4027c0:	f840 3b04 	str.w	r3, [r0], #4
  4027c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027c8:	f840 3b04 	str.w	r3, [r0], #4
  4027cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4027d0:	f840 3b04 	str.w	r3, [r0], #4
  4027d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027d8:	f840 3b04 	str.w	r3, [r0], #4
  4027dc:	3a40      	subs	r2, #64	; 0x40
  4027de:	d2bd      	bcs.n	40275c <memcpy+0x10>
  4027e0:	3230      	adds	r2, #48	; 0x30
  4027e2:	d311      	bcc.n	402808 <memcpy+0xbc>
  4027e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027e8:	f840 3b04 	str.w	r3, [r0], #4
  4027ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4027f0:	f840 3b04 	str.w	r3, [r0], #4
  4027f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027f8:	f840 3b04 	str.w	r3, [r0], #4
  4027fc:	f851 3b04 	ldr.w	r3, [r1], #4
  402800:	f840 3b04 	str.w	r3, [r0], #4
  402804:	3a10      	subs	r2, #16
  402806:	d2ed      	bcs.n	4027e4 <memcpy+0x98>
  402808:	320c      	adds	r2, #12
  40280a:	d305      	bcc.n	402818 <memcpy+0xcc>
  40280c:	f851 3b04 	ldr.w	r3, [r1], #4
  402810:	f840 3b04 	str.w	r3, [r0], #4
  402814:	3a04      	subs	r2, #4
  402816:	d2f9      	bcs.n	40280c <memcpy+0xc0>
  402818:	3204      	adds	r2, #4
  40281a:	d008      	beq.n	40282e <memcpy+0xe2>
  40281c:	07d2      	lsls	r2, r2, #31
  40281e:	bf1c      	itt	ne
  402820:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402824:	f800 3b01 	strbne.w	r3, [r0], #1
  402828:	d301      	bcc.n	40282e <memcpy+0xe2>
  40282a:	880b      	ldrh	r3, [r1, #0]
  40282c:	8003      	strh	r3, [r0, #0]
  40282e:	4660      	mov	r0, ip
  402830:	4770      	bx	lr
  402832:	bf00      	nop
  402834:	2a08      	cmp	r2, #8
  402836:	d313      	bcc.n	402860 <memcpy+0x114>
  402838:	078b      	lsls	r3, r1, #30
  40283a:	d08d      	beq.n	402758 <memcpy+0xc>
  40283c:	f010 0303 	ands.w	r3, r0, #3
  402840:	d08a      	beq.n	402758 <memcpy+0xc>
  402842:	f1c3 0304 	rsb	r3, r3, #4
  402846:	1ad2      	subs	r2, r2, r3
  402848:	07db      	lsls	r3, r3, #31
  40284a:	bf1c      	itt	ne
  40284c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402850:	f800 3b01 	strbne.w	r3, [r0], #1
  402854:	d380      	bcc.n	402758 <memcpy+0xc>
  402856:	f831 3b02 	ldrh.w	r3, [r1], #2
  40285a:	f820 3b02 	strh.w	r3, [r0], #2
  40285e:	e77b      	b.n	402758 <memcpy+0xc>
  402860:	3a04      	subs	r2, #4
  402862:	d3d9      	bcc.n	402818 <memcpy+0xcc>
  402864:	3a01      	subs	r2, #1
  402866:	f811 3b01 	ldrb.w	r3, [r1], #1
  40286a:	f800 3b01 	strb.w	r3, [r0], #1
  40286e:	d2f9      	bcs.n	402864 <memcpy+0x118>
  402870:	780b      	ldrb	r3, [r1, #0]
  402872:	7003      	strb	r3, [r0, #0]
  402874:	784b      	ldrb	r3, [r1, #1]
  402876:	7043      	strb	r3, [r0, #1]
  402878:	788b      	ldrb	r3, [r1, #2]
  40287a:	7083      	strb	r3, [r0, #2]
  40287c:	4660      	mov	r0, ip
  40287e:	4770      	bx	lr

00402880 <memset>:
  402880:	b470      	push	{r4, r5, r6}
  402882:	0786      	lsls	r6, r0, #30
  402884:	d046      	beq.n	402914 <memset+0x94>
  402886:	1e54      	subs	r4, r2, #1
  402888:	2a00      	cmp	r2, #0
  40288a:	d041      	beq.n	402910 <memset+0x90>
  40288c:	b2ca      	uxtb	r2, r1
  40288e:	4603      	mov	r3, r0
  402890:	e002      	b.n	402898 <memset+0x18>
  402892:	f114 34ff 	adds.w	r4, r4, #4294967295
  402896:	d33b      	bcc.n	402910 <memset+0x90>
  402898:	f803 2b01 	strb.w	r2, [r3], #1
  40289c:	079d      	lsls	r5, r3, #30
  40289e:	d1f8      	bne.n	402892 <memset+0x12>
  4028a0:	2c03      	cmp	r4, #3
  4028a2:	d92e      	bls.n	402902 <memset+0x82>
  4028a4:	b2cd      	uxtb	r5, r1
  4028a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4028aa:	2c0f      	cmp	r4, #15
  4028ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4028b0:	d919      	bls.n	4028e6 <memset+0x66>
  4028b2:	f103 0210 	add.w	r2, r3, #16
  4028b6:	4626      	mov	r6, r4
  4028b8:	3e10      	subs	r6, #16
  4028ba:	2e0f      	cmp	r6, #15
  4028bc:	f842 5c10 	str.w	r5, [r2, #-16]
  4028c0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4028c4:	f842 5c08 	str.w	r5, [r2, #-8]
  4028c8:	f842 5c04 	str.w	r5, [r2, #-4]
  4028cc:	f102 0210 	add.w	r2, r2, #16
  4028d0:	d8f2      	bhi.n	4028b8 <memset+0x38>
  4028d2:	f1a4 0210 	sub.w	r2, r4, #16
  4028d6:	f022 020f 	bic.w	r2, r2, #15
  4028da:	f004 040f 	and.w	r4, r4, #15
  4028de:	3210      	adds	r2, #16
  4028e0:	2c03      	cmp	r4, #3
  4028e2:	4413      	add	r3, r2
  4028e4:	d90d      	bls.n	402902 <memset+0x82>
  4028e6:	461e      	mov	r6, r3
  4028e8:	4622      	mov	r2, r4
  4028ea:	3a04      	subs	r2, #4
  4028ec:	2a03      	cmp	r2, #3
  4028ee:	f846 5b04 	str.w	r5, [r6], #4
  4028f2:	d8fa      	bhi.n	4028ea <memset+0x6a>
  4028f4:	1f22      	subs	r2, r4, #4
  4028f6:	f022 0203 	bic.w	r2, r2, #3
  4028fa:	3204      	adds	r2, #4
  4028fc:	4413      	add	r3, r2
  4028fe:	f004 0403 	and.w	r4, r4, #3
  402902:	b12c      	cbz	r4, 402910 <memset+0x90>
  402904:	b2c9      	uxtb	r1, r1
  402906:	441c      	add	r4, r3
  402908:	f803 1b01 	strb.w	r1, [r3], #1
  40290c:	429c      	cmp	r4, r3
  40290e:	d1fb      	bne.n	402908 <memset+0x88>
  402910:	bc70      	pop	{r4, r5, r6}
  402912:	4770      	bx	lr
  402914:	4614      	mov	r4, r2
  402916:	4603      	mov	r3, r0
  402918:	e7c2      	b.n	4028a0 <memset+0x20>
  40291a:	bf00      	nop

0040291c <setbuf>:
  40291c:	2900      	cmp	r1, #0
  40291e:	bf0c      	ite	eq
  402920:	2202      	moveq	r2, #2
  402922:	2200      	movne	r2, #0
  402924:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402928:	f000 b800 	b.w	40292c <setvbuf>

0040292c <setvbuf>:
  40292c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402930:	4c61      	ldr	r4, [pc, #388]	; (402ab8 <setvbuf+0x18c>)
  402932:	6825      	ldr	r5, [r4, #0]
  402934:	b083      	sub	sp, #12
  402936:	4604      	mov	r4, r0
  402938:	460f      	mov	r7, r1
  40293a:	4690      	mov	r8, r2
  40293c:	461e      	mov	r6, r3
  40293e:	b115      	cbz	r5, 402946 <setvbuf+0x1a>
  402940:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402942:	2b00      	cmp	r3, #0
  402944:	d064      	beq.n	402a10 <setvbuf+0xe4>
  402946:	f1b8 0f02 	cmp.w	r8, #2
  40294a:	d006      	beq.n	40295a <setvbuf+0x2e>
  40294c:	f1b8 0f01 	cmp.w	r8, #1
  402950:	f200 809f 	bhi.w	402a92 <setvbuf+0x166>
  402954:	2e00      	cmp	r6, #0
  402956:	f2c0 809c 	blt.w	402a92 <setvbuf+0x166>
  40295a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40295c:	07d8      	lsls	r0, r3, #31
  40295e:	d534      	bpl.n	4029ca <setvbuf+0x9e>
  402960:	4621      	mov	r1, r4
  402962:	4628      	mov	r0, r5
  402964:	f001 f92a 	bl	403bbc <_fflush_r>
  402968:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40296a:	b141      	cbz	r1, 40297e <setvbuf+0x52>
  40296c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402970:	4299      	cmp	r1, r3
  402972:	d002      	beq.n	40297a <setvbuf+0x4e>
  402974:	4628      	mov	r0, r5
  402976:	f001 fa9f 	bl	403eb8 <_free_r>
  40297a:	2300      	movs	r3, #0
  40297c:	6323      	str	r3, [r4, #48]	; 0x30
  40297e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402982:	2200      	movs	r2, #0
  402984:	61a2      	str	r2, [r4, #24]
  402986:	6062      	str	r2, [r4, #4]
  402988:	061a      	lsls	r2, r3, #24
  40298a:	d43a      	bmi.n	402a02 <setvbuf+0xd6>
  40298c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402990:	f023 0303 	bic.w	r3, r3, #3
  402994:	f1b8 0f02 	cmp.w	r8, #2
  402998:	81a3      	strh	r3, [r4, #12]
  40299a:	d01d      	beq.n	4029d8 <setvbuf+0xac>
  40299c:	ab01      	add	r3, sp, #4
  40299e:	466a      	mov	r2, sp
  4029a0:	4621      	mov	r1, r4
  4029a2:	4628      	mov	r0, r5
  4029a4:	f001 fd26 	bl	4043f4 <__swhatbuf_r>
  4029a8:	89a3      	ldrh	r3, [r4, #12]
  4029aa:	4318      	orrs	r0, r3
  4029ac:	81a0      	strh	r0, [r4, #12]
  4029ae:	2e00      	cmp	r6, #0
  4029b0:	d132      	bne.n	402a18 <setvbuf+0xec>
  4029b2:	9e00      	ldr	r6, [sp, #0]
  4029b4:	4630      	mov	r0, r6
  4029b6:	f001 fd95 	bl	4044e4 <malloc>
  4029ba:	4607      	mov	r7, r0
  4029bc:	2800      	cmp	r0, #0
  4029be:	d06b      	beq.n	402a98 <setvbuf+0x16c>
  4029c0:	89a3      	ldrh	r3, [r4, #12]
  4029c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4029c6:	81a3      	strh	r3, [r4, #12]
  4029c8:	e028      	b.n	402a1c <setvbuf+0xf0>
  4029ca:	89a3      	ldrh	r3, [r4, #12]
  4029cc:	0599      	lsls	r1, r3, #22
  4029ce:	d4c7      	bmi.n	402960 <setvbuf+0x34>
  4029d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4029d2:	f001 fd0b 	bl	4043ec <__retarget_lock_acquire_recursive>
  4029d6:	e7c3      	b.n	402960 <setvbuf+0x34>
  4029d8:	2500      	movs	r5, #0
  4029da:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4029dc:	2600      	movs	r6, #0
  4029de:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4029e2:	f043 0302 	orr.w	r3, r3, #2
  4029e6:	2001      	movs	r0, #1
  4029e8:	60a6      	str	r6, [r4, #8]
  4029ea:	07ce      	lsls	r6, r1, #31
  4029ec:	81a3      	strh	r3, [r4, #12]
  4029ee:	6022      	str	r2, [r4, #0]
  4029f0:	6122      	str	r2, [r4, #16]
  4029f2:	6160      	str	r0, [r4, #20]
  4029f4:	d401      	bmi.n	4029fa <setvbuf+0xce>
  4029f6:	0598      	lsls	r0, r3, #22
  4029f8:	d53e      	bpl.n	402a78 <setvbuf+0x14c>
  4029fa:	4628      	mov	r0, r5
  4029fc:	b003      	add	sp, #12
  4029fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a02:	6921      	ldr	r1, [r4, #16]
  402a04:	4628      	mov	r0, r5
  402a06:	f001 fa57 	bl	403eb8 <_free_r>
  402a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a0e:	e7bd      	b.n	40298c <setvbuf+0x60>
  402a10:	4628      	mov	r0, r5
  402a12:	f001 f92b 	bl	403c6c <__sinit>
  402a16:	e796      	b.n	402946 <setvbuf+0x1a>
  402a18:	2f00      	cmp	r7, #0
  402a1a:	d0cb      	beq.n	4029b4 <setvbuf+0x88>
  402a1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402a1e:	2b00      	cmp	r3, #0
  402a20:	d033      	beq.n	402a8a <setvbuf+0x15e>
  402a22:	9b00      	ldr	r3, [sp, #0]
  402a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402a28:	6027      	str	r7, [r4, #0]
  402a2a:	429e      	cmp	r6, r3
  402a2c:	bf1c      	itt	ne
  402a2e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402a32:	81a2      	strhne	r2, [r4, #12]
  402a34:	f1b8 0f01 	cmp.w	r8, #1
  402a38:	bf04      	itt	eq
  402a3a:	f042 0201 	orreq.w	r2, r2, #1
  402a3e:	81a2      	strheq	r2, [r4, #12]
  402a40:	b292      	uxth	r2, r2
  402a42:	f012 0308 	ands.w	r3, r2, #8
  402a46:	6127      	str	r7, [r4, #16]
  402a48:	6166      	str	r6, [r4, #20]
  402a4a:	d00e      	beq.n	402a6a <setvbuf+0x13e>
  402a4c:	07d1      	lsls	r1, r2, #31
  402a4e:	d51a      	bpl.n	402a86 <setvbuf+0x15a>
  402a50:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402a52:	4276      	negs	r6, r6
  402a54:	2300      	movs	r3, #0
  402a56:	f015 0501 	ands.w	r5, r5, #1
  402a5a:	61a6      	str	r6, [r4, #24]
  402a5c:	60a3      	str	r3, [r4, #8]
  402a5e:	d009      	beq.n	402a74 <setvbuf+0x148>
  402a60:	2500      	movs	r5, #0
  402a62:	4628      	mov	r0, r5
  402a64:	b003      	add	sp, #12
  402a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a6a:	60a3      	str	r3, [r4, #8]
  402a6c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402a6e:	f015 0501 	ands.w	r5, r5, #1
  402a72:	d1f5      	bne.n	402a60 <setvbuf+0x134>
  402a74:	0593      	lsls	r3, r2, #22
  402a76:	d4c0      	bmi.n	4029fa <setvbuf+0xce>
  402a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402a7a:	f001 fcb9 	bl	4043f0 <__retarget_lock_release_recursive>
  402a7e:	4628      	mov	r0, r5
  402a80:	b003      	add	sp, #12
  402a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a86:	60a6      	str	r6, [r4, #8]
  402a88:	e7f0      	b.n	402a6c <setvbuf+0x140>
  402a8a:	4628      	mov	r0, r5
  402a8c:	f001 f8ee 	bl	403c6c <__sinit>
  402a90:	e7c7      	b.n	402a22 <setvbuf+0xf6>
  402a92:	f04f 35ff 	mov.w	r5, #4294967295
  402a96:	e7b0      	b.n	4029fa <setvbuf+0xce>
  402a98:	f8dd 9000 	ldr.w	r9, [sp]
  402a9c:	45b1      	cmp	r9, r6
  402a9e:	d004      	beq.n	402aaa <setvbuf+0x17e>
  402aa0:	4648      	mov	r0, r9
  402aa2:	f001 fd1f 	bl	4044e4 <malloc>
  402aa6:	4607      	mov	r7, r0
  402aa8:	b920      	cbnz	r0, 402ab4 <setvbuf+0x188>
  402aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aae:	f04f 35ff 	mov.w	r5, #4294967295
  402ab2:	e792      	b.n	4029da <setvbuf+0xae>
  402ab4:	464e      	mov	r6, r9
  402ab6:	e783      	b.n	4029c0 <setvbuf+0x94>
  402ab8:	20400020 	.word	0x20400020
  402abc:	00000000 	.word	0x00000000

00402ac0 <strlen>:
  402ac0:	f890 f000 	pld	[r0]
  402ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402ac8:	f020 0107 	bic.w	r1, r0, #7
  402acc:	f06f 0c00 	mvn.w	ip, #0
  402ad0:	f010 0407 	ands.w	r4, r0, #7
  402ad4:	f891 f020 	pld	[r1, #32]
  402ad8:	f040 8049 	bne.w	402b6e <strlen+0xae>
  402adc:	f04f 0400 	mov.w	r4, #0
  402ae0:	f06f 0007 	mvn.w	r0, #7
  402ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402ae8:	f891 f040 	pld	[r1, #64]	; 0x40
  402aec:	f100 0008 	add.w	r0, r0, #8
  402af0:	fa82 f24c 	uadd8	r2, r2, ip
  402af4:	faa4 f28c 	sel	r2, r4, ip
  402af8:	fa83 f34c 	uadd8	r3, r3, ip
  402afc:	faa2 f38c 	sel	r3, r2, ip
  402b00:	bb4b      	cbnz	r3, 402b56 <strlen+0x96>
  402b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402b06:	fa82 f24c 	uadd8	r2, r2, ip
  402b0a:	f100 0008 	add.w	r0, r0, #8
  402b0e:	faa4 f28c 	sel	r2, r4, ip
  402b12:	fa83 f34c 	uadd8	r3, r3, ip
  402b16:	faa2 f38c 	sel	r3, r2, ip
  402b1a:	b9e3      	cbnz	r3, 402b56 <strlen+0x96>
  402b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402b20:	fa82 f24c 	uadd8	r2, r2, ip
  402b24:	f100 0008 	add.w	r0, r0, #8
  402b28:	faa4 f28c 	sel	r2, r4, ip
  402b2c:	fa83 f34c 	uadd8	r3, r3, ip
  402b30:	faa2 f38c 	sel	r3, r2, ip
  402b34:	b97b      	cbnz	r3, 402b56 <strlen+0x96>
  402b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402b3a:	f101 0120 	add.w	r1, r1, #32
  402b3e:	fa82 f24c 	uadd8	r2, r2, ip
  402b42:	f100 0008 	add.w	r0, r0, #8
  402b46:	faa4 f28c 	sel	r2, r4, ip
  402b4a:	fa83 f34c 	uadd8	r3, r3, ip
  402b4e:	faa2 f38c 	sel	r3, r2, ip
  402b52:	2b00      	cmp	r3, #0
  402b54:	d0c6      	beq.n	402ae4 <strlen+0x24>
  402b56:	2a00      	cmp	r2, #0
  402b58:	bf04      	itt	eq
  402b5a:	3004      	addeq	r0, #4
  402b5c:	461a      	moveq	r2, r3
  402b5e:	ba12      	rev	r2, r2
  402b60:	fab2 f282 	clz	r2, r2
  402b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402b6c:	4770      	bx	lr
  402b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402b72:	f004 0503 	and.w	r5, r4, #3
  402b76:	f1c4 0000 	rsb	r0, r4, #0
  402b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402b7e:	f014 0f04 	tst.w	r4, #4
  402b82:	f891 f040 	pld	[r1, #64]	; 0x40
  402b86:	fa0c f505 	lsl.w	r5, ip, r5
  402b8a:	ea62 0205 	orn	r2, r2, r5
  402b8e:	bf1c      	itt	ne
  402b90:	ea63 0305 	ornne	r3, r3, r5
  402b94:	4662      	movne	r2, ip
  402b96:	f04f 0400 	mov.w	r4, #0
  402b9a:	e7a9      	b.n	402af0 <strlen+0x30>

00402b9c <strncpy>:
  402b9c:	ea40 0301 	orr.w	r3, r0, r1
  402ba0:	f013 0f03 	tst.w	r3, #3
  402ba4:	b470      	push	{r4, r5, r6}
  402ba6:	4603      	mov	r3, r0
  402ba8:	d024      	beq.n	402bf4 <strncpy+0x58>
  402baa:	b1a2      	cbz	r2, 402bd6 <strncpy+0x3a>
  402bac:	780c      	ldrb	r4, [r1, #0]
  402bae:	701c      	strb	r4, [r3, #0]
  402bb0:	3a01      	subs	r2, #1
  402bb2:	3301      	adds	r3, #1
  402bb4:	3101      	adds	r1, #1
  402bb6:	b13c      	cbz	r4, 402bc8 <strncpy+0x2c>
  402bb8:	b16a      	cbz	r2, 402bd6 <strncpy+0x3a>
  402bba:	f811 4b01 	ldrb.w	r4, [r1], #1
  402bbe:	f803 4b01 	strb.w	r4, [r3], #1
  402bc2:	3a01      	subs	r2, #1
  402bc4:	2c00      	cmp	r4, #0
  402bc6:	d1f7      	bne.n	402bb8 <strncpy+0x1c>
  402bc8:	b12a      	cbz	r2, 402bd6 <strncpy+0x3a>
  402bca:	441a      	add	r2, r3
  402bcc:	2100      	movs	r1, #0
  402bce:	f803 1b01 	strb.w	r1, [r3], #1
  402bd2:	429a      	cmp	r2, r3
  402bd4:	d1fb      	bne.n	402bce <strncpy+0x32>
  402bd6:	bc70      	pop	{r4, r5, r6}
  402bd8:	4770      	bx	lr
  402bda:	460e      	mov	r6, r1
  402bdc:	f851 5b04 	ldr.w	r5, [r1], #4
  402be0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  402be4:	ea24 0405 	bic.w	r4, r4, r5
  402be8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  402bec:	d105      	bne.n	402bfa <strncpy+0x5e>
  402bee:	f843 5b04 	str.w	r5, [r3], #4
  402bf2:	3a04      	subs	r2, #4
  402bf4:	2a03      	cmp	r2, #3
  402bf6:	d8f0      	bhi.n	402bda <strncpy+0x3e>
  402bf8:	e7d7      	b.n	402baa <strncpy+0xe>
  402bfa:	4631      	mov	r1, r6
  402bfc:	e7d6      	b.n	402bac <strncpy+0x10>
  402bfe:	bf00      	nop

00402c00 <__sprint_r.part.0>:
  402c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402c06:	049c      	lsls	r4, r3, #18
  402c08:	4693      	mov	fp, r2
  402c0a:	d52f      	bpl.n	402c6c <__sprint_r.part.0+0x6c>
  402c0c:	6893      	ldr	r3, [r2, #8]
  402c0e:	6812      	ldr	r2, [r2, #0]
  402c10:	b353      	cbz	r3, 402c68 <__sprint_r.part.0+0x68>
  402c12:	460e      	mov	r6, r1
  402c14:	4607      	mov	r7, r0
  402c16:	f102 0908 	add.w	r9, r2, #8
  402c1a:	e919 0420 	ldmdb	r9, {r5, sl}
  402c1e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402c22:	d017      	beq.n	402c54 <__sprint_r.part.0+0x54>
  402c24:	3d04      	subs	r5, #4
  402c26:	2400      	movs	r4, #0
  402c28:	e001      	b.n	402c2e <__sprint_r.part.0+0x2e>
  402c2a:	45a0      	cmp	r8, r4
  402c2c:	d010      	beq.n	402c50 <__sprint_r.part.0+0x50>
  402c2e:	4632      	mov	r2, r6
  402c30:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402c34:	4638      	mov	r0, r7
  402c36:	f001 f8bb 	bl	403db0 <_fputwc_r>
  402c3a:	1c43      	adds	r3, r0, #1
  402c3c:	f104 0401 	add.w	r4, r4, #1
  402c40:	d1f3      	bne.n	402c2a <__sprint_r.part.0+0x2a>
  402c42:	2300      	movs	r3, #0
  402c44:	f8cb 3008 	str.w	r3, [fp, #8]
  402c48:	f8cb 3004 	str.w	r3, [fp, #4]
  402c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c50:	f8db 3008 	ldr.w	r3, [fp, #8]
  402c54:	f02a 0a03 	bic.w	sl, sl, #3
  402c58:	eba3 030a 	sub.w	r3, r3, sl
  402c5c:	f8cb 3008 	str.w	r3, [fp, #8]
  402c60:	f109 0908 	add.w	r9, r9, #8
  402c64:	2b00      	cmp	r3, #0
  402c66:	d1d8      	bne.n	402c1a <__sprint_r.part.0+0x1a>
  402c68:	2000      	movs	r0, #0
  402c6a:	e7ea      	b.n	402c42 <__sprint_r.part.0+0x42>
  402c6c:	f001 fa0a 	bl	404084 <__sfvwrite_r>
  402c70:	2300      	movs	r3, #0
  402c72:	f8cb 3008 	str.w	r3, [fp, #8]
  402c76:	f8cb 3004 	str.w	r3, [fp, #4]
  402c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c7e:	bf00      	nop

00402c80 <_vfiprintf_r>:
  402c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c84:	b0ad      	sub	sp, #180	; 0xb4
  402c86:	461d      	mov	r5, r3
  402c88:	468b      	mov	fp, r1
  402c8a:	4690      	mov	r8, r2
  402c8c:	9307      	str	r3, [sp, #28]
  402c8e:	9006      	str	r0, [sp, #24]
  402c90:	b118      	cbz	r0, 402c9a <_vfiprintf_r+0x1a>
  402c92:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402c94:	2b00      	cmp	r3, #0
  402c96:	f000 80f3 	beq.w	402e80 <_vfiprintf_r+0x200>
  402c9a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402c9e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402ca2:	07df      	lsls	r7, r3, #31
  402ca4:	b281      	uxth	r1, r0
  402ca6:	d402      	bmi.n	402cae <_vfiprintf_r+0x2e>
  402ca8:	058e      	lsls	r6, r1, #22
  402caa:	f140 80fc 	bpl.w	402ea6 <_vfiprintf_r+0x226>
  402cae:	048c      	lsls	r4, r1, #18
  402cb0:	d40a      	bmi.n	402cc8 <_vfiprintf_r+0x48>
  402cb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402cb6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402cbe:	f8ab 100c 	strh.w	r1, [fp, #12]
  402cc2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402cc6:	b289      	uxth	r1, r1
  402cc8:	0708      	lsls	r0, r1, #28
  402cca:	f140 80b3 	bpl.w	402e34 <_vfiprintf_r+0x1b4>
  402cce:	f8db 3010 	ldr.w	r3, [fp, #16]
  402cd2:	2b00      	cmp	r3, #0
  402cd4:	f000 80ae 	beq.w	402e34 <_vfiprintf_r+0x1b4>
  402cd8:	f001 031a 	and.w	r3, r1, #26
  402cdc:	2b0a      	cmp	r3, #10
  402cde:	f000 80b5 	beq.w	402e4c <_vfiprintf_r+0x1cc>
  402ce2:	2300      	movs	r3, #0
  402ce4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402ce8:	930b      	str	r3, [sp, #44]	; 0x2c
  402cea:	9311      	str	r3, [sp, #68]	; 0x44
  402cec:	9310      	str	r3, [sp, #64]	; 0x40
  402cee:	9303      	str	r3, [sp, #12]
  402cf0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402cf4:	46ca      	mov	sl, r9
  402cf6:	f8cd b010 	str.w	fp, [sp, #16]
  402cfa:	f898 3000 	ldrb.w	r3, [r8]
  402cfe:	4644      	mov	r4, r8
  402d00:	b1fb      	cbz	r3, 402d42 <_vfiprintf_r+0xc2>
  402d02:	2b25      	cmp	r3, #37	; 0x25
  402d04:	d102      	bne.n	402d0c <_vfiprintf_r+0x8c>
  402d06:	e01c      	b.n	402d42 <_vfiprintf_r+0xc2>
  402d08:	2b25      	cmp	r3, #37	; 0x25
  402d0a:	d003      	beq.n	402d14 <_vfiprintf_r+0x94>
  402d0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402d10:	2b00      	cmp	r3, #0
  402d12:	d1f9      	bne.n	402d08 <_vfiprintf_r+0x88>
  402d14:	eba4 0508 	sub.w	r5, r4, r8
  402d18:	b19d      	cbz	r5, 402d42 <_vfiprintf_r+0xc2>
  402d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d1e:	f8ca 8000 	str.w	r8, [sl]
  402d22:	3301      	adds	r3, #1
  402d24:	442a      	add	r2, r5
  402d26:	2b07      	cmp	r3, #7
  402d28:	f8ca 5004 	str.w	r5, [sl, #4]
  402d2c:	9211      	str	r2, [sp, #68]	; 0x44
  402d2e:	9310      	str	r3, [sp, #64]	; 0x40
  402d30:	dd7a      	ble.n	402e28 <_vfiprintf_r+0x1a8>
  402d32:	2a00      	cmp	r2, #0
  402d34:	f040 84b0 	bne.w	403698 <_vfiprintf_r+0xa18>
  402d38:	9b03      	ldr	r3, [sp, #12]
  402d3a:	9210      	str	r2, [sp, #64]	; 0x40
  402d3c:	442b      	add	r3, r5
  402d3e:	46ca      	mov	sl, r9
  402d40:	9303      	str	r3, [sp, #12]
  402d42:	7823      	ldrb	r3, [r4, #0]
  402d44:	2b00      	cmp	r3, #0
  402d46:	f000 83e0 	beq.w	40350a <_vfiprintf_r+0x88a>
  402d4a:	2000      	movs	r0, #0
  402d4c:	f04f 0300 	mov.w	r3, #0
  402d50:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402d54:	f104 0801 	add.w	r8, r4, #1
  402d58:	7862      	ldrb	r2, [r4, #1]
  402d5a:	4605      	mov	r5, r0
  402d5c:	4606      	mov	r6, r0
  402d5e:	4603      	mov	r3, r0
  402d60:	f04f 34ff 	mov.w	r4, #4294967295
  402d64:	f108 0801 	add.w	r8, r8, #1
  402d68:	f1a2 0120 	sub.w	r1, r2, #32
  402d6c:	2958      	cmp	r1, #88	; 0x58
  402d6e:	f200 82de 	bhi.w	40332e <_vfiprintf_r+0x6ae>
  402d72:	e8df f011 	tbh	[pc, r1, lsl #1]
  402d76:	0221      	.short	0x0221
  402d78:	02dc02dc 	.word	0x02dc02dc
  402d7c:	02dc0229 	.word	0x02dc0229
  402d80:	02dc02dc 	.word	0x02dc02dc
  402d84:	02dc02dc 	.word	0x02dc02dc
  402d88:	028902dc 	.word	0x028902dc
  402d8c:	02dc0295 	.word	0x02dc0295
  402d90:	02bd00a2 	.word	0x02bd00a2
  402d94:	019f02dc 	.word	0x019f02dc
  402d98:	01a401a4 	.word	0x01a401a4
  402d9c:	01a401a4 	.word	0x01a401a4
  402da0:	01a401a4 	.word	0x01a401a4
  402da4:	01a401a4 	.word	0x01a401a4
  402da8:	02dc01a4 	.word	0x02dc01a4
  402dac:	02dc02dc 	.word	0x02dc02dc
  402db0:	02dc02dc 	.word	0x02dc02dc
  402db4:	02dc02dc 	.word	0x02dc02dc
  402db8:	02dc02dc 	.word	0x02dc02dc
  402dbc:	01b202dc 	.word	0x01b202dc
  402dc0:	02dc02dc 	.word	0x02dc02dc
  402dc4:	02dc02dc 	.word	0x02dc02dc
  402dc8:	02dc02dc 	.word	0x02dc02dc
  402dcc:	02dc02dc 	.word	0x02dc02dc
  402dd0:	02dc02dc 	.word	0x02dc02dc
  402dd4:	02dc0197 	.word	0x02dc0197
  402dd8:	02dc02dc 	.word	0x02dc02dc
  402ddc:	02dc02dc 	.word	0x02dc02dc
  402de0:	02dc019b 	.word	0x02dc019b
  402de4:	025302dc 	.word	0x025302dc
  402de8:	02dc02dc 	.word	0x02dc02dc
  402dec:	02dc02dc 	.word	0x02dc02dc
  402df0:	02dc02dc 	.word	0x02dc02dc
  402df4:	02dc02dc 	.word	0x02dc02dc
  402df8:	02dc02dc 	.word	0x02dc02dc
  402dfc:	021b025a 	.word	0x021b025a
  402e00:	02dc02dc 	.word	0x02dc02dc
  402e04:	026e02dc 	.word	0x026e02dc
  402e08:	02dc021b 	.word	0x02dc021b
  402e0c:	027302dc 	.word	0x027302dc
  402e10:	01f502dc 	.word	0x01f502dc
  402e14:	02090182 	.word	0x02090182
  402e18:	02dc02d7 	.word	0x02dc02d7
  402e1c:	02dc029a 	.word	0x02dc029a
  402e20:	02dc00a7 	.word	0x02dc00a7
  402e24:	022e02dc 	.word	0x022e02dc
  402e28:	f10a 0a08 	add.w	sl, sl, #8
  402e2c:	9b03      	ldr	r3, [sp, #12]
  402e2e:	442b      	add	r3, r5
  402e30:	9303      	str	r3, [sp, #12]
  402e32:	e786      	b.n	402d42 <_vfiprintf_r+0xc2>
  402e34:	4659      	mov	r1, fp
  402e36:	9806      	ldr	r0, [sp, #24]
  402e38:	f000 fdac 	bl	403994 <__swsetup_r>
  402e3c:	bb18      	cbnz	r0, 402e86 <_vfiprintf_r+0x206>
  402e3e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402e42:	f001 031a 	and.w	r3, r1, #26
  402e46:	2b0a      	cmp	r3, #10
  402e48:	f47f af4b 	bne.w	402ce2 <_vfiprintf_r+0x62>
  402e4c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402e50:	2b00      	cmp	r3, #0
  402e52:	f6ff af46 	blt.w	402ce2 <_vfiprintf_r+0x62>
  402e56:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402e5a:	07db      	lsls	r3, r3, #31
  402e5c:	d405      	bmi.n	402e6a <_vfiprintf_r+0x1ea>
  402e5e:	058f      	lsls	r7, r1, #22
  402e60:	d403      	bmi.n	402e6a <_vfiprintf_r+0x1ea>
  402e62:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402e66:	f001 fac3 	bl	4043f0 <__retarget_lock_release_recursive>
  402e6a:	462b      	mov	r3, r5
  402e6c:	4642      	mov	r2, r8
  402e6e:	4659      	mov	r1, fp
  402e70:	9806      	ldr	r0, [sp, #24]
  402e72:	f000 fd4d 	bl	403910 <__sbprintf>
  402e76:	9003      	str	r0, [sp, #12]
  402e78:	9803      	ldr	r0, [sp, #12]
  402e7a:	b02d      	add	sp, #180	; 0xb4
  402e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e80:	f000 fef4 	bl	403c6c <__sinit>
  402e84:	e709      	b.n	402c9a <_vfiprintf_r+0x1a>
  402e86:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402e8a:	07d9      	lsls	r1, r3, #31
  402e8c:	d404      	bmi.n	402e98 <_vfiprintf_r+0x218>
  402e8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402e92:	059a      	lsls	r2, r3, #22
  402e94:	f140 84aa 	bpl.w	4037ec <_vfiprintf_r+0xb6c>
  402e98:	f04f 33ff 	mov.w	r3, #4294967295
  402e9c:	9303      	str	r3, [sp, #12]
  402e9e:	9803      	ldr	r0, [sp, #12]
  402ea0:	b02d      	add	sp, #180	; 0xb4
  402ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ea6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402eaa:	f001 fa9f 	bl	4043ec <__retarget_lock_acquire_recursive>
  402eae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402eb2:	b281      	uxth	r1, r0
  402eb4:	e6fb      	b.n	402cae <_vfiprintf_r+0x2e>
  402eb6:	4276      	negs	r6, r6
  402eb8:	9207      	str	r2, [sp, #28]
  402eba:	f043 0304 	orr.w	r3, r3, #4
  402ebe:	f898 2000 	ldrb.w	r2, [r8]
  402ec2:	e74f      	b.n	402d64 <_vfiprintf_r+0xe4>
  402ec4:	9608      	str	r6, [sp, #32]
  402ec6:	069e      	lsls	r6, r3, #26
  402ec8:	f100 8450 	bmi.w	40376c <_vfiprintf_r+0xaec>
  402ecc:	9907      	ldr	r1, [sp, #28]
  402ece:	06dd      	lsls	r5, r3, #27
  402ed0:	460a      	mov	r2, r1
  402ed2:	f100 83ef 	bmi.w	4036b4 <_vfiprintf_r+0xa34>
  402ed6:	0658      	lsls	r0, r3, #25
  402ed8:	f140 83ec 	bpl.w	4036b4 <_vfiprintf_r+0xa34>
  402edc:	880e      	ldrh	r6, [r1, #0]
  402ede:	3104      	adds	r1, #4
  402ee0:	2700      	movs	r7, #0
  402ee2:	2201      	movs	r2, #1
  402ee4:	9107      	str	r1, [sp, #28]
  402ee6:	f04f 0100 	mov.w	r1, #0
  402eea:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402eee:	2500      	movs	r5, #0
  402ef0:	1c61      	adds	r1, r4, #1
  402ef2:	f000 8116 	beq.w	403122 <_vfiprintf_r+0x4a2>
  402ef6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402efa:	9102      	str	r1, [sp, #8]
  402efc:	ea56 0107 	orrs.w	r1, r6, r7
  402f00:	f040 8114 	bne.w	40312c <_vfiprintf_r+0x4ac>
  402f04:	2c00      	cmp	r4, #0
  402f06:	f040 835c 	bne.w	4035c2 <_vfiprintf_r+0x942>
  402f0a:	2a00      	cmp	r2, #0
  402f0c:	f040 83b7 	bne.w	40367e <_vfiprintf_r+0x9fe>
  402f10:	f013 0301 	ands.w	r3, r3, #1
  402f14:	9305      	str	r3, [sp, #20]
  402f16:	f000 8457 	beq.w	4037c8 <_vfiprintf_r+0xb48>
  402f1a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402f1e:	2330      	movs	r3, #48	; 0x30
  402f20:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402f24:	9b05      	ldr	r3, [sp, #20]
  402f26:	42a3      	cmp	r3, r4
  402f28:	bfb8      	it	lt
  402f2a:	4623      	movlt	r3, r4
  402f2c:	9301      	str	r3, [sp, #4]
  402f2e:	b10d      	cbz	r5, 402f34 <_vfiprintf_r+0x2b4>
  402f30:	3301      	adds	r3, #1
  402f32:	9301      	str	r3, [sp, #4]
  402f34:	9b02      	ldr	r3, [sp, #8]
  402f36:	f013 0302 	ands.w	r3, r3, #2
  402f3a:	9309      	str	r3, [sp, #36]	; 0x24
  402f3c:	d002      	beq.n	402f44 <_vfiprintf_r+0x2c4>
  402f3e:	9b01      	ldr	r3, [sp, #4]
  402f40:	3302      	adds	r3, #2
  402f42:	9301      	str	r3, [sp, #4]
  402f44:	9b02      	ldr	r3, [sp, #8]
  402f46:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402f4a:	930a      	str	r3, [sp, #40]	; 0x28
  402f4c:	f040 8217 	bne.w	40337e <_vfiprintf_r+0x6fe>
  402f50:	9b08      	ldr	r3, [sp, #32]
  402f52:	9a01      	ldr	r2, [sp, #4]
  402f54:	1a9d      	subs	r5, r3, r2
  402f56:	2d00      	cmp	r5, #0
  402f58:	f340 8211 	ble.w	40337e <_vfiprintf_r+0x6fe>
  402f5c:	2d10      	cmp	r5, #16
  402f5e:	f340 8490 	ble.w	403882 <_vfiprintf_r+0xc02>
  402f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f66:	4ec4      	ldr	r6, [pc, #784]	; (403278 <_vfiprintf_r+0x5f8>)
  402f68:	46d6      	mov	lr, sl
  402f6a:	2710      	movs	r7, #16
  402f6c:	46a2      	mov	sl, r4
  402f6e:	4619      	mov	r1, r3
  402f70:	9c06      	ldr	r4, [sp, #24]
  402f72:	e007      	b.n	402f84 <_vfiprintf_r+0x304>
  402f74:	f101 0c02 	add.w	ip, r1, #2
  402f78:	f10e 0e08 	add.w	lr, lr, #8
  402f7c:	4601      	mov	r1, r0
  402f7e:	3d10      	subs	r5, #16
  402f80:	2d10      	cmp	r5, #16
  402f82:	dd11      	ble.n	402fa8 <_vfiprintf_r+0x328>
  402f84:	1c48      	adds	r0, r1, #1
  402f86:	3210      	adds	r2, #16
  402f88:	2807      	cmp	r0, #7
  402f8a:	9211      	str	r2, [sp, #68]	; 0x44
  402f8c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402f90:	9010      	str	r0, [sp, #64]	; 0x40
  402f92:	ddef      	ble.n	402f74 <_vfiprintf_r+0x2f4>
  402f94:	2a00      	cmp	r2, #0
  402f96:	f040 81e4 	bne.w	403362 <_vfiprintf_r+0x6e2>
  402f9a:	3d10      	subs	r5, #16
  402f9c:	2d10      	cmp	r5, #16
  402f9e:	4611      	mov	r1, r2
  402fa0:	f04f 0c01 	mov.w	ip, #1
  402fa4:	46ce      	mov	lr, r9
  402fa6:	dced      	bgt.n	402f84 <_vfiprintf_r+0x304>
  402fa8:	4654      	mov	r4, sl
  402faa:	4661      	mov	r1, ip
  402fac:	46f2      	mov	sl, lr
  402fae:	442a      	add	r2, r5
  402fb0:	2907      	cmp	r1, #7
  402fb2:	9211      	str	r2, [sp, #68]	; 0x44
  402fb4:	f8ca 6000 	str.w	r6, [sl]
  402fb8:	f8ca 5004 	str.w	r5, [sl, #4]
  402fbc:	9110      	str	r1, [sp, #64]	; 0x40
  402fbe:	f300 82ec 	bgt.w	40359a <_vfiprintf_r+0x91a>
  402fc2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402fc6:	f10a 0a08 	add.w	sl, sl, #8
  402fca:	1c48      	adds	r0, r1, #1
  402fcc:	2d00      	cmp	r5, #0
  402fce:	f040 81de 	bne.w	40338e <_vfiprintf_r+0x70e>
  402fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402fd4:	2b00      	cmp	r3, #0
  402fd6:	f000 81f8 	beq.w	4033ca <_vfiprintf_r+0x74a>
  402fda:	3202      	adds	r2, #2
  402fdc:	a90e      	add	r1, sp, #56	; 0x38
  402fde:	2302      	movs	r3, #2
  402fe0:	2807      	cmp	r0, #7
  402fe2:	9211      	str	r2, [sp, #68]	; 0x44
  402fe4:	9010      	str	r0, [sp, #64]	; 0x40
  402fe6:	e88a 000a 	stmia.w	sl, {r1, r3}
  402fea:	f340 81ea 	ble.w	4033c2 <_vfiprintf_r+0x742>
  402fee:	2a00      	cmp	r2, #0
  402ff0:	f040 838c 	bne.w	40370c <_vfiprintf_r+0xa8c>
  402ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ff6:	2b80      	cmp	r3, #128	; 0x80
  402ff8:	f04f 0001 	mov.w	r0, #1
  402ffc:	4611      	mov	r1, r2
  402ffe:	46ca      	mov	sl, r9
  403000:	f040 81e7 	bne.w	4033d2 <_vfiprintf_r+0x752>
  403004:	9b08      	ldr	r3, [sp, #32]
  403006:	9d01      	ldr	r5, [sp, #4]
  403008:	1b5e      	subs	r6, r3, r5
  40300a:	2e00      	cmp	r6, #0
  40300c:	f340 81e1 	ble.w	4033d2 <_vfiprintf_r+0x752>
  403010:	2e10      	cmp	r6, #16
  403012:	4d9a      	ldr	r5, [pc, #616]	; (40327c <_vfiprintf_r+0x5fc>)
  403014:	f340 8450 	ble.w	4038b8 <_vfiprintf_r+0xc38>
  403018:	46d4      	mov	ip, sl
  40301a:	2710      	movs	r7, #16
  40301c:	46a2      	mov	sl, r4
  40301e:	9c06      	ldr	r4, [sp, #24]
  403020:	e007      	b.n	403032 <_vfiprintf_r+0x3b2>
  403022:	f101 0e02 	add.w	lr, r1, #2
  403026:	f10c 0c08 	add.w	ip, ip, #8
  40302a:	4601      	mov	r1, r0
  40302c:	3e10      	subs	r6, #16
  40302e:	2e10      	cmp	r6, #16
  403030:	dd11      	ble.n	403056 <_vfiprintf_r+0x3d6>
  403032:	1c48      	adds	r0, r1, #1
  403034:	3210      	adds	r2, #16
  403036:	2807      	cmp	r0, #7
  403038:	9211      	str	r2, [sp, #68]	; 0x44
  40303a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40303e:	9010      	str	r0, [sp, #64]	; 0x40
  403040:	ddef      	ble.n	403022 <_vfiprintf_r+0x3a2>
  403042:	2a00      	cmp	r2, #0
  403044:	f040 829d 	bne.w	403582 <_vfiprintf_r+0x902>
  403048:	3e10      	subs	r6, #16
  40304a:	2e10      	cmp	r6, #16
  40304c:	f04f 0e01 	mov.w	lr, #1
  403050:	4611      	mov	r1, r2
  403052:	46cc      	mov	ip, r9
  403054:	dced      	bgt.n	403032 <_vfiprintf_r+0x3b2>
  403056:	4654      	mov	r4, sl
  403058:	46e2      	mov	sl, ip
  40305a:	4432      	add	r2, r6
  40305c:	f1be 0f07 	cmp.w	lr, #7
  403060:	9211      	str	r2, [sp, #68]	; 0x44
  403062:	e88a 0060 	stmia.w	sl, {r5, r6}
  403066:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40306a:	f300 8369 	bgt.w	403740 <_vfiprintf_r+0xac0>
  40306e:	f10a 0a08 	add.w	sl, sl, #8
  403072:	f10e 0001 	add.w	r0, lr, #1
  403076:	4671      	mov	r1, lr
  403078:	e1ab      	b.n	4033d2 <_vfiprintf_r+0x752>
  40307a:	9608      	str	r6, [sp, #32]
  40307c:	f013 0220 	ands.w	r2, r3, #32
  403080:	f040 838c 	bne.w	40379c <_vfiprintf_r+0xb1c>
  403084:	f013 0110 	ands.w	r1, r3, #16
  403088:	f040 831a 	bne.w	4036c0 <_vfiprintf_r+0xa40>
  40308c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403090:	f000 8316 	beq.w	4036c0 <_vfiprintf_r+0xa40>
  403094:	9807      	ldr	r0, [sp, #28]
  403096:	460a      	mov	r2, r1
  403098:	4601      	mov	r1, r0
  40309a:	3104      	adds	r1, #4
  40309c:	8806      	ldrh	r6, [r0, #0]
  40309e:	9107      	str	r1, [sp, #28]
  4030a0:	2700      	movs	r7, #0
  4030a2:	e720      	b.n	402ee6 <_vfiprintf_r+0x266>
  4030a4:	9608      	str	r6, [sp, #32]
  4030a6:	f043 0310 	orr.w	r3, r3, #16
  4030aa:	e7e7      	b.n	40307c <_vfiprintf_r+0x3fc>
  4030ac:	9608      	str	r6, [sp, #32]
  4030ae:	f043 0310 	orr.w	r3, r3, #16
  4030b2:	e708      	b.n	402ec6 <_vfiprintf_r+0x246>
  4030b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4030b8:	f898 2000 	ldrb.w	r2, [r8]
  4030bc:	e652      	b.n	402d64 <_vfiprintf_r+0xe4>
  4030be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4030c2:	2600      	movs	r6, #0
  4030c4:	f818 2b01 	ldrb.w	r2, [r8], #1
  4030c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4030cc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4030d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4030d4:	2909      	cmp	r1, #9
  4030d6:	d9f5      	bls.n	4030c4 <_vfiprintf_r+0x444>
  4030d8:	e646      	b.n	402d68 <_vfiprintf_r+0xe8>
  4030da:	9608      	str	r6, [sp, #32]
  4030dc:	2800      	cmp	r0, #0
  4030de:	f040 8408 	bne.w	4038f2 <_vfiprintf_r+0xc72>
  4030e2:	f043 0310 	orr.w	r3, r3, #16
  4030e6:	069e      	lsls	r6, r3, #26
  4030e8:	f100 834c 	bmi.w	403784 <_vfiprintf_r+0xb04>
  4030ec:	06dd      	lsls	r5, r3, #27
  4030ee:	f100 82f3 	bmi.w	4036d8 <_vfiprintf_r+0xa58>
  4030f2:	0658      	lsls	r0, r3, #25
  4030f4:	f140 82f0 	bpl.w	4036d8 <_vfiprintf_r+0xa58>
  4030f8:	9d07      	ldr	r5, [sp, #28]
  4030fa:	f9b5 6000 	ldrsh.w	r6, [r5]
  4030fe:	462a      	mov	r2, r5
  403100:	17f7      	asrs	r7, r6, #31
  403102:	3204      	adds	r2, #4
  403104:	4630      	mov	r0, r6
  403106:	4639      	mov	r1, r7
  403108:	9207      	str	r2, [sp, #28]
  40310a:	2800      	cmp	r0, #0
  40310c:	f171 0200 	sbcs.w	r2, r1, #0
  403110:	f2c0 835d 	blt.w	4037ce <_vfiprintf_r+0xb4e>
  403114:	1c61      	adds	r1, r4, #1
  403116:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40311a:	f04f 0201 	mov.w	r2, #1
  40311e:	f47f aeea 	bne.w	402ef6 <_vfiprintf_r+0x276>
  403122:	ea56 0107 	orrs.w	r1, r6, r7
  403126:	f000 824d 	beq.w	4035c4 <_vfiprintf_r+0x944>
  40312a:	9302      	str	r3, [sp, #8]
  40312c:	2a01      	cmp	r2, #1
  40312e:	f000 828c 	beq.w	40364a <_vfiprintf_r+0x9ca>
  403132:	2a02      	cmp	r2, #2
  403134:	f040 825c 	bne.w	4035f0 <_vfiprintf_r+0x970>
  403138:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40313a:	46cb      	mov	fp, r9
  40313c:	0933      	lsrs	r3, r6, #4
  40313e:	f006 010f 	and.w	r1, r6, #15
  403142:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403146:	093a      	lsrs	r2, r7, #4
  403148:	461e      	mov	r6, r3
  40314a:	4617      	mov	r7, r2
  40314c:	5c43      	ldrb	r3, [r0, r1]
  40314e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403152:	ea56 0307 	orrs.w	r3, r6, r7
  403156:	d1f1      	bne.n	40313c <_vfiprintf_r+0x4bc>
  403158:	eba9 030b 	sub.w	r3, r9, fp
  40315c:	9305      	str	r3, [sp, #20]
  40315e:	e6e1      	b.n	402f24 <_vfiprintf_r+0x2a4>
  403160:	2800      	cmp	r0, #0
  403162:	f040 83c0 	bne.w	4038e6 <_vfiprintf_r+0xc66>
  403166:	0699      	lsls	r1, r3, #26
  403168:	f100 8367 	bmi.w	40383a <_vfiprintf_r+0xbba>
  40316c:	06da      	lsls	r2, r3, #27
  40316e:	f100 80f1 	bmi.w	403354 <_vfiprintf_r+0x6d4>
  403172:	065b      	lsls	r3, r3, #25
  403174:	f140 80ee 	bpl.w	403354 <_vfiprintf_r+0x6d4>
  403178:	9a07      	ldr	r2, [sp, #28]
  40317a:	6813      	ldr	r3, [r2, #0]
  40317c:	3204      	adds	r2, #4
  40317e:	9207      	str	r2, [sp, #28]
  403180:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403184:	801a      	strh	r2, [r3, #0]
  403186:	e5b8      	b.n	402cfa <_vfiprintf_r+0x7a>
  403188:	9807      	ldr	r0, [sp, #28]
  40318a:	4a3d      	ldr	r2, [pc, #244]	; (403280 <_vfiprintf_r+0x600>)
  40318c:	9608      	str	r6, [sp, #32]
  40318e:	920b      	str	r2, [sp, #44]	; 0x2c
  403190:	6806      	ldr	r6, [r0, #0]
  403192:	2278      	movs	r2, #120	; 0x78
  403194:	2130      	movs	r1, #48	; 0x30
  403196:	3004      	adds	r0, #4
  403198:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40319c:	f043 0302 	orr.w	r3, r3, #2
  4031a0:	9007      	str	r0, [sp, #28]
  4031a2:	2700      	movs	r7, #0
  4031a4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4031a8:	2202      	movs	r2, #2
  4031aa:	e69c      	b.n	402ee6 <_vfiprintf_r+0x266>
  4031ac:	9608      	str	r6, [sp, #32]
  4031ae:	2800      	cmp	r0, #0
  4031b0:	d099      	beq.n	4030e6 <_vfiprintf_r+0x466>
  4031b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4031b6:	e796      	b.n	4030e6 <_vfiprintf_r+0x466>
  4031b8:	f898 2000 	ldrb.w	r2, [r8]
  4031bc:	2d00      	cmp	r5, #0
  4031be:	f47f add1 	bne.w	402d64 <_vfiprintf_r+0xe4>
  4031c2:	2001      	movs	r0, #1
  4031c4:	2520      	movs	r5, #32
  4031c6:	e5cd      	b.n	402d64 <_vfiprintf_r+0xe4>
  4031c8:	f043 0301 	orr.w	r3, r3, #1
  4031cc:	f898 2000 	ldrb.w	r2, [r8]
  4031d0:	e5c8      	b.n	402d64 <_vfiprintf_r+0xe4>
  4031d2:	9608      	str	r6, [sp, #32]
  4031d4:	2800      	cmp	r0, #0
  4031d6:	f040 8393 	bne.w	403900 <_vfiprintf_r+0xc80>
  4031da:	4929      	ldr	r1, [pc, #164]	; (403280 <_vfiprintf_r+0x600>)
  4031dc:	910b      	str	r1, [sp, #44]	; 0x2c
  4031de:	069f      	lsls	r7, r3, #26
  4031e0:	f100 82e8 	bmi.w	4037b4 <_vfiprintf_r+0xb34>
  4031e4:	9807      	ldr	r0, [sp, #28]
  4031e6:	06de      	lsls	r6, r3, #27
  4031e8:	4601      	mov	r1, r0
  4031ea:	f100 8270 	bmi.w	4036ce <_vfiprintf_r+0xa4e>
  4031ee:	065d      	lsls	r5, r3, #25
  4031f0:	f140 826d 	bpl.w	4036ce <_vfiprintf_r+0xa4e>
  4031f4:	3104      	adds	r1, #4
  4031f6:	8806      	ldrh	r6, [r0, #0]
  4031f8:	9107      	str	r1, [sp, #28]
  4031fa:	2700      	movs	r7, #0
  4031fc:	07d8      	lsls	r0, r3, #31
  4031fe:	f140 8222 	bpl.w	403646 <_vfiprintf_r+0x9c6>
  403202:	ea56 0107 	orrs.w	r1, r6, r7
  403206:	f000 821e 	beq.w	403646 <_vfiprintf_r+0x9c6>
  40320a:	2130      	movs	r1, #48	; 0x30
  40320c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403210:	f043 0302 	orr.w	r3, r3, #2
  403214:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403218:	2202      	movs	r2, #2
  40321a:	e664      	b.n	402ee6 <_vfiprintf_r+0x266>
  40321c:	9608      	str	r6, [sp, #32]
  40321e:	2800      	cmp	r0, #0
  403220:	f040 836b 	bne.w	4038fa <_vfiprintf_r+0xc7a>
  403224:	4917      	ldr	r1, [pc, #92]	; (403284 <_vfiprintf_r+0x604>)
  403226:	910b      	str	r1, [sp, #44]	; 0x2c
  403228:	e7d9      	b.n	4031de <_vfiprintf_r+0x55e>
  40322a:	9907      	ldr	r1, [sp, #28]
  40322c:	9608      	str	r6, [sp, #32]
  40322e:	680a      	ldr	r2, [r1, #0]
  403230:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403234:	f04f 0000 	mov.w	r0, #0
  403238:	460a      	mov	r2, r1
  40323a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40323e:	3204      	adds	r2, #4
  403240:	2001      	movs	r0, #1
  403242:	9001      	str	r0, [sp, #4]
  403244:	9207      	str	r2, [sp, #28]
  403246:	9005      	str	r0, [sp, #20]
  403248:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40324c:	9302      	str	r3, [sp, #8]
  40324e:	2400      	movs	r4, #0
  403250:	e670      	b.n	402f34 <_vfiprintf_r+0x2b4>
  403252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403256:	f898 2000 	ldrb.w	r2, [r8]
  40325a:	e583      	b.n	402d64 <_vfiprintf_r+0xe4>
  40325c:	f898 2000 	ldrb.w	r2, [r8]
  403260:	2a6c      	cmp	r2, #108	; 0x6c
  403262:	bf03      	ittte	eq
  403264:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403268:	f043 0320 	orreq.w	r3, r3, #32
  40326c:	f108 0801 	addeq.w	r8, r8, #1
  403270:	f043 0310 	orrne.w	r3, r3, #16
  403274:	e576      	b.n	402d64 <_vfiprintf_r+0xe4>
  403276:	bf00      	nop
  403278:	004057f0 	.word	0x004057f0
  40327c:	00405800 	.word	0x00405800
  403280:	004057d4 	.word	0x004057d4
  403284:	004057c0 	.word	0x004057c0
  403288:	9907      	ldr	r1, [sp, #28]
  40328a:	680e      	ldr	r6, [r1, #0]
  40328c:	460a      	mov	r2, r1
  40328e:	2e00      	cmp	r6, #0
  403290:	f102 0204 	add.w	r2, r2, #4
  403294:	f6ff ae0f 	blt.w	402eb6 <_vfiprintf_r+0x236>
  403298:	9207      	str	r2, [sp, #28]
  40329a:	f898 2000 	ldrb.w	r2, [r8]
  40329e:	e561      	b.n	402d64 <_vfiprintf_r+0xe4>
  4032a0:	f898 2000 	ldrb.w	r2, [r8]
  4032a4:	2001      	movs	r0, #1
  4032a6:	252b      	movs	r5, #43	; 0x2b
  4032a8:	e55c      	b.n	402d64 <_vfiprintf_r+0xe4>
  4032aa:	9907      	ldr	r1, [sp, #28]
  4032ac:	9608      	str	r6, [sp, #32]
  4032ae:	f8d1 b000 	ldr.w	fp, [r1]
  4032b2:	f04f 0200 	mov.w	r2, #0
  4032b6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4032ba:	1d0e      	adds	r6, r1, #4
  4032bc:	f1bb 0f00 	cmp.w	fp, #0
  4032c0:	f000 82e5 	beq.w	40388e <_vfiprintf_r+0xc0e>
  4032c4:	1c67      	adds	r7, r4, #1
  4032c6:	f000 82c4 	beq.w	403852 <_vfiprintf_r+0xbd2>
  4032ca:	4622      	mov	r2, r4
  4032cc:	2100      	movs	r1, #0
  4032ce:	4658      	mov	r0, fp
  4032d0:	9301      	str	r3, [sp, #4]
  4032d2:	f001 fbd5 	bl	404a80 <memchr>
  4032d6:	9b01      	ldr	r3, [sp, #4]
  4032d8:	2800      	cmp	r0, #0
  4032da:	f000 82e5 	beq.w	4038a8 <_vfiprintf_r+0xc28>
  4032de:	eba0 020b 	sub.w	r2, r0, fp
  4032e2:	9205      	str	r2, [sp, #20]
  4032e4:	9607      	str	r6, [sp, #28]
  4032e6:	9302      	str	r3, [sp, #8]
  4032e8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4032ec:	2400      	movs	r4, #0
  4032ee:	e619      	b.n	402f24 <_vfiprintf_r+0x2a4>
  4032f0:	f898 2000 	ldrb.w	r2, [r8]
  4032f4:	2a2a      	cmp	r2, #42	; 0x2a
  4032f6:	f108 0701 	add.w	r7, r8, #1
  4032fa:	f000 82e9 	beq.w	4038d0 <_vfiprintf_r+0xc50>
  4032fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403302:	2909      	cmp	r1, #9
  403304:	46b8      	mov	r8, r7
  403306:	f04f 0400 	mov.w	r4, #0
  40330a:	f63f ad2d 	bhi.w	402d68 <_vfiprintf_r+0xe8>
  40330e:	f818 2b01 	ldrb.w	r2, [r8], #1
  403312:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403316:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40331a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40331e:	2909      	cmp	r1, #9
  403320:	d9f5      	bls.n	40330e <_vfiprintf_r+0x68e>
  403322:	e521      	b.n	402d68 <_vfiprintf_r+0xe8>
  403324:	f043 0320 	orr.w	r3, r3, #32
  403328:	f898 2000 	ldrb.w	r2, [r8]
  40332c:	e51a      	b.n	402d64 <_vfiprintf_r+0xe4>
  40332e:	9608      	str	r6, [sp, #32]
  403330:	2800      	cmp	r0, #0
  403332:	f040 82db 	bne.w	4038ec <_vfiprintf_r+0xc6c>
  403336:	2a00      	cmp	r2, #0
  403338:	f000 80e7 	beq.w	40350a <_vfiprintf_r+0x88a>
  40333c:	2101      	movs	r1, #1
  40333e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403342:	f04f 0200 	mov.w	r2, #0
  403346:	9101      	str	r1, [sp, #4]
  403348:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40334c:	9105      	str	r1, [sp, #20]
  40334e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403352:	e77b      	b.n	40324c <_vfiprintf_r+0x5cc>
  403354:	9a07      	ldr	r2, [sp, #28]
  403356:	6813      	ldr	r3, [r2, #0]
  403358:	3204      	adds	r2, #4
  40335a:	9207      	str	r2, [sp, #28]
  40335c:	9a03      	ldr	r2, [sp, #12]
  40335e:	601a      	str	r2, [r3, #0]
  403360:	e4cb      	b.n	402cfa <_vfiprintf_r+0x7a>
  403362:	aa0f      	add	r2, sp, #60	; 0x3c
  403364:	9904      	ldr	r1, [sp, #16]
  403366:	4620      	mov	r0, r4
  403368:	f7ff fc4a 	bl	402c00 <__sprint_r.part.0>
  40336c:	2800      	cmp	r0, #0
  40336e:	f040 8139 	bne.w	4035e4 <_vfiprintf_r+0x964>
  403372:	9910      	ldr	r1, [sp, #64]	; 0x40
  403374:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403376:	f101 0c01 	add.w	ip, r1, #1
  40337a:	46ce      	mov	lr, r9
  40337c:	e5ff      	b.n	402f7e <_vfiprintf_r+0x2fe>
  40337e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403380:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403382:	1c48      	adds	r0, r1, #1
  403384:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403388:	2d00      	cmp	r5, #0
  40338a:	f43f ae22 	beq.w	402fd2 <_vfiprintf_r+0x352>
  40338e:	3201      	adds	r2, #1
  403390:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403394:	2101      	movs	r1, #1
  403396:	2807      	cmp	r0, #7
  403398:	9211      	str	r2, [sp, #68]	; 0x44
  40339a:	9010      	str	r0, [sp, #64]	; 0x40
  40339c:	f8ca 5000 	str.w	r5, [sl]
  4033a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4033a4:	f340 8108 	ble.w	4035b8 <_vfiprintf_r+0x938>
  4033a8:	2a00      	cmp	r2, #0
  4033aa:	f040 81bc 	bne.w	403726 <_vfiprintf_r+0xaa6>
  4033ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4033b0:	2b00      	cmp	r3, #0
  4033b2:	f43f ae1f 	beq.w	402ff4 <_vfiprintf_r+0x374>
  4033b6:	ab0e      	add	r3, sp, #56	; 0x38
  4033b8:	2202      	movs	r2, #2
  4033ba:	4608      	mov	r0, r1
  4033bc:	931c      	str	r3, [sp, #112]	; 0x70
  4033be:	921d      	str	r2, [sp, #116]	; 0x74
  4033c0:	46ca      	mov	sl, r9
  4033c2:	4601      	mov	r1, r0
  4033c4:	f10a 0a08 	add.w	sl, sl, #8
  4033c8:	3001      	adds	r0, #1
  4033ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4033cc:	2b80      	cmp	r3, #128	; 0x80
  4033ce:	f43f ae19 	beq.w	403004 <_vfiprintf_r+0x384>
  4033d2:	9b05      	ldr	r3, [sp, #20]
  4033d4:	1ae4      	subs	r4, r4, r3
  4033d6:	2c00      	cmp	r4, #0
  4033d8:	dd2e      	ble.n	403438 <_vfiprintf_r+0x7b8>
  4033da:	2c10      	cmp	r4, #16
  4033dc:	4db3      	ldr	r5, [pc, #716]	; (4036ac <_vfiprintf_r+0xa2c>)
  4033de:	dd1e      	ble.n	40341e <_vfiprintf_r+0x79e>
  4033e0:	46d6      	mov	lr, sl
  4033e2:	2610      	movs	r6, #16
  4033e4:	9f06      	ldr	r7, [sp, #24]
  4033e6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4033ea:	e006      	b.n	4033fa <_vfiprintf_r+0x77a>
  4033ec:	1c88      	adds	r0, r1, #2
  4033ee:	f10e 0e08 	add.w	lr, lr, #8
  4033f2:	4619      	mov	r1, r3
  4033f4:	3c10      	subs	r4, #16
  4033f6:	2c10      	cmp	r4, #16
  4033f8:	dd10      	ble.n	40341c <_vfiprintf_r+0x79c>
  4033fa:	1c4b      	adds	r3, r1, #1
  4033fc:	3210      	adds	r2, #16
  4033fe:	2b07      	cmp	r3, #7
  403400:	9211      	str	r2, [sp, #68]	; 0x44
  403402:	e88e 0060 	stmia.w	lr, {r5, r6}
  403406:	9310      	str	r3, [sp, #64]	; 0x40
  403408:	ddf0      	ble.n	4033ec <_vfiprintf_r+0x76c>
  40340a:	2a00      	cmp	r2, #0
  40340c:	d165      	bne.n	4034da <_vfiprintf_r+0x85a>
  40340e:	3c10      	subs	r4, #16
  403410:	2c10      	cmp	r4, #16
  403412:	f04f 0001 	mov.w	r0, #1
  403416:	4611      	mov	r1, r2
  403418:	46ce      	mov	lr, r9
  40341a:	dcee      	bgt.n	4033fa <_vfiprintf_r+0x77a>
  40341c:	46f2      	mov	sl, lr
  40341e:	4422      	add	r2, r4
  403420:	2807      	cmp	r0, #7
  403422:	9211      	str	r2, [sp, #68]	; 0x44
  403424:	f8ca 5000 	str.w	r5, [sl]
  403428:	f8ca 4004 	str.w	r4, [sl, #4]
  40342c:	9010      	str	r0, [sp, #64]	; 0x40
  40342e:	f300 8085 	bgt.w	40353c <_vfiprintf_r+0x8bc>
  403432:	f10a 0a08 	add.w	sl, sl, #8
  403436:	3001      	adds	r0, #1
  403438:	9905      	ldr	r1, [sp, #20]
  40343a:	f8ca b000 	str.w	fp, [sl]
  40343e:	440a      	add	r2, r1
  403440:	2807      	cmp	r0, #7
  403442:	9211      	str	r2, [sp, #68]	; 0x44
  403444:	f8ca 1004 	str.w	r1, [sl, #4]
  403448:	9010      	str	r0, [sp, #64]	; 0x40
  40344a:	f340 8082 	ble.w	403552 <_vfiprintf_r+0x8d2>
  40344e:	2a00      	cmp	r2, #0
  403450:	f040 8118 	bne.w	403684 <_vfiprintf_r+0xa04>
  403454:	9b02      	ldr	r3, [sp, #8]
  403456:	9210      	str	r2, [sp, #64]	; 0x40
  403458:	0758      	lsls	r0, r3, #29
  40345a:	d535      	bpl.n	4034c8 <_vfiprintf_r+0x848>
  40345c:	9b08      	ldr	r3, [sp, #32]
  40345e:	9901      	ldr	r1, [sp, #4]
  403460:	1a5c      	subs	r4, r3, r1
  403462:	2c00      	cmp	r4, #0
  403464:	f340 80e7 	ble.w	403636 <_vfiprintf_r+0x9b6>
  403468:	46ca      	mov	sl, r9
  40346a:	2c10      	cmp	r4, #16
  40346c:	f340 8218 	ble.w	4038a0 <_vfiprintf_r+0xc20>
  403470:	9910      	ldr	r1, [sp, #64]	; 0x40
  403472:	4e8f      	ldr	r6, [pc, #572]	; (4036b0 <_vfiprintf_r+0xa30>)
  403474:	9f06      	ldr	r7, [sp, #24]
  403476:	f8dd b010 	ldr.w	fp, [sp, #16]
  40347a:	2510      	movs	r5, #16
  40347c:	e006      	b.n	40348c <_vfiprintf_r+0x80c>
  40347e:	1c88      	adds	r0, r1, #2
  403480:	f10a 0a08 	add.w	sl, sl, #8
  403484:	4619      	mov	r1, r3
  403486:	3c10      	subs	r4, #16
  403488:	2c10      	cmp	r4, #16
  40348a:	dd11      	ble.n	4034b0 <_vfiprintf_r+0x830>
  40348c:	1c4b      	adds	r3, r1, #1
  40348e:	3210      	adds	r2, #16
  403490:	2b07      	cmp	r3, #7
  403492:	9211      	str	r2, [sp, #68]	; 0x44
  403494:	f8ca 6000 	str.w	r6, [sl]
  403498:	f8ca 5004 	str.w	r5, [sl, #4]
  40349c:	9310      	str	r3, [sp, #64]	; 0x40
  40349e:	ddee      	ble.n	40347e <_vfiprintf_r+0x7fe>
  4034a0:	bb42      	cbnz	r2, 4034f4 <_vfiprintf_r+0x874>
  4034a2:	3c10      	subs	r4, #16
  4034a4:	2c10      	cmp	r4, #16
  4034a6:	f04f 0001 	mov.w	r0, #1
  4034aa:	4611      	mov	r1, r2
  4034ac:	46ca      	mov	sl, r9
  4034ae:	dced      	bgt.n	40348c <_vfiprintf_r+0x80c>
  4034b0:	4422      	add	r2, r4
  4034b2:	2807      	cmp	r0, #7
  4034b4:	9211      	str	r2, [sp, #68]	; 0x44
  4034b6:	f8ca 6000 	str.w	r6, [sl]
  4034ba:	f8ca 4004 	str.w	r4, [sl, #4]
  4034be:	9010      	str	r0, [sp, #64]	; 0x40
  4034c0:	dd51      	ble.n	403566 <_vfiprintf_r+0x8e6>
  4034c2:	2a00      	cmp	r2, #0
  4034c4:	f040 819b 	bne.w	4037fe <_vfiprintf_r+0xb7e>
  4034c8:	9b03      	ldr	r3, [sp, #12]
  4034ca:	9a08      	ldr	r2, [sp, #32]
  4034cc:	9901      	ldr	r1, [sp, #4]
  4034ce:	428a      	cmp	r2, r1
  4034d0:	bfac      	ite	ge
  4034d2:	189b      	addge	r3, r3, r2
  4034d4:	185b      	addlt	r3, r3, r1
  4034d6:	9303      	str	r3, [sp, #12]
  4034d8:	e04e      	b.n	403578 <_vfiprintf_r+0x8f8>
  4034da:	aa0f      	add	r2, sp, #60	; 0x3c
  4034dc:	4651      	mov	r1, sl
  4034de:	4638      	mov	r0, r7
  4034e0:	f7ff fb8e 	bl	402c00 <__sprint_r.part.0>
  4034e4:	2800      	cmp	r0, #0
  4034e6:	f040 813f 	bne.w	403768 <_vfiprintf_r+0xae8>
  4034ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4034ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4034ee:	1c48      	adds	r0, r1, #1
  4034f0:	46ce      	mov	lr, r9
  4034f2:	e77f      	b.n	4033f4 <_vfiprintf_r+0x774>
  4034f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4034f6:	4659      	mov	r1, fp
  4034f8:	4638      	mov	r0, r7
  4034fa:	f7ff fb81 	bl	402c00 <__sprint_r.part.0>
  4034fe:	b960      	cbnz	r0, 40351a <_vfiprintf_r+0x89a>
  403500:	9910      	ldr	r1, [sp, #64]	; 0x40
  403502:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403504:	1c48      	adds	r0, r1, #1
  403506:	46ca      	mov	sl, r9
  403508:	e7bd      	b.n	403486 <_vfiprintf_r+0x806>
  40350a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40350c:	f8dd b010 	ldr.w	fp, [sp, #16]
  403510:	2b00      	cmp	r3, #0
  403512:	f040 81d4 	bne.w	4038be <_vfiprintf_r+0xc3e>
  403516:	2300      	movs	r3, #0
  403518:	9310      	str	r3, [sp, #64]	; 0x40
  40351a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40351e:	f013 0f01 	tst.w	r3, #1
  403522:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403526:	d102      	bne.n	40352e <_vfiprintf_r+0x8ae>
  403528:	059a      	lsls	r2, r3, #22
  40352a:	f140 80de 	bpl.w	4036ea <_vfiprintf_r+0xa6a>
  40352e:	065b      	lsls	r3, r3, #25
  403530:	f53f acb2 	bmi.w	402e98 <_vfiprintf_r+0x218>
  403534:	9803      	ldr	r0, [sp, #12]
  403536:	b02d      	add	sp, #180	; 0xb4
  403538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40353c:	2a00      	cmp	r2, #0
  40353e:	f040 8106 	bne.w	40374e <_vfiprintf_r+0xace>
  403542:	9a05      	ldr	r2, [sp, #20]
  403544:	921d      	str	r2, [sp, #116]	; 0x74
  403546:	2301      	movs	r3, #1
  403548:	9211      	str	r2, [sp, #68]	; 0x44
  40354a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40354e:	9310      	str	r3, [sp, #64]	; 0x40
  403550:	46ca      	mov	sl, r9
  403552:	f10a 0a08 	add.w	sl, sl, #8
  403556:	9b02      	ldr	r3, [sp, #8]
  403558:	0759      	lsls	r1, r3, #29
  40355a:	d504      	bpl.n	403566 <_vfiprintf_r+0x8e6>
  40355c:	9b08      	ldr	r3, [sp, #32]
  40355e:	9901      	ldr	r1, [sp, #4]
  403560:	1a5c      	subs	r4, r3, r1
  403562:	2c00      	cmp	r4, #0
  403564:	dc81      	bgt.n	40346a <_vfiprintf_r+0x7ea>
  403566:	9b03      	ldr	r3, [sp, #12]
  403568:	9908      	ldr	r1, [sp, #32]
  40356a:	9801      	ldr	r0, [sp, #4]
  40356c:	4281      	cmp	r1, r0
  40356e:	bfac      	ite	ge
  403570:	185b      	addge	r3, r3, r1
  403572:	181b      	addlt	r3, r3, r0
  403574:	9303      	str	r3, [sp, #12]
  403576:	bb72      	cbnz	r2, 4035d6 <_vfiprintf_r+0x956>
  403578:	2300      	movs	r3, #0
  40357a:	9310      	str	r3, [sp, #64]	; 0x40
  40357c:	46ca      	mov	sl, r9
  40357e:	f7ff bbbc 	b.w	402cfa <_vfiprintf_r+0x7a>
  403582:	aa0f      	add	r2, sp, #60	; 0x3c
  403584:	9904      	ldr	r1, [sp, #16]
  403586:	4620      	mov	r0, r4
  403588:	f7ff fb3a 	bl	402c00 <__sprint_r.part.0>
  40358c:	bb50      	cbnz	r0, 4035e4 <_vfiprintf_r+0x964>
  40358e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403590:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403592:	f101 0e01 	add.w	lr, r1, #1
  403596:	46cc      	mov	ip, r9
  403598:	e548      	b.n	40302c <_vfiprintf_r+0x3ac>
  40359a:	2a00      	cmp	r2, #0
  40359c:	f040 8140 	bne.w	403820 <_vfiprintf_r+0xba0>
  4035a0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4035a4:	2900      	cmp	r1, #0
  4035a6:	f000 811b 	beq.w	4037e0 <_vfiprintf_r+0xb60>
  4035aa:	2201      	movs	r2, #1
  4035ac:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4035b0:	4610      	mov	r0, r2
  4035b2:	921d      	str	r2, [sp, #116]	; 0x74
  4035b4:	911c      	str	r1, [sp, #112]	; 0x70
  4035b6:	46ca      	mov	sl, r9
  4035b8:	4601      	mov	r1, r0
  4035ba:	f10a 0a08 	add.w	sl, sl, #8
  4035be:	3001      	adds	r0, #1
  4035c0:	e507      	b.n	402fd2 <_vfiprintf_r+0x352>
  4035c2:	9b02      	ldr	r3, [sp, #8]
  4035c4:	2a01      	cmp	r2, #1
  4035c6:	f000 8098 	beq.w	4036fa <_vfiprintf_r+0xa7a>
  4035ca:	2a02      	cmp	r2, #2
  4035cc:	d10d      	bne.n	4035ea <_vfiprintf_r+0x96a>
  4035ce:	9302      	str	r3, [sp, #8]
  4035d0:	2600      	movs	r6, #0
  4035d2:	2700      	movs	r7, #0
  4035d4:	e5b0      	b.n	403138 <_vfiprintf_r+0x4b8>
  4035d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4035d8:	9904      	ldr	r1, [sp, #16]
  4035da:	9806      	ldr	r0, [sp, #24]
  4035dc:	f7ff fb10 	bl	402c00 <__sprint_r.part.0>
  4035e0:	2800      	cmp	r0, #0
  4035e2:	d0c9      	beq.n	403578 <_vfiprintf_r+0x8f8>
  4035e4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4035e8:	e797      	b.n	40351a <_vfiprintf_r+0x89a>
  4035ea:	9302      	str	r3, [sp, #8]
  4035ec:	2600      	movs	r6, #0
  4035ee:	2700      	movs	r7, #0
  4035f0:	4649      	mov	r1, r9
  4035f2:	e000      	b.n	4035f6 <_vfiprintf_r+0x976>
  4035f4:	4659      	mov	r1, fp
  4035f6:	08f2      	lsrs	r2, r6, #3
  4035f8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4035fc:	08f8      	lsrs	r0, r7, #3
  4035fe:	f006 0307 	and.w	r3, r6, #7
  403602:	4607      	mov	r7, r0
  403604:	4616      	mov	r6, r2
  403606:	3330      	adds	r3, #48	; 0x30
  403608:	ea56 0207 	orrs.w	r2, r6, r7
  40360c:	f801 3c01 	strb.w	r3, [r1, #-1]
  403610:	f101 3bff 	add.w	fp, r1, #4294967295
  403614:	d1ee      	bne.n	4035f4 <_vfiprintf_r+0x974>
  403616:	9a02      	ldr	r2, [sp, #8]
  403618:	07d6      	lsls	r6, r2, #31
  40361a:	f57f ad9d 	bpl.w	403158 <_vfiprintf_r+0x4d8>
  40361e:	2b30      	cmp	r3, #48	; 0x30
  403620:	f43f ad9a 	beq.w	403158 <_vfiprintf_r+0x4d8>
  403624:	3902      	subs	r1, #2
  403626:	2330      	movs	r3, #48	; 0x30
  403628:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40362c:	eba9 0301 	sub.w	r3, r9, r1
  403630:	9305      	str	r3, [sp, #20]
  403632:	468b      	mov	fp, r1
  403634:	e476      	b.n	402f24 <_vfiprintf_r+0x2a4>
  403636:	9b03      	ldr	r3, [sp, #12]
  403638:	9a08      	ldr	r2, [sp, #32]
  40363a:	428a      	cmp	r2, r1
  40363c:	bfac      	ite	ge
  40363e:	189b      	addge	r3, r3, r2
  403640:	185b      	addlt	r3, r3, r1
  403642:	9303      	str	r3, [sp, #12]
  403644:	e798      	b.n	403578 <_vfiprintf_r+0x8f8>
  403646:	2202      	movs	r2, #2
  403648:	e44d      	b.n	402ee6 <_vfiprintf_r+0x266>
  40364a:	2f00      	cmp	r7, #0
  40364c:	bf08      	it	eq
  40364e:	2e0a      	cmpeq	r6, #10
  403650:	d352      	bcc.n	4036f8 <_vfiprintf_r+0xa78>
  403652:	46cb      	mov	fp, r9
  403654:	4630      	mov	r0, r6
  403656:	4639      	mov	r1, r7
  403658:	220a      	movs	r2, #10
  40365a:	2300      	movs	r3, #0
  40365c:	f001 fe9a 	bl	405394 <__aeabi_uldivmod>
  403660:	3230      	adds	r2, #48	; 0x30
  403662:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403666:	4630      	mov	r0, r6
  403668:	4639      	mov	r1, r7
  40366a:	2300      	movs	r3, #0
  40366c:	220a      	movs	r2, #10
  40366e:	f001 fe91 	bl	405394 <__aeabi_uldivmod>
  403672:	4606      	mov	r6, r0
  403674:	460f      	mov	r7, r1
  403676:	ea56 0307 	orrs.w	r3, r6, r7
  40367a:	d1eb      	bne.n	403654 <_vfiprintf_r+0x9d4>
  40367c:	e56c      	b.n	403158 <_vfiprintf_r+0x4d8>
  40367e:	9405      	str	r4, [sp, #20]
  403680:	46cb      	mov	fp, r9
  403682:	e44f      	b.n	402f24 <_vfiprintf_r+0x2a4>
  403684:	aa0f      	add	r2, sp, #60	; 0x3c
  403686:	9904      	ldr	r1, [sp, #16]
  403688:	9806      	ldr	r0, [sp, #24]
  40368a:	f7ff fab9 	bl	402c00 <__sprint_r.part.0>
  40368e:	2800      	cmp	r0, #0
  403690:	d1a8      	bne.n	4035e4 <_vfiprintf_r+0x964>
  403692:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403694:	46ca      	mov	sl, r9
  403696:	e75e      	b.n	403556 <_vfiprintf_r+0x8d6>
  403698:	aa0f      	add	r2, sp, #60	; 0x3c
  40369a:	9904      	ldr	r1, [sp, #16]
  40369c:	9806      	ldr	r0, [sp, #24]
  40369e:	f7ff faaf 	bl	402c00 <__sprint_r.part.0>
  4036a2:	2800      	cmp	r0, #0
  4036a4:	d19e      	bne.n	4035e4 <_vfiprintf_r+0x964>
  4036a6:	46ca      	mov	sl, r9
  4036a8:	f7ff bbc0 	b.w	402e2c <_vfiprintf_r+0x1ac>
  4036ac:	00405800 	.word	0x00405800
  4036b0:	004057f0 	.word	0x004057f0
  4036b4:	3104      	adds	r1, #4
  4036b6:	6816      	ldr	r6, [r2, #0]
  4036b8:	9107      	str	r1, [sp, #28]
  4036ba:	2201      	movs	r2, #1
  4036bc:	2700      	movs	r7, #0
  4036be:	e412      	b.n	402ee6 <_vfiprintf_r+0x266>
  4036c0:	9807      	ldr	r0, [sp, #28]
  4036c2:	4601      	mov	r1, r0
  4036c4:	3104      	adds	r1, #4
  4036c6:	6806      	ldr	r6, [r0, #0]
  4036c8:	9107      	str	r1, [sp, #28]
  4036ca:	2700      	movs	r7, #0
  4036cc:	e40b      	b.n	402ee6 <_vfiprintf_r+0x266>
  4036ce:	680e      	ldr	r6, [r1, #0]
  4036d0:	3104      	adds	r1, #4
  4036d2:	9107      	str	r1, [sp, #28]
  4036d4:	2700      	movs	r7, #0
  4036d6:	e591      	b.n	4031fc <_vfiprintf_r+0x57c>
  4036d8:	9907      	ldr	r1, [sp, #28]
  4036da:	680e      	ldr	r6, [r1, #0]
  4036dc:	460a      	mov	r2, r1
  4036de:	17f7      	asrs	r7, r6, #31
  4036e0:	3204      	adds	r2, #4
  4036e2:	9207      	str	r2, [sp, #28]
  4036e4:	4630      	mov	r0, r6
  4036e6:	4639      	mov	r1, r7
  4036e8:	e50f      	b.n	40310a <_vfiprintf_r+0x48a>
  4036ea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4036ee:	f000 fe7f 	bl	4043f0 <__retarget_lock_release_recursive>
  4036f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4036f6:	e71a      	b.n	40352e <_vfiprintf_r+0x8ae>
  4036f8:	9b02      	ldr	r3, [sp, #8]
  4036fa:	9302      	str	r3, [sp, #8]
  4036fc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403700:	3630      	adds	r6, #48	; 0x30
  403702:	2301      	movs	r3, #1
  403704:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403708:	9305      	str	r3, [sp, #20]
  40370a:	e40b      	b.n	402f24 <_vfiprintf_r+0x2a4>
  40370c:	aa0f      	add	r2, sp, #60	; 0x3c
  40370e:	9904      	ldr	r1, [sp, #16]
  403710:	9806      	ldr	r0, [sp, #24]
  403712:	f7ff fa75 	bl	402c00 <__sprint_r.part.0>
  403716:	2800      	cmp	r0, #0
  403718:	f47f af64 	bne.w	4035e4 <_vfiprintf_r+0x964>
  40371c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40371e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403720:	1c48      	adds	r0, r1, #1
  403722:	46ca      	mov	sl, r9
  403724:	e651      	b.n	4033ca <_vfiprintf_r+0x74a>
  403726:	aa0f      	add	r2, sp, #60	; 0x3c
  403728:	9904      	ldr	r1, [sp, #16]
  40372a:	9806      	ldr	r0, [sp, #24]
  40372c:	f7ff fa68 	bl	402c00 <__sprint_r.part.0>
  403730:	2800      	cmp	r0, #0
  403732:	f47f af57 	bne.w	4035e4 <_vfiprintf_r+0x964>
  403736:	9910      	ldr	r1, [sp, #64]	; 0x40
  403738:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40373a:	1c48      	adds	r0, r1, #1
  40373c:	46ca      	mov	sl, r9
  40373e:	e448      	b.n	402fd2 <_vfiprintf_r+0x352>
  403740:	2a00      	cmp	r2, #0
  403742:	f040 8091 	bne.w	403868 <_vfiprintf_r+0xbe8>
  403746:	2001      	movs	r0, #1
  403748:	4611      	mov	r1, r2
  40374a:	46ca      	mov	sl, r9
  40374c:	e641      	b.n	4033d2 <_vfiprintf_r+0x752>
  40374e:	aa0f      	add	r2, sp, #60	; 0x3c
  403750:	9904      	ldr	r1, [sp, #16]
  403752:	9806      	ldr	r0, [sp, #24]
  403754:	f7ff fa54 	bl	402c00 <__sprint_r.part.0>
  403758:	2800      	cmp	r0, #0
  40375a:	f47f af43 	bne.w	4035e4 <_vfiprintf_r+0x964>
  40375e:	9810      	ldr	r0, [sp, #64]	; 0x40
  403760:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403762:	3001      	adds	r0, #1
  403764:	46ca      	mov	sl, r9
  403766:	e667      	b.n	403438 <_vfiprintf_r+0x7b8>
  403768:	46d3      	mov	fp, sl
  40376a:	e6d6      	b.n	40351a <_vfiprintf_r+0x89a>
  40376c:	9e07      	ldr	r6, [sp, #28]
  40376e:	3607      	adds	r6, #7
  403770:	f026 0207 	bic.w	r2, r6, #7
  403774:	f102 0108 	add.w	r1, r2, #8
  403778:	e9d2 6700 	ldrd	r6, r7, [r2]
  40377c:	9107      	str	r1, [sp, #28]
  40377e:	2201      	movs	r2, #1
  403780:	f7ff bbb1 	b.w	402ee6 <_vfiprintf_r+0x266>
  403784:	9e07      	ldr	r6, [sp, #28]
  403786:	3607      	adds	r6, #7
  403788:	f026 0607 	bic.w	r6, r6, #7
  40378c:	e9d6 0100 	ldrd	r0, r1, [r6]
  403790:	f106 0208 	add.w	r2, r6, #8
  403794:	9207      	str	r2, [sp, #28]
  403796:	4606      	mov	r6, r0
  403798:	460f      	mov	r7, r1
  40379a:	e4b6      	b.n	40310a <_vfiprintf_r+0x48a>
  40379c:	9e07      	ldr	r6, [sp, #28]
  40379e:	3607      	adds	r6, #7
  4037a0:	f026 0207 	bic.w	r2, r6, #7
  4037a4:	f102 0108 	add.w	r1, r2, #8
  4037a8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4037ac:	9107      	str	r1, [sp, #28]
  4037ae:	2200      	movs	r2, #0
  4037b0:	f7ff bb99 	b.w	402ee6 <_vfiprintf_r+0x266>
  4037b4:	9e07      	ldr	r6, [sp, #28]
  4037b6:	3607      	adds	r6, #7
  4037b8:	f026 0107 	bic.w	r1, r6, #7
  4037bc:	f101 0008 	add.w	r0, r1, #8
  4037c0:	9007      	str	r0, [sp, #28]
  4037c2:	e9d1 6700 	ldrd	r6, r7, [r1]
  4037c6:	e519      	b.n	4031fc <_vfiprintf_r+0x57c>
  4037c8:	46cb      	mov	fp, r9
  4037ca:	f7ff bbab 	b.w	402f24 <_vfiprintf_r+0x2a4>
  4037ce:	252d      	movs	r5, #45	; 0x2d
  4037d0:	4276      	negs	r6, r6
  4037d2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4037d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4037da:	2201      	movs	r2, #1
  4037dc:	f7ff bb88 	b.w	402ef0 <_vfiprintf_r+0x270>
  4037e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037e2:	b9b3      	cbnz	r3, 403812 <_vfiprintf_r+0xb92>
  4037e4:	4611      	mov	r1, r2
  4037e6:	2001      	movs	r0, #1
  4037e8:	46ca      	mov	sl, r9
  4037ea:	e5f2      	b.n	4033d2 <_vfiprintf_r+0x752>
  4037ec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4037f0:	f000 fdfe 	bl	4043f0 <__retarget_lock_release_recursive>
  4037f4:	f04f 33ff 	mov.w	r3, #4294967295
  4037f8:	9303      	str	r3, [sp, #12]
  4037fa:	f7ff bb50 	b.w	402e9e <_vfiprintf_r+0x21e>
  4037fe:	aa0f      	add	r2, sp, #60	; 0x3c
  403800:	9904      	ldr	r1, [sp, #16]
  403802:	9806      	ldr	r0, [sp, #24]
  403804:	f7ff f9fc 	bl	402c00 <__sprint_r.part.0>
  403808:	2800      	cmp	r0, #0
  40380a:	f47f aeeb 	bne.w	4035e4 <_vfiprintf_r+0x964>
  40380e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403810:	e6a9      	b.n	403566 <_vfiprintf_r+0x8e6>
  403812:	ab0e      	add	r3, sp, #56	; 0x38
  403814:	2202      	movs	r2, #2
  403816:	931c      	str	r3, [sp, #112]	; 0x70
  403818:	921d      	str	r2, [sp, #116]	; 0x74
  40381a:	2001      	movs	r0, #1
  40381c:	46ca      	mov	sl, r9
  40381e:	e5d0      	b.n	4033c2 <_vfiprintf_r+0x742>
  403820:	aa0f      	add	r2, sp, #60	; 0x3c
  403822:	9904      	ldr	r1, [sp, #16]
  403824:	9806      	ldr	r0, [sp, #24]
  403826:	f7ff f9eb 	bl	402c00 <__sprint_r.part.0>
  40382a:	2800      	cmp	r0, #0
  40382c:	f47f aeda 	bne.w	4035e4 <_vfiprintf_r+0x964>
  403830:	9910      	ldr	r1, [sp, #64]	; 0x40
  403832:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403834:	1c48      	adds	r0, r1, #1
  403836:	46ca      	mov	sl, r9
  403838:	e5a4      	b.n	403384 <_vfiprintf_r+0x704>
  40383a:	9a07      	ldr	r2, [sp, #28]
  40383c:	9903      	ldr	r1, [sp, #12]
  40383e:	6813      	ldr	r3, [r2, #0]
  403840:	17cd      	asrs	r5, r1, #31
  403842:	4608      	mov	r0, r1
  403844:	3204      	adds	r2, #4
  403846:	4629      	mov	r1, r5
  403848:	9207      	str	r2, [sp, #28]
  40384a:	e9c3 0100 	strd	r0, r1, [r3]
  40384e:	f7ff ba54 	b.w	402cfa <_vfiprintf_r+0x7a>
  403852:	4658      	mov	r0, fp
  403854:	9607      	str	r6, [sp, #28]
  403856:	9302      	str	r3, [sp, #8]
  403858:	f7ff f932 	bl	402ac0 <strlen>
  40385c:	2400      	movs	r4, #0
  40385e:	9005      	str	r0, [sp, #20]
  403860:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403864:	f7ff bb5e 	b.w	402f24 <_vfiprintf_r+0x2a4>
  403868:	aa0f      	add	r2, sp, #60	; 0x3c
  40386a:	9904      	ldr	r1, [sp, #16]
  40386c:	9806      	ldr	r0, [sp, #24]
  40386e:	f7ff f9c7 	bl	402c00 <__sprint_r.part.0>
  403872:	2800      	cmp	r0, #0
  403874:	f47f aeb6 	bne.w	4035e4 <_vfiprintf_r+0x964>
  403878:	9910      	ldr	r1, [sp, #64]	; 0x40
  40387a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40387c:	1c48      	adds	r0, r1, #1
  40387e:	46ca      	mov	sl, r9
  403880:	e5a7      	b.n	4033d2 <_vfiprintf_r+0x752>
  403882:	9910      	ldr	r1, [sp, #64]	; 0x40
  403884:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403886:	4e20      	ldr	r6, [pc, #128]	; (403908 <_vfiprintf_r+0xc88>)
  403888:	3101      	adds	r1, #1
  40388a:	f7ff bb90 	b.w	402fae <_vfiprintf_r+0x32e>
  40388e:	2c06      	cmp	r4, #6
  403890:	bf28      	it	cs
  403892:	2406      	movcs	r4, #6
  403894:	9405      	str	r4, [sp, #20]
  403896:	9607      	str	r6, [sp, #28]
  403898:	9401      	str	r4, [sp, #4]
  40389a:	f8df b070 	ldr.w	fp, [pc, #112]	; 40390c <_vfiprintf_r+0xc8c>
  40389e:	e4d5      	b.n	40324c <_vfiprintf_r+0x5cc>
  4038a0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4038a2:	4e19      	ldr	r6, [pc, #100]	; (403908 <_vfiprintf_r+0xc88>)
  4038a4:	3001      	adds	r0, #1
  4038a6:	e603      	b.n	4034b0 <_vfiprintf_r+0x830>
  4038a8:	9405      	str	r4, [sp, #20]
  4038aa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4038ae:	9607      	str	r6, [sp, #28]
  4038b0:	9302      	str	r3, [sp, #8]
  4038b2:	4604      	mov	r4, r0
  4038b4:	f7ff bb36 	b.w	402f24 <_vfiprintf_r+0x2a4>
  4038b8:	4686      	mov	lr, r0
  4038ba:	f7ff bbce 	b.w	40305a <_vfiprintf_r+0x3da>
  4038be:	9806      	ldr	r0, [sp, #24]
  4038c0:	aa0f      	add	r2, sp, #60	; 0x3c
  4038c2:	4659      	mov	r1, fp
  4038c4:	f7ff f99c 	bl	402c00 <__sprint_r.part.0>
  4038c8:	2800      	cmp	r0, #0
  4038ca:	f43f ae24 	beq.w	403516 <_vfiprintf_r+0x896>
  4038ce:	e624      	b.n	40351a <_vfiprintf_r+0x89a>
  4038d0:	9907      	ldr	r1, [sp, #28]
  4038d2:	f898 2001 	ldrb.w	r2, [r8, #1]
  4038d6:	680c      	ldr	r4, [r1, #0]
  4038d8:	3104      	adds	r1, #4
  4038da:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4038de:	46b8      	mov	r8, r7
  4038e0:	9107      	str	r1, [sp, #28]
  4038e2:	f7ff ba3f 	b.w	402d64 <_vfiprintf_r+0xe4>
  4038e6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4038ea:	e43c      	b.n	403166 <_vfiprintf_r+0x4e6>
  4038ec:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4038f0:	e521      	b.n	403336 <_vfiprintf_r+0x6b6>
  4038f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4038f6:	f7ff bbf4 	b.w	4030e2 <_vfiprintf_r+0x462>
  4038fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4038fe:	e491      	b.n	403224 <_vfiprintf_r+0x5a4>
  403900:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403904:	e469      	b.n	4031da <_vfiprintf_r+0x55a>
  403906:	bf00      	nop
  403908:	004057f0 	.word	0x004057f0
  40390c:	004057e8 	.word	0x004057e8

00403910 <__sbprintf>:
  403910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403914:	460c      	mov	r4, r1
  403916:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40391a:	8989      	ldrh	r1, [r1, #12]
  40391c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40391e:	89e5      	ldrh	r5, [r4, #14]
  403920:	9619      	str	r6, [sp, #100]	; 0x64
  403922:	f021 0102 	bic.w	r1, r1, #2
  403926:	4606      	mov	r6, r0
  403928:	69e0      	ldr	r0, [r4, #28]
  40392a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40392e:	4617      	mov	r7, r2
  403930:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403934:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403936:	f8ad 500e 	strh.w	r5, [sp, #14]
  40393a:	4698      	mov	r8, r3
  40393c:	ad1a      	add	r5, sp, #104	; 0x68
  40393e:	2300      	movs	r3, #0
  403940:	9007      	str	r0, [sp, #28]
  403942:	a816      	add	r0, sp, #88	; 0x58
  403944:	9209      	str	r2, [sp, #36]	; 0x24
  403946:	9306      	str	r3, [sp, #24]
  403948:	9500      	str	r5, [sp, #0]
  40394a:	9504      	str	r5, [sp, #16]
  40394c:	9102      	str	r1, [sp, #8]
  40394e:	9105      	str	r1, [sp, #20]
  403950:	f000 fd48 	bl	4043e4 <__retarget_lock_init_recursive>
  403954:	4643      	mov	r3, r8
  403956:	463a      	mov	r2, r7
  403958:	4669      	mov	r1, sp
  40395a:	4630      	mov	r0, r6
  40395c:	f7ff f990 	bl	402c80 <_vfiprintf_r>
  403960:	1e05      	subs	r5, r0, #0
  403962:	db07      	blt.n	403974 <__sbprintf+0x64>
  403964:	4630      	mov	r0, r6
  403966:	4669      	mov	r1, sp
  403968:	f000 f928 	bl	403bbc <_fflush_r>
  40396c:	2800      	cmp	r0, #0
  40396e:	bf18      	it	ne
  403970:	f04f 35ff 	movne.w	r5, #4294967295
  403974:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403978:	065b      	lsls	r3, r3, #25
  40397a:	d503      	bpl.n	403984 <__sbprintf+0x74>
  40397c:	89a3      	ldrh	r3, [r4, #12]
  40397e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403982:	81a3      	strh	r3, [r4, #12]
  403984:	9816      	ldr	r0, [sp, #88]	; 0x58
  403986:	f000 fd2f 	bl	4043e8 <__retarget_lock_close_recursive>
  40398a:	4628      	mov	r0, r5
  40398c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403994 <__swsetup_r>:
  403994:	b538      	push	{r3, r4, r5, lr}
  403996:	4b30      	ldr	r3, [pc, #192]	; (403a58 <__swsetup_r+0xc4>)
  403998:	681b      	ldr	r3, [r3, #0]
  40399a:	4605      	mov	r5, r0
  40399c:	460c      	mov	r4, r1
  40399e:	b113      	cbz	r3, 4039a6 <__swsetup_r+0x12>
  4039a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4039a2:	2a00      	cmp	r2, #0
  4039a4:	d038      	beq.n	403a18 <__swsetup_r+0x84>
  4039a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4039aa:	b293      	uxth	r3, r2
  4039ac:	0718      	lsls	r0, r3, #28
  4039ae:	d50c      	bpl.n	4039ca <__swsetup_r+0x36>
  4039b0:	6920      	ldr	r0, [r4, #16]
  4039b2:	b1a8      	cbz	r0, 4039e0 <__swsetup_r+0x4c>
  4039b4:	f013 0201 	ands.w	r2, r3, #1
  4039b8:	d01e      	beq.n	4039f8 <__swsetup_r+0x64>
  4039ba:	6963      	ldr	r3, [r4, #20]
  4039bc:	2200      	movs	r2, #0
  4039be:	425b      	negs	r3, r3
  4039c0:	61a3      	str	r3, [r4, #24]
  4039c2:	60a2      	str	r2, [r4, #8]
  4039c4:	b1f0      	cbz	r0, 403a04 <__swsetup_r+0x70>
  4039c6:	2000      	movs	r0, #0
  4039c8:	bd38      	pop	{r3, r4, r5, pc}
  4039ca:	06d9      	lsls	r1, r3, #27
  4039cc:	d53c      	bpl.n	403a48 <__swsetup_r+0xb4>
  4039ce:	0758      	lsls	r0, r3, #29
  4039d0:	d426      	bmi.n	403a20 <__swsetup_r+0x8c>
  4039d2:	6920      	ldr	r0, [r4, #16]
  4039d4:	f042 0308 	orr.w	r3, r2, #8
  4039d8:	81a3      	strh	r3, [r4, #12]
  4039da:	b29b      	uxth	r3, r3
  4039dc:	2800      	cmp	r0, #0
  4039de:	d1e9      	bne.n	4039b4 <__swsetup_r+0x20>
  4039e0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4039e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4039e8:	d0e4      	beq.n	4039b4 <__swsetup_r+0x20>
  4039ea:	4628      	mov	r0, r5
  4039ec:	4621      	mov	r1, r4
  4039ee:	f000 fd2f 	bl	404450 <__smakebuf_r>
  4039f2:	89a3      	ldrh	r3, [r4, #12]
  4039f4:	6920      	ldr	r0, [r4, #16]
  4039f6:	e7dd      	b.n	4039b4 <__swsetup_r+0x20>
  4039f8:	0799      	lsls	r1, r3, #30
  4039fa:	bf58      	it	pl
  4039fc:	6962      	ldrpl	r2, [r4, #20]
  4039fe:	60a2      	str	r2, [r4, #8]
  403a00:	2800      	cmp	r0, #0
  403a02:	d1e0      	bne.n	4039c6 <__swsetup_r+0x32>
  403a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a08:	061a      	lsls	r2, r3, #24
  403a0a:	d5dd      	bpl.n	4039c8 <__swsetup_r+0x34>
  403a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a10:	81a3      	strh	r3, [r4, #12]
  403a12:	f04f 30ff 	mov.w	r0, #4294967295
  403a16:	bd38      	pop	{r3, r4, r5, pc}
  403a18:	4618      	mov	r0, r3
  403a1a:	f000 f927 	bl	403c6c <__sinit>
  403a1e:	e7c2      	b.n	4039a6 <__swsetup_r+0x12>
  403a20:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a22:	b151      	cbz	r1, 403a3a <__swsetup_r+0xa6>
  403a24:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a28:	4299      	cmp	r1, r3
  403a2a:	d004      	beq.n	403a36 <__swsetup_r+0xa2>
  403a2c:	4628      	mov	r0, r5
  403a2e:	f000 fa43 	bl	403eb8 <_free_r>
  403a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a36:	2300      	movs	r3, #0
  403a38:	6323      	str	r3, [r4, #48]	; 0x30
  403a3a:	2300      	movs	r3, #0
  403a3c:	6920      	ldr	r0, [r4, #16]
  403a3e:	6063      	str	r3, [r4, #4]
  403a40:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403a44:	6020      	str	r0, [r4, #0]
  403a46:	e7c5      	b.n	4039d4 <__swsetup_r+0x40>
  403a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403a4c:	2309      	movs	r3, #9
  403a4e:	602b      	str	r3, [r5, #0]
  403a50:	f04f 30ff 	mov.w	r0, #4294967295
  403a54:	81a2      	strh	r2, [r4, #12]
  403a56:	bd38      	pop	{r3, r4, r5, pc}
  403a58:	20400020 	.word	0x20400020

00403a5c <register_fini>:
  403a5c:	4b02      	ldr	r3, [pc, #8]	; (403a68 <register_fini+0xc>)
  403a5e:	b113      	cbz	r3, 403a66 <register_fini+0xa>
  403a60:	4802      	ldr	r0, [pc, #8]	; (403a6c <register_fini+0x10>)
  403a62:	f000 b805 	b.w	403a70 <atexit>
  403a66:	4770      	bx	lr
  403a68:	00000000 	.word	0x00000000
  403a6c:	00403cdd 	.word	0x00403cdd

00403a70 <atexit>:
  403a70:	2300      	movs	r3, #0
  403a72:	4601      	mov	r1, r0
  403a74:	461a      	mov	r2, r3
  403a76:	4618      	mov	r0, r3
  403a78:	f001 bb64 	b.w	405144 <__register_exitproc>

00403a7c <__sflush_r>:
  403a7c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403a80:	b29a      	uxth	r2, r3
  403a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a86:	460d      	mov	r5, r1
  403a88:	0711      	lsls	r1, r2, #28
  403a8a:	4680      	mov	r8, r0
  403a8c:	d43a      	bmi.n	403b04 <__sflush_r+0x88>
  403a8e:	686a      	ldr	r2, [r5, #4]
  403a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403a94:	2a00      	cmp	r2, #0
  403a96:	81ab      	strh	r3, [r5, #12]
  403a98:	dd6f      	ble.n	403b7a <__sflush_r+0xfe>
  403a9a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403a9c:	2c00      	cmp	r4, #0
  403a9e:	d049      	beq.n	403b34 <__sflush_r+0xb8>
  403aa0:	2200      	movs	r2, #0
  403aa2:	b29b      	uxth	r3, r3
  403aa4:	f8d8 6000 	ldr.w	r6, [r8]
  403aa8:	f8c8 2000 	str.w	r2, [r8]
  403aac:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403ab0:	d067      	beq.n	403b82 <__sflush_r+0x106>
  403ab2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403ab4:	075f      	lsls	r7, r3, #29
  403ab6:	d505      	bpl.n	403ac4 <__sflush_r+0x48>
  403ab8:	6869      	ldr	r1, [r5, #4]
  403aba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403abc:	1a52      	subs	r2, r2, r1
  403abe:	b10b      	cbz	r3, 403ac4 <__sflush_r+0x48>
  403ac0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403ac2:	1ad2      	subs	r2, r2, r3
  403ac4:	2300      	movs	r3, #0
  403ac6:	69e9      	ldr	r1, [r5, #28]
  403ac8:	4640      	mov	r0, r8
  403aca:	47a0      	blx	r4
  403acc:	1c44      	adds	r4, r0, #1
  403ace:	d03c      	beq.n	403b4a <__sflush_r+0xce>
  403ad0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403ad4:	692a      	ldr	r2, [r5, #16]
  403ad6:	602a      	str	r2, [r5, #0]
  403ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403adc:	2200      	movs	r2, #0
  403ade:	81ab      	strh	r3, [r5, #12]
  403ae0:	04db      	lsls	r3, r3, #19
  403ae2:	606a      	str	r2, [r5, #4]
  403ae4:	d447      	bmi.n	403b76 <__sflush_r+0xfa>
  403ae6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403ae8:	f8c8 6000 	str.w	r6, [r8]
  403aec:	b311      	cbz	r1, 403b34 <__sflush_r+0xb8>
  403aee:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403af2:	4299      	cmp	r1, r3
  403af4:	d002      	beq.n	403afc <__sflush_r+0x80>
  403af6:	4640      	mov	r0, r8
  403af8:	f000 f9de 	bl	403eb8 <_free_r>
  403afc:	2000      	movs	r0, #0
  403afe:	6328      	str	r0, [r5, #48]	; 0x30
  403b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b04:	692e      	ldr	r6, [r5, #16]
  403b06:	b1ae      	cbz	r6, 403b34 <__sflush_r+0xb8>
  403b08:	682c      	ldr	r4, [r5, #0]
  403b0a:	602e      	str	r6, [r5, #0]
  403b0c:	0791      	lsls	r1, r2, #30
  403b0e:	bf0c      	ite	eq
  403b10:	696b      	ldreq	r3, [r5, #20]
  403b12:	2300      	movne	r3, #0
  403b14:	1ba4      	subs	r4, r4, r6
  403b16:	60ab      	str	r3, [r5, #8]
  403b18:	e00a      	b.n	403b30 <__sflush_r+0xb4>
  403b1a:	4623      	mov	r3, r4
  403b1c:	4632      	mov	r2, r6
  403b1e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403b20:	69e9      	ldr	r1, [r5, #28]
  403b22:	4640      	mov	r0, r8
  403b24:	47b8      	blx	r7
  403b26:	2800      	cmp	r0, #0
  403b28:	eba4 0400 	sub.w	r4, r4, r0
  403b2c:	4406      	add	r6, r0
  403b2e:	dd04      	ble.n	403b3a <__sflush_r+0xbe>
  403b30:	2c00      	cmp	r4, #0
  403b32:	dcf2      	bgt.n	403b1a <__sflush_r+0x9e>
  403b34:	2000      	movs	r0, #0
  403b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b3a:	89ab      	ldrh	r3, [r5, #12]
  403b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b40:	81ab      	strh	r3, [r5, #12]
  403b42:	f04f 30ff 	mov.w	r0, #4294967295
  403b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b4a:	f8d8 4000 	ldr.w	r4, [r8]
  403b4e:	2c1d      	cmp	r4, #29
  403b50:	d8f3      	bhi.n	403b3a <__sflush_r+0xbe>
  403b52:	4b19      	ldr	r3, [pc, #100]	; (403bb8 <__sflush_r+0x13c>)
  403b54:	40e3      	lsrs	r3, r4
  403b56:	43db      	mvns	r3, r3
  403b58:	f013 0301 	ands.w	r3, r3, #1
  403b5c:	d1ed      	bne.n	403b3a <__sflush_r+0xbe>
  403b5e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403b62:	606b      	str	r3, [r5, #4]
  403b64:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403b68:	6929      	ldr	r1, [r5, #16]
  403b6a:	81ab      	strh	r3, [r5, #12]
  403b6c:	04da      	lsls	r2, r3, #19
  403b6e:	6029      	str	r1, [r5, #0]
  403b70:	d5b9      	bpl.n	403ae6 <__sflush_r+0x6a>
  403b72:	2c00      	cmp	r4, #0
  403b74:	d1b7      	bne.n	403ae6 <__sflush_r+0x6a>
  403b76:	6528      	str	r0, [r5, #80]	; 0x50
  403b78:	e7b5      	b.n	403ae6 <__sflush_r+0x6a>
  403b7a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403b7c:	2a00      	cmp	r2, #0
  403b7e:	dc8c      	bgt.n	403a9a <__sflush_r+0x1e>
  403b80:	e7d8      	b.n	403b34 <__sflush_r+0xb8>
  403b82:	2301      	movs	r3, #1
  403b84:	69e9      	ldr	r1, [r5, #28]
  403b86:	4640      	mov	r0, r8
  403b88:	47a0      	blx	r4
  403b8a:	1c43      	adds	r3, r0, #1
  403b8c:	4602      	mov	r2, r0
  403b8e:	d002      	beq.n	403b96 <__sflush_r+0x11a>
  403b90:	89ab      	ldrh	r3, [r5, #12]
  403b92:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403b94:	e78e      	b.n	403ab4 <__sflush_r+0x38>
  403b96:	f8d8 3000 	ldr.w	r3, [r8]
  403b9a:	2b00      	cmp	r3, #0
  403b9c:	d0f8      	beq.n	403b90 <__sflush_r+0x114>
  403b9e:	2b1d      	cmp	r3, #29
  403ba0:	d001      	beq.n	403ba6 <__sflush_r+0x12a>
  403ba2:	2b16      	cmp	r3, #22
  403ba4:	d102      	bne.n	403bac <__sflush_r+0x130>
  403ba6:	f8c8 6000 	str.w	r6, [r8]
  403baa:	e7c3      	b.n	403b34 <__sflush_r+0xb8>
  403bac:	89ab      	ldrh	r3, [r5, #12]
  403bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403bb2:	81ab      	strh	r3, [r5, #12]
  403bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bb8:	20400001 	.word	0x20400001

00403bbc <_fflush_r>:
  403bbc:	b538      	push	{r3, r4, r5, lr}
  403bbe:	460d      	mov	r5, r1
  403bc0:	4604      	mov	r4, r0
  403bc2:	b108      	cbz	r0, 403bc8 <_fflush_r+0xc>
  403bc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403bc6:	b1bb      	cbz	r3, 403bf8 <_fflush_r+0x3c>
  403bc8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403bcc:	b188      	cbz	r0, 403bf2 <_fflush_r+0x36>
  403bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403bd0:	07db      	lsls	r3, r3, #31
  403bd2:	d401      	bmi.n	403bd8 <_fflush_r+0x1c>
  403bd4:	0581      	lsls	r1, r0, #22
  403bd6:	d517      	bpl.n	403c08 <_fflush_r+0x4c>
  403bd8:	4620      	mov	r0, r4
  403bda:	4629      	mov	r1, r5
  403bdc:	f7ff ff4e 	bl	403a7c <__sflush_r>
  403be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403be2:	07da      	lsls	r2, r3, #31
  403be4:	4604      	mov	r4, r0
  403be6:	d402      	bmi.n	403bee <_fflush_r+0x32>
  403be8:	89ab      	ldrh	r3, [r5, #12]
  403bea:	059b      	lsls	r3, r3, #22
  403bec:	d507      	bpl.n	403bfe <_fflush_r+0x42>
  403bee:	4620      	mov	r0, r4
  403bf0:	bd38      	pop	{r3, r4, r5, pc}
  403bf2:	4604      	mov	r4, r0
  403bf4:	4620      	mov	r0, r4
  403bf6:	bd38      	pop	{r3, r4, r5, pc}
  403bf8:	f000 f838 	bl	403c6c <__sinit>
  403bfc:	e7e4      	b.n	403bc8 <_fflush_r+0xc>
  403bfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403c00:	f000 fbf6 	bl	4043f0 <__retarget_lock_release_recursive>
  403c04:	4620      	mov	r0, r4
  403c06:	bd38      	pop	{r3, r4, r5, pc}
  403c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403c0a:	f000 fbef 	bl	4043ec <__retarget_lock_acquire_recursive>
  403c0e:	e7e3      	b.n	403bd8 <_fflush_r+0x1c>

00403c10 <_cleanup_r>:
  403c10:	4901      	ldr	r1, [pc, #4]	; (403c18 <_cleanup_r+0x8>)
  403c12:	f000 bbaf 	b.w	404374 <_fwalk_reent>
  403c16:	bf00      	nop
  403c18:	0040522d 	.word	0x0040522d

00403c1c <std.isra.0>:
  403c1c:	b510      	push	{r4, lr}
  403c1e:	2300      	movs	r3, #0
  403c20:	4604      	mov	r4, r0
  403c22:	8181      	strh	r1, [r0, #12]
  403c24:	81c2      	strh	r2, [r0, #14]
  403c26:	6003      	str	r3, [r0, #0]
  403c28:	6043      	str	r3, [r0, #4]
  403c2a:	6083      	str	r3, [r0, #8]
  403c2c:	6643      	str	r3, [r0, #100]	; 0x64
  403c2e:	6103      	str	r3, [r0, #16]
  403c30:	6143      	str	r3, [r0, #20]
  403c32:	6183      	str	r3, [r0, #24]
  403c34:	4619      	mov	r1, r3
  403c36:	2208      	movs	r2, #8
  403c38:	305c      	adds	r0, #92	; 0x5c
  403c3a:	f7fe fe21 	bl	402880 <memset>
  403c3e:	4807      	ldr	r0, [pc, #28]	; (403c5c <std.isra.0+0x40>)
  403c40:	4907      	ldr	r1, [pc, #28]	; (403c60 <std.isra.0+0x44>)
  403c42:	4a08      	ldr	r2, [pc, #32]	; (403c64 <std.isra.0+0x48>)
  403c44:	4b08      	ldr	r3, [pc, #32]	; (403c68 <std.isra.0+0x4c>)
  403c46:	6220      	str	r0, [r4, #32]
  403c48:	61e4      	str	r4, [r4, #28]
  403c4a:	6261      	str	r1, [r4, #36]	; 0x24
  403c4c:	62a2      	str	r2, [r4, #40]	; 0x28
  403c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
  403c50:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403c58:	f000 bbc4 	b.w	4043e4 <__retarget_lock_init_recursive>
  403c5c:	00404f71 	.word	0x00404f71
  403c60:	00404f95 	.word	0x00404f95
  403c64:	00404fd1 	.word	0x00404fd1
  403c68:	00404ff1 	.word	0x00404ff1

00403c6c <__sinit>:
  403c6c:	b510      	push	{r4, lr}
  403c6e:	4604      	mov	r4, r0
  403c70:	4812      	ldr	r0, [pc, #72]	; (403cbc <__sinit+0x50>)
  403c72:	f000 fbbb 	bl	4043ec <__retarget_lock_acquire_recursive>
  403c76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403c78:	b9d2      	cbnz	r2, 403cb0 <__sinit+0x44>
  403c7a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403c7e:	4810      	ldr	r0, [pc, #64]	; (403cc0 <__sinit+0x54>)
  403c80:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403c84:	2103      	movs	r1, #3
  403c86:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403c8a:	63e0      	str	r0, [r4, #60]	; 0x3c
  403c8c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403c90:	6860      	ldr	r0, [r4, #4]
  403c92:	2104      	movs	r1, #4
  403c94:	f7ff ffc2 	bl	403c1c <std.isra.0>
  403c98:	2201      	movs	r2, #1
  403c9a:	2109      	movs	r1, #9
  403c9c:	68a0      	ldr	r0, [r4, #8]
  403c9e:	f7ff ffbd 	bl	403c1c <std.isra.0>
  403ca2:	2202      	movs	r2, #2
  403ca4:	2112      	movs	r1, #18
  403ca6:	68e0      	ldr	r0, [r4, #12]
  403ca8:	f7ff ffb8 	bl	403c1c <std.isra.0>
  403cac:	2301      	movs	r3, #1
  403cae:	63a3      	str	r3, [r4, #56]	; 0x38
  403cb0:	4802      	ldr	r0, [pc, #8]	; (403cbc <__sinit+0x50>)
  403cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403cb6:	f000 bb9b 	b.w	4043f0 <__retarget_lock_release_recursive>
  403cba:	bf00      	nop
  403cbc:	2040abfc 	.word	0x2040abfc
  403cc0:	00403c11 	.word	0x00403c11

00403cc4 <__sfp_lock_acquire>:
  403cc4:	4801      	ldr	r0, [pc, #4]	; (403ccc <__sfp_lock_acquire+0x8>)
  403cc6:	f000 bb91 	b.w	4043ec <__retarget_lock_acquire_recursive>
  403cca:	bf00      	nop
  403ccc:	2040ac10 	.word	0x2040ac10

00403cd0 <__sfp_lock_release>:
  403cd0:	4801      	ldr	r0, [pc, #4]	; (403cd8 <__sfp_lock_release+0x8>)
  403cd2:	f000 bb8d 	b.w	4043f0 <__retarget_lock_release_recursive>
  403cd6:	bf00      	nop
  403cd8:	2040ac10 	.word	0x2040ac10

00403cdc <__libc_fini_array>:
  403cdc:	b538      	push	{r3, r4, r5, lr}
  403cde:	4c0a      	ldr	r4, [pc, #40]	; (403d08 <__libc_fini_array+0x2c>)
  403ce0:	4d0a      	ldr	r5, [pc, #40]	; (403d0c <__libc_fini_array+0x30>)
  403ce2:	1b64      	subs	r4, r4, r5
  403ce4:	10a4      	asrs	r4, r4, #2
  403ce6:	d00a      	beq.n	403cfe <__libc_fini_array+0x22>
  403ce8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403cec:	3b01      	subs	r3, #1
  403cee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403cf2:	3c01      	subs	r4, #1
  403cf4:	f855 3904 	ldr.w	r3, [r5], #-4
  403cf8:	4798      	blx	r3
  403cfa:	2c00      	cmp	r4, #0
  403cfc:	d1f9      	bne.n	403cf2 <__libc_fini_array+0x16>
  403cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403d02:	f001 be19 	b.w	405938 <_fini>
  403d06:	bf00      	nop
  403d08:	00405948 	.word	0x00405948
  403d0c:	00405944 	.word	0x00405944

00403d10 <__fputwc>:
  403d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d14:	b082      	sub	sp, #8
  403d16:	4680      	mov	r8, r0
  403d18:	4689      	mov	r9, r1
  403d1a:	4614      	mov	r4, r2
  403d1c:	f000 fb54 	bl	4043c8 <__locale_mb_cur_max>
  403d20:	2801      	cmp	r0, #1
  403d22:	d036      	beq.n	403d92 <__fputwc+0x82>
  403d24:	464a      	mov	r2, r9
  403d26:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403d2a:	a901      	add	r1, sp, #4
  403d2c:	4640      	mov	r0, r8
  403d2e:	f001 f9bb 	bl	4050a8 <_wcrtomb_r>
  403d32:	1c42      	adds	r2, r0, #1
  403d34:	4606      	mov	r6, r0
  403d36:	d025      	beq.n	403d84 <__fputwc+0x74>
  403d38:	b3a8      	cbz	r0, 403da6 <__fputwc+0x96>
  403d3a:	f89d e004 	ldrb.w	lr, [sp, #4]
  403d3e:	2500      	movs	r5, #0
  403d40:	f10d 0a04 	add.w	sl, sp, #4
  403d44:	e009      	b.n	403d5a <__fputwc+0x4a>
  403d46:	6823      	ldr	r3, [r4, #0]
  403d48:	1c5a      	adds	r2, r3, #1
  403d4a:	6022      	str	r2, [r4, #0]
  403d4c:	f883 e000 	strb.w	lr, [r3]
  403d50:	3501      	adds	r5, #1
  403d52:	42b5      	cmp	r5, r6
  403d54:	d227      	bcs.n	403da6 <__fputwc+0x96>
  403d56:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403d5a:	68a3      	ldr	r3, [r4, #8]
  403d5c:	3b01      	subs	r3, #1
  403d5e:	2b00      	cmp	r3, #0
  403d60:	60a3      	str	r3, [r4, #8]
  403d62:	daf0      	bge.n	403d46 <__fputwc+0x36>
  403d64:	69a7      	ldr	r7, [r4, #24]
  403d66:	42bb      	cmp	r3, r7
  403d68:	4671      	mov	r1, lr
  403d6a:	4622      	mov	r2, r4
  403d6c:	4640      	mov	r0, r8
  403d6e:	db02      	blt.n	403d76 <__fputwc+0x66>
  403d70:	f1be 0f0a 	cmp.w	lr, #10
  403d74:	d1e7      	bne.n	403d46 <__fputwc+0x36>
  403d76:	f001 f93f 	bl	404ff8 <__swbuf_r>
  403d7a:	1c43      	adds	r3, r0, #1
  403d7c:	d1e8      	bne.n	403d50 <__fputwc+0x40>
  403d7e:	b002      	add	sp, #8
  403d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d84:	89a3      	ldrh	r3, [r4, #12]
  403d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403d8a:	81a3      	strh	r3, [r4, #12]
  403d8c:	b002      	add	sp, #8
  403d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d92:	f109 33ff 	add.w	r3, r9, #4294967295
  403d96:	2bfe      	cmp	r3, #254	; 0xfe
  403d98:	d8c4      	bhi.n	403d24 <__fputwc+0x14>
  403d9a:	fa5f fe89 	uxtb.w	lr, r9
  403d9e:	4606      	mov	r6, r0
  403da0:	f88d e004 	strb.w	lr, [sp, #4]
  403da4:	e7cb      	b.n	403d3e <__fputwc+0x2e>
  403da6:	4648      	mov	r0, r9
  403da8:	b002      	add	sp, #8
  403daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dae:	bf00      	nop

00403db0 <_fputwc_r>:
  403db0:	b530      	push	{r4, r5, lr}
  403db2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403db4:	f013 0f01 	tst.w	r3, #1
  403db8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403dbc:	4614      	mov	r4, r2
  403dbe:	b083      	sub	sp, #12
  403dc0:	4605      	mov	r5, r0
  403dc2:	b29a      	uxth	r2, r3
  403dc4:	d101      	bne.n	403dca <_fputwc_r+0x1a>
  403dc6:	0590      	lsls	r0, r2, #22
  403dc8:	d51c      	bpl.n	403e04 <_fputwc_r+0x54>
  403dca:	0490      	lsls	r0, r2, #18
  403dcc:	d406      	bmi.n	403ddc <_fputwc_r+0x2c>
  403dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403dd8:	81a3      	strh	r3, [r4, #12]
  403dda:	6662      	str	r2, [r4, #100]	; 0x64
  403ddc:	4628      	mov	r0, r5
  403dde:	4622      	mov	r2, r4
  403de0:	f7ff ff96 	bl	403d10 <__fputwc>
  403de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403de6:	07da      	lsls	r2, r3, #31
  403de8:	4605      	mov	r5, r0
  403dea:	d402      	bmi.n	403df2 <_fputwc_r+0x42>
  403dec:	89a3      	ldrh	r3, [r4, #12]
  403dee:	059b      	lsls	r3, r3, #22
  403df0:	d502      	bpl.n	403df8 <_fputwc_r+0x48>
  403df2:	4628      	mov	r0, r5
  403df4:	b003      	add	sp, #12
  403df6:	bd30      	pop	{r4, r5, pc}
  403df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403dfa:	f000 faf9 	bl	4043f0 <__retarget_lock_release_recursive>
  403dfe:	4628      	mov	r0, r5
  403e00:	b003      	add	sp, #12
  403e02:	bd30      	pop	{r4, r5, pc}
  403e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e06:	9101      	str	r1, [sp, #4]
  403e08:	f000 faf0 	bl	4043ec <__retarget_lock_acquire_recursive>
  403e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403e10:	9901      	ldr	r1, [sp, #4]
  403e12:	b29a      	uxth	r2, r3
  403e14:	e7d9      	b.n	403dca <_fputwc_r+0x1a>
  403e16:	bf00      	nop

00403e18 <_malloc_trim_r>:
  403e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e1a:	4f24      	ldr	r7, [pc, #144]	; (403eac <_malloc_trim_r+0x94>)
  403e1c:	460c      	mov	r4, r1
  403e1e:	4606      	mov	r6, r0
  403e20:	f000 fee2 	bl	404be8 <__malloc_lock>
  403e24:	68bb      	ldr	r3, [r7, #8]
  403e26:	685d      	ldr	r5, [r3, #4]
  403e28:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403e2c:	310f      	adds	r1, #15
  403e2e:	f025 0503 	bic.w	r5, r5, #3
  403e32:	4429      	add	r1, r5
  403e34:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403e38:	f021 010f 	bic.w	r1, r1, #15
  403e3c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403e40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403e44:	db07      	blt.n	403e56 <_malloc_trim_r+0x3e>
  403e46:	2100      	movs	r1, #0
  403e48:	4630      	mov	r0, r6
  403e4a:	f001 f87f 	bl	404f4c <_sbrk_r>
  403e4e:	68bb      	ldr	r3, [r7, #8]
  403e50:	442b      	add	r3, r5
  403e52:	4298      	cmp	r0, r3
  403e54:	d004      	beq.n	403e60 <_malloc_trim_r+0x48>
  403e56:	4630      	mov	r0, r6
  403e58:	f000 fecc 	bl	404bf4 <__malloc_unlock>
  403e5c:	2000      	movs	r0, #0
  403e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e60:	4261      	negs	r1, r4
  403e62:	4630      	mov	r0, r6
  403e64:	f001 f872 	bl	404f4c <_sbrk_r>
  403e68:	3001      	adds	r0, #1
  403e6a:	d00d      	beq.n	403e88 <_malloc_trim_r+0x70>
  403e6c:	4b10      	ldr	r3, [pc, #64]	; (403eb0 <_malloc_trim_r+0x98>)
  403e6e:	68ba      	ldr	r2, [r7, #8]
  403e70:	6819      	ldr	r1, [r3, #0]
  403e72:	1b2d      	subs	r5, r5, r4
  403e74:	f045 0501 	orr.w	r5, r5, #1
  403e78:	4630      	mov	r0, r6
  403e7a:	1b09      	subs	r1, r1, r4
  403e7c:	6055      	str	r5, [r2, #4]
  403e7e:	6019      	str	r1, [r3, #0]
  403e80:	f000 feb8 	bl	404bf4 <__malloc_unlock>
  403e84:	2001      	movs	r0, #1
  403e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e88:	2100      	movs	r1, #0
  403e8a:	4630      	mov	r0, r6
  403e8c:	f001 f85e 	bl	404f4c <_sbrk_r>
  403e90:	68ba      	ldr	r2, [r7, #8]
  403e92:	1a83      	subs	r3, r0, r2
  403e94:	2b0f      	cmp	r3, #15
  403e96:	ddde      	ble.n	403e56 <_malloc_trim_r+0x3e>
  403e98:	4c06      	ldr	r4, [pc, #24]	; (403eb4 <_malloc_trim_r+0x9c>)
  403e9a:	4905      	ldr	r1, [pc, #20]	; (403eb0 <_malloc_trim_r+0x98>)
  403e9c:	6824      	ldr	r4, [r4, #0]
  403e9e:	f043 0301 	orr.w	r3, r3, #1
  403ea2:	1b00      	subs	r0, r0, r4
  403ea4:	6053      	str	r3, [r2, #4]
  403ea6:	6008      	str	r0, [r1, #0]
  403ea8:	e7d5      	b.n	403e56 <_malloc_trim_r+0x3e>
  403eaa:	bf00      	nop
  403eac:	204005c0 	.word	0x204005c0
  403eb0:	2040aba8 	.word	0x2040aba8
  403eb4:	204009c8 	.word	0x204009c8

00403eb8 <_free_r>:
  403eb8:	2900      	cmp	r1, #0
  403eba:	d044      	beq.n	403f46 <_free_r+0x8e>
  403ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ec0:	460d      	mov	r5, r1
  403ec2:	4680      	mov	r8, r0
  403ec4:	f000 fe90 	bl	404be8 <__malloc_lock>
  403ec8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403ecc:	4969      	ldr	r1, [pc, #420]	; (404074 <_free_r+0x1bc>)
  403ece:	f027 0301 	bic.w	r3, r7, #1
  403ed2:	f1a5 0408 	sub.w	r4, r5, #8
  403ed6:	18e2      	adds	r2, r4, r3
  403ed8:	688e      	ldr	r6, [r1, #8]
  403eda:	6850      	ldr	r0, [r2, #4]
  403edc:	42b2      	cmp	r2, r6
  403ede:	f020 0003 	bic.w	r0, r0, #3
  403ee2:	d05e      	beq.n	403fa2 <_free_r+0xea>
  403ee4:	07fe      	lsls	r6, r7, #31
  403ee6:	6050      	str	r0, [r2, #4]
  403ee8:	d40b      	bmi.n	403f02 <_free_r+0x4a>
  403eea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403eee:	1be4      	subs	r4, r4, r7
  403ef0:	f101 0e08 	add.w	lr, r1, #8
  403ef4:	68a5      	ldr	r5, [r4, #8]
  403ef6:	4575      	cmp	r5, lr
  403ef8:	443b      	add	r3, r7
  403efa:	d06d      	beq.n	403fd8 <_free_r+0x120>
  403efc:	68e7      	ldr	r7, [r4, #12]
  403efe:	60ef      	str	r7, [r5, #12]
  403f00:	60bd      	str	r5, [r7, #8]
  403f02:	1815      	adds	r5, r2, r0
  403f04:	686d      	ldr	r5, [r5, #4]
  403f06:	07ed      	lsls	r5, r5, #31
  403f08:	d53e      	bpl.n	403f88 <_free_r+0xd0>
  403f0a:	f043 0201 	orr.w	r2, r3, #1
  403f0e:	6062      	str	r2, [r4, #4]
  403f10:	50e3      	str	r3, [r4, r3]
  403f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403f16:	d217      	bcs.n	403f48 <_free_r+0x90>
  403f18:	08db      	lsrs	r3, r3, #3
  403f1a:	1c58      	adds	r0, r3, #1
  403f1c:	109a      	asrs	r2, r3, #2
  403f1e:	684d      	ldr	r5, [r1, #4]
  403f20:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403f24:	60a7      	str	r7, [r4, #8]
  403f26:	2301      	movs	r3, #1
  403f28:	4093      	lsls	r3, r2
  403f2a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403f2e:	432b      	orrs	r3, r5
  403f30:	3a08      	subs	r2, #8
  403f32:	60e2      	str	r2, [r4, #12]
  403f34:	604b      	str	r3, [r1, #4]
  403f36:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403f3a:	60fc      	str	r4, [r7, #12]
  403f3c:	4640      	mov	r0, r8
  403f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f42:	f000 be57 	b.w	404bf4 <__malloc_unlock>
  403f46:	4770      	bx	lr
  403f48:	0a5a      	lsrs	r2, r3, #9
  403f4a:	2a04      	cmp	r2, #4
  403f4c:	d852      	bhi.n	403ff4 <_free_r+0x13c>
  403f4e:	099a      	lsrs	r2, r3, #6
  403f50:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403f54:	00ff      	lsls	r7, r7, #3
  403f56:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403f5a:	19c8      	adds	r0, r1, r7
  403f5c:	59ca      	ldr	r2, [r1, r7]
  403f5e:	3808      	subs	r0, #8
  403f60:	4290      	cmp	r0, r2
  403f62:	d04f      	beq.n	404004 <_free_r+0x14c>
  403f64:	6851      	ldr	r1, [r2, #4]
  403f66:	f021 0103 	bic.w	r1, r1, #3
  403f6a:	428b      	cmp	r3, r1
  403f6c:	d232      	bcs.n	403fd4 <_free_r+0x11c>
  403f6e:	6892      	ldr	r2, [r2, #8]
  403f70:	4290      	cmp	r0, r2
  403f72:	d1f7      	bne.n	403f64 <_free_r+0xac>
  403f74:	68c3      	ldr	r3, [r0, #12]
  403f76:	60a0      	str	r0, [r4, #8]
  403f78:	60e3      	str	r3, [r4, #12]
  403f7a:	609c      	str	r4, [r3, #8]
  403f7c:	60c4      	str	r4, [r0, #12]
  403f7e:	4640      	mov	r0, r8
  403f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f84:	f000 be36 	b.w	404bf4 <__malloc_unlock>
  403f88:	6895      	ldr	r5, [r2, #8]
  403f8a:	4f3b      	ldr	r7, [pc, #236]	; (404078 <_free_r+0x1c0>)
  403f8c:	42bd      	cmp	r5, r7
  403f8e:	4403      	add	r3, r0
  403f90:	d040      	beq.n	404014 <_free_r+0x15c>
  403f92:	68d0      	ldr	r0, [r2, #12]
  403f94:	60e8      	str	r0, [r5, #12]
  403f96:	f043 0201 	orr.w	r2, r3, #1
  403f9a:	6085      	str	r5, [r0, #8]
  403f9c:	6062      	str	r2, [r4, #4]
  403f9e:	50e3      	str	r3, [r4, r3]
  403fa0:	e7b7      	b.n	403f12 <_free_r+0x5a>
  403fa2:	07ff      	lsls	r7, r7, #31
  403fa4:	4403      	add	r3, r0
  403fa6:	d407      	bmi.n	403fb8 <_free_r+0x100>
  403fa8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403fac:	1aa4      	subs	r4, r4, r2
  403fae:	4413      	add	r3, r2
  403fb0:	68a0      	ldr	r0, [r4, #8]
  403fb2:	68e2      	ldr	r2, [r4, #12]
  403fb4:	60c2      	str	r2, [r0, #12]
  403fb6:	6090      	str	r0, [r2, #8]
  403fb8:	4a30      	ldr	r2, [pc, #192]	; (40407c <_free_r+0x1c4>)
  403fba:	6812      	ldr	r2, [r2, #0]
  403fbc:	f043 0001 	orr.w	r0, r3, #1
  403fc0:	4293      	cmp	r3, r2
  403fc2:	6060      	str	r0, [r4, #4]
  403fc4:	608c      	str	r4, [r1, #8]
  403fc6:	d3b9      	bcc.n	403f3c <_free_r+0x84>
  403fc8:	4b2d      	ldr	r3, [pc, #180]	; (404080 <_free_r+0x1c8>)
  403fca:	4640      	mov	r0, r8
  403fcc:	6819      	ldr	r1, [r3, #0]
  403fce:	f7ff ff23 	bl	403e18 <_malloc_trim_r>
  403fd2:	e7b3      	b.n	403f3c <_free_r+0x84>
  403fd4:	4610      	mov	r0, r2
  403fd6:	e7cd      	b.n	403f74 <_free_r+0xbc>
  403fd8:	1811      	adds	r1, r2, r0
  403fda:	6849      	ldr	r1, [r1, #4]
  403fdc:	07c9      	lsls	r1, r1, #31
  403fde:	d444      	bmi.n	40406a <_free_r+0x1b2>
  403fe0:	6891      	ldr	r1, [r2, #8]
  403fe2:	68d2      	ldr	r2, [r2, #12]
  403fe4:	60ca      	str	r2, [r1, #12]
  403fe6:	4403      	add	r3, r0
  403fe8:	f043 0001 	orr.w	r0, r3, #1
  403fec:	6091      	str	r1, [r2, #8]
  403fee:	6060      	str	r0, [r4, #4]
  403ff0:	50e3      	str	r3, [r4, r3]
  403ff2:	e7a3      	b.n	403f3c <_free_r+0x84>
  403ff4:	2a14      	cmp	r2, #20
  403ff6:	d816      	bhi.n	404026 <_free_r+0x16e>
  403ff8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403ffc:	00ff      	lsls	r7, r7, #3
  403ffe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404002:	e7aa      	b.n	403f5a <_free_r+0xa2>
  404004:	10aa      	asrs	r2, r5, #2
  404006:	2301      	movs	r3, #1
  404008:	684d      	ldr	r5, [r1, #4]
  40400a:	4093      	lsls	r3, r2
  40400c:	432b      	orrs	r3, r5
  40400e:	604b      	str	r3, [r1, #4]
  404010:	4603      	mov	r3, r0
  404012:	e7b0      	b.n	403f76 <_free_r+0xbe>
  404014:	f043 0201 	orr.w	r2, r3, #1
  404018:	614c      	str	r4, [r1, #20]
  40401a:	610c      	str	r4, [r1, #16]
  40401c:	60e5      	str	r5, [r4, #12]
  40401e:	60a5      	str	r5, [r4, #8]
  404020:	6062      	str	r2, [r4, #4]
  404022:	50e3      	str	r3, [r4, r3]
  404024:	e78a      	b.n	403f3c <_free_r+0x84>
  404026:	2a54      	cmp	r2, #84	; 0x54
  404028:	d806      	bhi.n	404038 <_free_r+0x180>
  40402a:	0b1a      	lsrs	r2, r3, #12
  40402c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404030:	00ff      	lsls	r7, r7, #3
  404032:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404036:	e790      	b.n	403f5a <_free_r+0xa2>
  404038:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40403c:	d806      	bhi.n	40404c <_free_r+0x194>
  40403e:	0bda      	lsrs	r2, r3, #15
  404040:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404044:	00ff      	lsls	r7, r7, #3
  404046:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40404a:	e786      	b.n	403f5a <_free_r+0xa2>
  40404c:	f240 5054 	movw	r0, #1364	; 0x554
  404050:	4282      	cmp	r2, r0
  404052:	d806      	bhi.n	404062 <_free_r+0x1aa>
  404054:	0c9a      	lsrs	r2, r3, #18
  404056:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40405a:	00ff      	lsls	r7, r7, #3
  40405c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404060:	e77b      	b.n	403f5a <_free_r+0xa2>
  404062:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404066:	257e      	movs	r5, #126	; 0x7e
  404068:	e777      	b.n	403f5a <_free_r+0xa2>
  40406a:	f043 0101 	orr.w	r1, r3, #1
  40406e:	6061      	str	r1, [r4, #4]
  404070:	6013      	str	r3, [r2, #0]
  404072:	e763      	b.n	403f3c <_free_r+0x84>
  404074:	204005c0 	.word	0x204005c0
  404078:	204005c8 	.word	0x204005c8
  40407c:	204009cc 	.word	0x204009cc
  404080:	2040abd8 	.word	0x2040abd8

00404084 <__sfvwrite_r>:
  404084:	6893      	ldr	r3, [r2, #8]
  404086:	2b00      	cmp	r3, #0
  404088:	d073      	beq.n	404172 <__sfvwrite_r+0xee>
  40408a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40408e:	898b      	ldrh	r3, [r1, #12]
  404090:	b083      	sub	sp, #12
  404092:	460c      	mov	r4, r1
  404094:	0719      	lsls	r1, r3, #28
  404096:	9000      	str	r0, [sp, #0]
  404098:	4616      	mov	r6, r2
  40409a:	d526      	bpl.n	4040ea <__sfvwrite_r+0x66>
  40409c:	6922      	ldr	r2, [r4, #16]
  40409e:	b322      	cbz	r2, 4040ea <__sfvwrite_r+0x66>
  4040a0:	f013 0002 	ands.w	r0, r3, #2
  4040a4:	6835      	ldr	r5, [r6, #0]
  4040a6:	d02c      	beq.n	404102 <__sfvwrite_r+0x7e>
  4040a8:	f04f 0900 	mov.w	r9, #0
  4040ac:	4fb0      	ldr	r7, [pc, #704]	; (404370 <__sfvwrite_r+0x2ec>)
  4040ae:	46c8      	mov	r8, r9
  4040b0:	46b2      	mov	sl, r6
  4040b2:	45b8      	cmp	r8, r7
  4040b4:	4643      	mov	r3, r8
  4040b6:	464a      	mov	r2, r9
  4040b8:	bf28      	it	cs
  4040ba:	463b      	movcs	r3, r7
  4040bc:	9800      	ldr	r0, [sp, #0]
  4040be:	f1b8 0f00 	cmp.w	r8, #0
  4040c2:	d050      	beq.n	404166 <__sfvwrite_r+0xe2>
  4040c4:	69e1      	ldr	r1, [r4, #28]
  4040c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4040c8:	47b0      	blx	r6
  4040ca:	2800      	cmp	r0, #0
  4040cc:	dd58      	ble.n	404180 <__sfvwrite_r+0xfc>
  4040ce:	f8da 3008 	ldr.w	r3, [sl, #8]
  4040d2:	1a1b      	subs	r3, r3, r0
  4040d4:	4481      	add	r9, r0
  4040d6:	eba8 0800 	sub.w	r8, r8, r0
  4040da:	f8ca 3008 	str.w	r3, [sl, #8]
  4040de:	2b00      	cmp	r3, #0
  4040e0:	d1e7      	bne.n	4040b2 <__sfvwrite_r+0x2e>
  4040e2:	2000      	movs	r0, #0
  4040e4:	b003      	add	sp, #12
  4040e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ea:	4621      	mov	r1, r4
  4040ec:	9800      	ldr	r0, [sp, #0]
  4040ee:	f7ff fc51 	bl	403994 <__swsetup_r>
  4040f2:	2800      	cmp	r0, #0
  4040f4:	f040 8133 	bne.w	40435e <__sfvwrite_r+0x2da>
  4040f8:	89a3      	ldrh	r3, [r4, #12]
  4040fa:	6835      	ldr	r5, [r6, #0]
  4040fc:	f013 0002 	ands.w	r0, r3, #2
  404100:	d1d2      	bne.n	4040a8 <__sfvwrite_r+0x24>
  404102:	f013 0901 	ands.w	r9, r3, #1
  404106:	d145      	bne.n	404194 <__sfvwrite_r+0x110>
  404108:	464f      	mov	r7, r9
  40410a:	9601      	str	r6, [sp, #4]
  40410c:	b337      	cbz	r7, 40415c <__sfvwrite_r+0xd8>
  40410e:	059a      	lsls	r2, r3, #22
  404110:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404114:	f140 8083 	bpl.w	40421e <__sfvwrite_r+0x19a>
  404118:	4547      	cmp	r7, r8
  40411a:	46c3      	mov	fp, r8
  40411c:	f0c0 80ab 	bcc.w	404276 <__sfvwrite_r+0x1f2>
  404120:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404124:	f040 80ac 	bne.w	404280 <__sfvwrite_r+0x1fc>
  404128:	6820      	ldr	r0, [r4, #0]
  40412a:	46ba      	mov	sl, r7
  40412c:	465a      	mov	r2, fp
  40412e:	4649      	mov	r1, r9
  404130:	f000 fcf6 	bl	404b20 <memmove>
  404134:	68a2      	ldr	r2, [r4, #8]
  404136:	6823      	ldr	r3, [r4, #0]
  404138:	eba2 0208 	sub.w	r2, r2, r8
  40413c:	445b      	add	r3, fp
  40413e:	60a2      	str	r2, [r4, #8]
  404140:	6023      	str	r3, [r4, #0]
  404142:	9a01      	ldr	r2, [sp, #4]
  404144:	6893      	ldr	r3, [r2, #8]
  404146:	eba3 030a 	sub.w	r3, r3, sl
  40414a:	44d1      	add	r9, sl
  40414c:	eba7 070a 	sub.w	r7, r7, sl
  404150:	6093      	str	r3, [r2, #8]
  404152:	2b00      	cmp	r3, #0
  404154:	d0c5      	beq.n	4040e2 <__sfvwrite_r+0x5e>
  404156:	89a3      	ldrh	r3, [r4, #12]
  404158:	2f00      	cmp	r7, #0
  40415a:	d1d8      	bne.n	40410e <__sfvwrite_r+0x8a>
  40415c:	f8d5 9000 	ldr.w	r9, [r5]
  404160:	686f      	ldr	r7, [r5, #4]
  404162:	3508      	adds	r5, #8
  404164:	e7d2      	b.n	40410c <__sfvwrite_r+0x88>
  404166:	f8d5 9000 	ldr.w	r9, [r5]
  40416a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40416e:	3508      	adds	r5, #8
  404170:	e79f      	b.n	4040b2 <__sfvwrite_r+0x2e>
  404172:	2000      	movs	r0, #0
  404174:	4770      	bx	lr
  404176:	4621      	mov	r1, r4
  404178:	9800      	ldr	r0, [sp, #0]
  40417a:	f7ff fd1f 	bl	403bbc <_fflush_r>
  40417e:	b370      	cbz	r0, 4041de <__sfvwrite_r+0x15a>
  404180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404188:	f04f 30ff 	mov.w	r0, #4294967295
  40418c:	81a3      	strh	r3, [r4, #12]
  40418e:	b003      	add	sp, #12
  404190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404194:	4681      	mov	r9, r0
  404196:	4633      	mov	r3, r6
  404198:	464e      	mov	r6, r9
  40419a:	46a8      	mov	r8, r5
  40419c:	469a      	mov	sl, r3
  40419e:	464d      	mov	r5, r9
  4041a0:	b34e      	cbz	r6, 4041f6 <__sfvwrite_r+0x172>
  4041a2:	b380      	cbz	r0, 404206 <__sfvwrite_r+0x182>
  4041a4:	6820      	ldr	r0, [r4, #0]
  4041a6:	6923      	ldr	r3, [r4, #16]
  4041a8:	6962      	ldr	r2, [r4, #20]
  4041aa:	45b1      	cmp	r9, r6
  4041ac:	46cb      	mov	fp, r9
  4041ae:	bf28      	it	cs
  4041b0:	46b3      	movcs	fp, r6
  4041b2:	4298      	cmp	r0, r3
  4041b4:	465f      	mov	r7, fp
  4041b6:	d904      	bls.n	4041c2 <__sfvwrite_r+0x13e>
  4041b8:	68a3      	ldr	r3, [r4, #8]
  4041ba:	4413      	add	r3, r2
  4041bc:	459b      	cmp	fp, r3
  4041be:	f300 80a6 	bgt.w	40430e <__sfvwrite_r+0x28a>
  4041c2:	4593      	cmp	fp, r2
  4041c4:	db4b      	blt.n	40425e <__sfvwrite_r+0x1da>
  4041c6:	4613      	mov	r3, r2
  4041c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4041ca:	69e1      	ldr	r1, [r4, #28]
  4041cc:	9800      	ldr	r0, [sp, #0]
  4041ce:	462a      	mov	r2, r5
  4041d0:	47b8      	blx	r7
  4041d2:	1e07      	subs	r7, r0, #0
  4041d4:	ddd4      	ble.n	404180 <__sfvwrite_r+0xfc>
  4041d6:	ebb9 0907 	subs.w	r9, r9, r7
  4041da:	d0cc      	beq.n	404176 <__sfvwrite_r+0xf2>
  4041dc:	2001      	movs	r0, #1
  4041de:	f8da 3008 	ldr.w	r3, [sl, #8]
  4041e2:	1bdb      	subs	r3, r3, r7
  4041e4:	443d      	add	r5, r7
  4041e6:	1bf6      	subs	r6, r6, r7
  4041e8:	f8ca 3008 	str.w	r3, [sl, #8]
  4041ec:	2b00      	cmp	r3, #0
  4041ee:	f43f af78 	beq.w	4040e2 <__sfvwrite_r+0x5e>
  4041f2:	2e00      	cmp	r6, #0
  4041f4:	d1d5      	bne.n	4041a2 <__sfvwrite_r+0x11e>
  4041f6:	f108 0308 	add.w	r3, r8, #8
  4041fa:	e913 0060 	ldmdb	r3, {r5, r6}
  4041fe:	4698      	mov	r8, r3
  404200:	3308      	adds	r3, #8
  404202:	2e00      	cmp	r6, #0
  404204:	d0f9      	beq.n	4041fa <__sfvwrite_r+0x176>
  404206:	4632      	mov	r2, r6
  404208:	210a      	movs	r1, #10
  40420a:	4628      	mov	r0, r5
  40420c:	f000 fc38 	bl	404a80 <memchr>
  404210:	2800      	cmp	r0, #0
  404212:	f000 80a1 	beq.w	404358 <__sfvwrite_r+0x2d4>
  404216:	3001      	adds	r0, #1
  404218:	eba0 0905 	sub.w	r9, r0, r5
  40421c:	e7c2      	b.n	4041a4 <__sfvwrite_r+0x120>
  40421e:	6820      	ldr	r0, [r4, #0]
  404220:	6923      	ldr	r3, [r4, #16]
  404222:	4298      	cmp	r0, r3
  404224:	d802      	bhi.n	40422c <__sfvwrite_r+0x1a8>
  404226:	6963      	ldr	r3, [r4, #20]
  404228:	429f      	cmp	r7, r3
  40422a:	d25d      	bcs.n	4042e8 <__sfvwrite_r+0x264>
  40422c:	45b8      	cmp	r8, r7
  40422e:	bf28      	it	cs
  404230:	46b8      	movcs	r8, r7
  404232:	4642      	mov	r2, r8
  404234:	4649      	mov	r1, r9
  404236:	f000 fc73 	bl	404b20 <memmove>
  40423a:	68a3      	ldr	r3, [r4, #8]
  40423c:	6822      	ldr	r2, [r4, #0]
  40423e:	eba3 0308 	sub.w	r3, r3, r8
  404242:	4442      	add	r2, r8
  404244:	60a3      	str	r3, [r4, #8]
  404246:	6022      	str	r2, [r4, #0]
  404248:	b10b      	cbz	r3, 40424e <__sfvwrite_r+0x1ca>
  40424a:	46c2      	mov	sl, r8
  40424c:	e779      	b.n	404142 <__sfvwrite_r+0xbe>
  40424e:	4621      	mov	r1, r4
  404250:	9800      	ldr	r0, [sp, #0]
  404252:	f7ff fcb3 	bl	403bbc <_fflush_r>
  404256:	2800      	cmp	r0, #0
  404258:	d192      	bne.n	404180 <__sfvwrite_r+0xfc>
  40425a:	46c2      	mov	sl, r8
  40425c:	e771      	b.n	404142 <__sfvwrite_r+0xbe>
  40425e:	465a      	mov	r2, fp
  404260:	4629      	mov	r1, r5
  404262:	f000 fc5d 	bl	404b20 <memmove>
  404266:	68a2      	ldr	r2, [r4, #8]
  404268:	6823      	ldr	r3, [r4, #0]
  40426a:	eba2 020b 	sub.w	r2, r2, fp
  40426e:	445b      	add	r3, fp
  404270:	60a2      	str	r2, [r4, #8]
  404272:	6023      	str	r3, [r4, #0]
  404274:	e7af      	b.n	4041d6 <__sfvwrite_r+0x152>
  404276:	6820      	ldr	r0, [r4, #0]
  404278:	46b8      	mov	r8, r7
  40427a:	46ba      	mov	sl, r7
  40427c:	46bb      	mov	fp, r7
  40427e:	e755      	b.n	40412c <__sfvwrite_r+0xa8>
  404280:	6962      	ldr	r2, [r4, #20]
  404282:	6820      	ldr	r0, [r4, #0]
  404284:	6921      	ldr	r1, [r4, #16]
  404286:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40428a:	eba0 0a01 	sub.w	sl, r0, r1
  40428e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404292:	f10a 0001 	add.w	r0, sl, #1
  404296:	ea4f 0868 	mov.w	r8, r8, asr #1
  40429a:	4438      	add	r0, r7
  40429c:	4540      	cmp	r0, r8
  40429e:	4642      	mov	r2, r8
  4042a0:	bf84      	itt	hi
  4042a2:	4680      	movhi	r8, r0
  4042a4:	4642      	movhi	r2, r8
  4042a6:	055b      	lsls	r3, r3, #21
  4042a8:	d544      	bpl.n	404334 <__sfvwrite_r+0x2b0>
  4042aa:	4611      	mov	r1, r2
  4042ac:	9800      	ldr	r0, [sp, #0]
  4042ae:	f000 f921 	bl	4044f4 <_malloc_r>
  4042b2:	4683      	mov	fp, r0
  4042b4:	2800      	cmp	r0, #0
  4042b6:	d055      	beq.n	404364 <__sfvwrite_r+0x2e0>
  4042b8:	4652      	mov	r2, sl
  4042ba:	6921      	ldr	r1, [r4, #16]
  4042bc:	f7fe fa46 	bl	40274c <memcpy>
  4042c0:	89a3      	ldrh	r3, [r4, #12]
  4042c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042ca:	81a3      	strh	r3, [r4, #12]
  4042cc:	eb0b 000a 	add.w	r0, fp, sl
  4042d0:	eba8 030a 	sub.w	r3, r8, sl
  4042d4:	f8c4 b010 	str.w	fp, [r4, #16]
  4042d8:	f8c4 8014 	str.w	r8, [r4, #20]
  4042dc:	6020      	str	r0, [r4, #0]
  4042de:	60a3      	str	r3, [r4, #8]
  4042e0:	46b8      	mov	r8, r7
  4042e2:	46ba      	mov	sl, r7
  4042e4:	46bb      	mov	fp, r7
  4042e6:	e721      	b.n	40412c <__sfvwrite_r+0xa8>
  4042e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4042ec:	42b9      	cmp	r1, r7
  4042ee:	bf28      	it	cs
  4042f0:	4639      	movcs	r1, r7
  4042f2:	464a      	mov	r2, r9
  4042f4:	fb91 f1f3 	sdiv	r1, r1, r3
  4042f8:	9800      	ldr	r0, [sp, #0]
  4042fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4042fc:	fb03 f301 	mul.w	r3, r3, r1
  404300:	69e1      	ldr	r1, [r4, #28]
  404302:	47b0      	blx	r6
  404304:	f1b0 0a00 	subs.w	sl, r0, #0
  404308:	f73f af1b 	bgt.w	404142 <__sfvwrite_r+0xbe>
  40430c:	e738      	b.n	404180 <__sfvwrite_r+0xfc>
  40430e:	461a      	mov	r2, r3
  404310:	4629      	mov	r1, r5
  404312:	9301      	str	r3, [sp, #4]
  404314:	f000 fc04 	bl	404b20 <memmove>
  404318:	6822      	ldr	r2, [r4, #0]
  40431a:	9b01      	ldr	r3, [sp, #4]
  40431c:	9800      	ldr	r0, [sp, #0]
  40431e:	441a      	add	r2, r3
  404320:	6022      	str	r2, [r4, #0]
  404322:	4621      	mov	r1, r4
  404324:	f7ff fc4a 	bl	403bbc <_fflush_r>
  404328:	9b01      	ldr	r3, [sp, #4]
  40432a:	2800      	cmp	r0, #0
  40432c:	f47f af28 	bne.w	404180 <__sfvwrite_r+0xfc>
  404330:	461f      	mov	r7, r3
  404332:	e750      	b.n	4041d6 <__sfvwrite_r+0x152>
  404334:	9800      	ldr	r0, [sp, #0]
  404336:	f000 fc63 	bl	404c00 <_realloc_r>
  40433a:	4683      	mov	fp, r0
  40433c:	2800      	cmp	r0, #0
  40433e:	d1c5      	bne.n	4042cc <__sfvwrite_r+0x248>
  404340:	9d00      	ldr	r5, [sp, #0]
  404342:	6921      	ldr	r1, [r4, #16]
  404344:	4628      	mov	r0, r5
  404346:	f7ff fdb7 	bl	403eb8 <_free_r>
  40434a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40434e:	220c      	movs	r2, #12
  404350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404354:	602a      	str	r2, [r5, #0]
  404356:	e715      	b.n	404184 <__sfvwrite_r+0x100>
  404358:	f106 0901 	add.w	r9, r6, #1
  40435c:	e722      	b.n	4041a4 <__sfvwrite_r+0x120>
  40435e:	f04f 30ff 	mov.w	r0, #4294967295
  404362:	e6bf      	b.n	4040e4 <__sfvwrite_r+0x60>
  404364:	9a00      	ldr	r2, [sp, #0]
  404366:	230c      	movs	r3, #12
  404368:	6013      	str	r3, [r2, #0]
  40436a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40436e:	e709      	b.n	404184 <__sfvwrite_r+0x100>
  404370:	7ffffc00 	.word	0x7ffffc00

00404374 <_fwalk_reent>:
  404374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404378:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40437c:	d01f      	beq.n	4043be <_fwalk_reent+0x4a>
  40437e:	4688      	mov	r8, r1
  404380:	4606      	mov	r6, r0
  404382:	f04f 0900 	mov.w	r9, #0
  404386:	687d      	ldr	r5, [r7, #4]
  404388:	68bc      	ldr	r4, [r7, #8]
  40438a:	3d01      	subs	r5, #1
  40438c:	d411      	bmi.n	4043b2 <_fwalk_reent+0x3e>
  40438e:	89a3      	ldrh	r3, [r4, #12]
  404390:	2b01      	cmp	r3, #1
  404392:	f105 35ff 	add.w	r5, r5, #4294967295
  404396:	d908      	bls.n	4043aa <_fwalk_reent+0x36>
  404398:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40439c:	3301      	adds	r3, #1
  40439e:	4621      	mov	r1, r4
  4043a0:	4630      	mov	r0, r6
  4043a2:	d002      	beq.n	4043aa <_fwalk_reent+0x36>
  4043a4:	47c0      	blx	r8
  4043a6:	ea49 0900 	orr.w	r9, r9, r0
  4043aa:	1c6b      	adds	r3, r5, #1
  4043ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4043b0:	d1ed      	bne.n	40438e <_fwalk_reent+0x1a>
  4043b2:	683f      	ldr	r7, [r7, #0]
  4043b4:	2f00      	cmp	r7, #0
  4043b6:	d1e6      	bne.n	404386 <_fwalk_reent+0x12>
  4043b8:	4648      	mov	r0, r9
  4043ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043be:	46b9      	mov	r9, r7
  4043c0:	4648      	mov	r0, r9
  4043c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043c6:	bf00      	nop

004043c8 <__locale_mb_cur_max>:
  4043c8:	4b04      	ldr	r3, [pc, #16]	; (4043dc <__locale_mb_cur_max+0x14>)
  4043ca:	4a05      	ldr	r2, [pc, #20]	; (4043e0 <__locale_mb_cur_max+0x18>)
  4043cc:	681b      	ldr	r3, [r3, #0]
  4043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4043d0:	2b00      	cmp	r3, #0
  4043d2:	bf08      	it	eq
  4043d4:	4613      	moveq	r3, r2
  4043d6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4043da:	4770      	bx	lr
  4043dc:	20400020 	.word	0x20400020
  4043e0:	20400454 	.word	0x20400454

004043e4 <__retarget_lock_init_recursive>:
  4043e4:	4770      	bx	lr
  4043e6:	bf00      	nop

004043e8 <__retarget_lock_close_recursive>:
  4043e8:	4770      	bx	lr
  4043ea:	bf00      	nop

004043ec <__retarget_lock_acquire_recursive>:
  4043ec:	4770      	bx	lr
  4043ee:	bf00      	nop

004043f0 <__retarget_lock_release_recursive>:
  4043f0:	4770      	bx	lr
  4043f2:	bf00      	nop

004043f4 <__swhatbuf_r>:
  4043f4:	b570      	push	{r4, r5, r6, lr}
  4043f6:	460c      	mov	r4, r1
  4043f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043fc:	2900      	cmp	r1, #0
  4043fe:	b090      	sub	sp, #64	; 0x40
  404400:	4615      	mov	r5, r2
  404402:	461e      	mov	r6, r3
  404404:	db14      	blt.n	404430 <__swhatbuf_r+0x3c>
  404406:	aa01      	add	r2, sp, #4
  404408:	f000 ff72 	bl	4052f0 <_fstat_r>
  40440c:	2800      	cmp	r0, #0
  40440e:	db0f      	blt.n	404430 <__swhatbuf_r+0x3c>
  404410:	9a02      	ldr	r2, [sp, #8]
  404412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404416:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40441a:	fab2 f282 	clz	r2, r2
  40441e:	0952      	lsrs	r2, r2, #5
  404420:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404424:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404428:	6032      	str	r2, [r6, #0]
  40442a:	602b      	str	r3, [r5, #0]
  40442c:	b010      	add	sp, #64	; 0x40
  40442e:	bd70      	pop	{r4, r5, r6, pc}
  404430:	89a2      	ldrh	r2, [r4, #12]
  404432:	2300      	movs	r3, #0
  404434:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404438:	6033      	str	r3, [r6, #0]
  40443a:	d004      	beq.n	404446 <__swhatbuf_r+0x52>
  40443c:	2240      	movs	r2, #64	; 0x40
  40443e:	4618      	mov	r0, r3
  404440:	602a      	str	r2, [r5, #0]
  404442:	b010      	add	sp, #64	; 0x40
  404444:	bd70      	pop	{r4, r5, r6, pc}
  404446:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40444a:	602b      	str	r3, [r5, #0]
  40444c:	b010      	add	sp, #64	; 0x40
  40444e:	bd70      	pop	{r4, r5, r6, pc}

00404450 <__smakebuf_r>:
  404450:	898a      	ldrh	r2, [r1, #12]
  404452:	0792      	lsls	r2, r2, #30
  404454:	460b      	mov	r3, r1
  404456:	d506      	bpl.n	404466 <__smakebuf_r+0x16>
  404458:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40445c:	2101      	movs	r1, #1
  40445e:	601a      	str	r2, [r3, #0]
  404460:	611a      	str	r2, [r3, #16]
  404462:	6159      	str	r1, [r3, #20]
  404464:	4770      	bx	lr
  404466:	b5f0      	push	{r4, r5, r6, r7, lr}
  404468:	b083      	sub	sp, #12
  40446a:	ab01      	add	r3, sp, #4
  40446c:	466a      	mov	r2, sp
  40446e:	460c      	mov	r4, r1
  404470:	4606      	mov	r6, r0
  404472:	f7ff ffbf 	bl	4043f4 <__swhatbuf_r>
  404476:	9900      	ldr	r1, [sp, #0]
  404478:	4605      	mov	r5, r0
  40447a:	4630      	mov	r0, r6
  40447c:	f000 f83a 	bl	4044f4 <_malloc_r>
  404480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404484:	b1d8      	cbz	r0, 4044be <__smakebuf_r+0x6e>
  404486:	9a01      	ldr	r2, [sp, #4]
  404488:	4f15      	ldr	r7, [pc, #84]	; (4044e0 <__smakebuf_r+0x90>)
  40448a:	9900      	ldr	r1, [sp, #0]
  40448c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40448e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404492:	81a3      	strh	r3, [r4, #12]
  404494:	6020      	str	r0, [r4, #0]
  404496:	6120      	str	r0, [r4, #16]
  404498:	6161      	str	r1, [r4, #20]
  40449a:	b91a      	cbnz	r2, 4044a4 <__smakebuf_r+0x54>
  40449c:	432b      	orrs	r3, r5
  40449e:	81a3      	strh	r3, [r4, #12]
  4044a0:	b003      	add	sp, #12
  4044a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044a4:	4630      	mov	r0, r6
  4044a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4044aa:	f000 ff35 	bl	405318 <_isatty_r>
  4044ae:	b1a0      	cbz	r0, 4044da <__smakebuf_r+0x8a>
  4044b0:	89a3      	ldrh	r3, [r4, #12]
  4044b2:	f023 0303 	bic.w	r3, r3, #3
  4044b6:	f043 0301 	orr.w	r3, r3, #1
  4044ba:	b21b      	sxth	r3, r3
  4044bc:	e7ee      	b.n	40449c <__smakebuf_r+0x4c>
  4044be:	059a      	lsls	r2, r3, #22
  4044c0:	d4ee      	bmi.n	4044a0 <__smakebuf_r+0x50>
  4044c2:	f023 0303 	bic.w	r3, r3, #3
  4044c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4044ca:	f043 0302 	orr.w	r3, r3, #2
  4044ce:	2101      	movs	r1, #1
  4044d0:	81a3      	strh	r3, [r4, #12]
  4044d2:	6022      	str	r2, [r4, #0]
  4044d4:	6122      	str	r2, [r4, #16]
  4044d6:	6161      	str	r1, [r4, #20]
  4044d8:	e7e2      	b.n	4044a0 <__smakebuf_r+0x50>
  4044da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4044de:	e7dd      	b.n	40449c <__smakebuf_r+0x4c>
  4044e0:	00403c11 	.word	0x00403c11

004044e4 <malloc>:
  4044e4:	4b02      	ldr	r3, [pc, #8]	; (4044f0 <malloc+0xc>)
  4044e6:	4601      	mov	r1, r0
  4044e8:	6818      	ldr	r0, [r3, #0]
  4044ea:	f000 b803 	b.w	4044f4 <_malloc_r>
  4044ee:	bf00      	nop
  4044f0:	20400020 	.word	0x20400020

004044f4 <_malloc_r>:
  4044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044f8:	f101 060b 	add.w	r6, r1, #11
  4044fc:	2e16      	cmp	r6, #22
  4044fe:	b083      	sub	sp, #12
  404500:	4605      	mov	r5, r0
  404502:	f240 809e 	bls.w	404642 <_malloc_r+0x14e>
  404506:	f036 0607 	bics.w	r6, r6, #7
  40450a:	f100 80bd 	bmi.w	404688 <_malloc_r+0x194>
  40450e:	42b1      	cmp	r1, r6
  404510:	f200 80ba 	bhi.w	404688 <_malloc_r+0x194>
  404514:	f000 fb68 	bl	404be8 <__malloc_lock>
  404518:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40451c:	f0c0 8293 	bcc.w	404a46 <_malloc_r+0x552>
  404520:	0a73      	lsrs	r3, r6, #9
  404522:	f000 80b8 	beq.w	404696 <_malloc_r+0x1a2>
  404526:	2b04      	cmp	r3, #4
  404528:	f200 8179 	bhi.w	40481e <_malloc_r+0x32a>
  40452c:	09b3      	lsrs	r3, r6, #6
  40452e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404532:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404536:	00c3      	lsls	r3, r0, #3
  404538:	4fbf      	ldr	r7, [pc, #764]	; (404838 <_malloc_r+0x344>)
  40453a:	443b      	add	r3, r7
  40453c:	f1a3 0108 	sub.w	r1, r3, #8
  404540:	685c      	ldr	r4, [r3, #4]
  404542:	42a1      	cmp	r1, r4
  404544:	d106      	bne.n	404554 <_malloc_r+0x60>
  404546:	e00c      	b.n	404562 <_malloc_r+0x6e>
  404548:	2a00      	cmp	r2, #0
  40454a:	f280 80aa 	bge.w	4046a2 <_malloc_r+0x1ae>
  40454e:	68e4      	ldr	r4, [r4, #12]
  404550:	42a1      	cmp	r1, r4
  404552:	d006      	beq.n	404562 <_malloc_r+0x6e>
  404554:	6863      	ldr	r3, [r4, #4]
  404556:	f023 0303 	bic.w	r3, r3, #3
  40455a:	1b9a      	subs	r2, r3, r6
  40455c:	2a0f      	cmp	r2, #15
  40455e:	ddf3      	ble.n	404548 <_malloc_r+0x54>
  404560:	4670      	mov	r0, lr
  404562:	693c      	ldr	r4, [r7, #16]
  404564:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40484c <_malloc_r+0x358>
  404568:	4574      	cmp	r4, lr
  40456a:	f000 81ab 	beq.w	4048c4 <_malloc_r+0x3d0>
  40456e:	6863      	ldr	r3, [r4, #4]
  404570:	f023 0303 	bic.w	r3, r3, #3
  404574:	1b9a      	subs	r2, r3, r6
  404576:	2a0f      	cmp	r2, #15
  404578:	f300 8190 	bgt.w	40489c <_malloc_r+0x3a8>
  40457c:	2a00      	cmp	r2, #0
  40457e:	f8c7 e014 	str.w	lr, [r7, #20]
  404582:	f8c7 e010 	str.w	lr, [r7, #16]
  404586:	f280 809d 	bge.w	4046c4 <_malloc_r+0x1d0>
  40458a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40458e:	f080 8161 	bcs.w	404854 <_malloc_r+0x360>
  404592:	08db      	lsrs	r3, r3, #3
  404594:	f103 0c01 	add.w	ip, r3, #1
  404598:	1099      	asrs	r1, r3, #2
  40459a:	687a      	ldr	r2, [r7, #4]
  40459c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4045a0:	f8c4 8008 	str.w	r8, [r4, #8]
  4045a4:	2301      	movs	r3, #1
  4045a6:	408b      	lsls	r3, r1
  4045a8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4045ac:	4313      	orrs	r3, r2
  4045ae:	3908      	subs	r1, #8
  4045b0:	60e1      	str	r1, [r4, #12]
  4045b2:	607b      	str	r3, [r7, #4]
  4045b4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4045b8:	f8c8 400c 	str.w	r4, [r8, #12]
  4045bc:	1082      	asrs	r2, r0, #2
  4045be:	2401      	movs	r4, #1
  4045c0:	4094      	lsls	r4, r2
  4045c2:	429c      	cmp	r4, r3
  4045c4:	f200 808b 	bhi.w	4046de <_malloc_r+0x1ea>
  4045c8:	421c      	tst	r4, r3
  4045ca:	d106      	bne.n	4045da <_malloc_r+0xe6>
  4045cc:	f020 0003 	bic.w	r0, r0, #3
  4045d0:	0064      	lsls	r4, r4, #1
  4045d2:	421c      	tst	r4, r3
  4045d4:	f100 0004 	add.w	r0, r0, #4
  4045d8:	d0fa      	beq.n	4045d0 <_malloc_r+0xdc>
  4045da:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4045de:	46cc      	mov	ip, r9
  4045e0:	4680      	mov	r8, r0
  4045e2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4045e6:	459c      	cmp	ip, r3
  4045e8:	d107      	bne.n	4045fa <_malloc_r+0x106>
  4045ea:	e16d      	b.n	4048c8 <_malloc_r+0x3d4>
  4045ec:	2a00      	cmp	r2, #0
  4045ee:	f280 817b 	bge.w	4048e8 <_malloc_r+0x3f4>
  4045f2:	68db      	ldr	r3, [r3, #12]
  4045f4:	459c      	cmp	ip, r3
  4045f6:	f000 8167 	beq.w	4048c8 <_malloc_r+0x3d4>
  4045fa:	6859      	ldr	r1, [r3, #4]
  4045fc:	f021 0103 	bic.w	r1, r1, #3
  404600:	1b8a      	subs	r2, r1, r6
  404602:	2a0f      	cmp	r2, #15
  404604:	ddf2      	ble.n	4045ec <_malloc_r+0xf8>
  404606:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40460a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40460e:	9300      	str	r3, [sp, #0]
  404610:	199c      	adds	r4, r3, r6
  404612:	4628      	mov	r0, r5
  404614:	f046 0601 	orr.w	r6, r6, #1
  404618:	f042 0501 	orr.w	r5, r2, #1
  40461c:	605e      	str	r6, [r3, #4]
  40461e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404622:	f8cc 8008 	str.w	r8, [ip, #8]
  404626:	617c      	str	r4, [r7, #20]
  404628:	613c      	str	r4, [r7, #16]
  40462a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40462e:	f8c4 e008 	str.w	lr, [r4, #8]
  404632:	6065      	str	r5, [r4, #4]
  404634:	505a      	str	r2, [r3, r1]
  404636:	f000 fadd 	bl	404bf4 <__malloc_unlock>
  40463a:	9b00      	ldr	r3, [sp, #0]
  40463c:	f103 0408 	add.w	r4, r3, #8
  404640:	e01e      	b.n	404680 <_malloc_r+0x18c>
  404642:	2910      	cmp	r1, #16
  404644:	d820      	bhi.n	404688 <_malloc_r+0x194>
  404646:	f000 facf 	bl	404be8 <__malloc_lock>
  40464a:	2610      	movs	r6, #16
  40464c:	2318      	movs	r3, #24
  40464e:	2002      	movs	r0, #2
  404650:	4f79      	ldr	r7, [pc, #484]	; (404838 <_malloc_r+0x344>)
  404652:	443b      	add	r3, r7
  404654:	f1a3 0208 	sub.w	r2, r3, #8
  404658:	685c      	ldr	r4, [r3, #4]
  40465a:	4294      	cmp	r4, r2
  40465c:	f000 813d 	beq.w	4048da <_malloc_r+0x3e6>
  404660:	6863      	ldr	r3, [r4, #4]
  404662:	68e1      	ldr	r1, [r4, #12]
  404664:	68a6      	ldr	r6, [r4, #8]
  404666:	f023 0303 	bic.w	r3, r3, #3
  40466a:	4423      	add	r3, r4
  40466c:	4628      	mov	r0, r5
  40466e:	685a      	ldr	r2, [r3, #4]
  404670:	60f1      	str	r1, [r6, #12]
  404672:	f042 0201 	orr.w	r2, r2, #1
  404676:	608e      	str	r6, [r1, #8]
  404678:	605a      	str	r2, [r3, #4]
  40467a:	f000 fabb 	bl	404bf4 <__malloc_unlock>
  40467e:	3408      	adds	r4, #8
  404680:	4620      	mov	r0, r4
  404682:	b003      	add	sp, #12
  404684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404688:	2400      	movs	r4, #0
  40468a:	230c      	movs	r3, #12
  40468c:	4620      	mov	r0, r4
  40468e:	602b      	str	r3, [r5, #0]
  404690:	b003      	add	sp, #12
  404692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404696:	2040      	movs	r0, #64	; 0x40
  404698:	f44f 7300 	mov.w	r3, #512	; 0x200
  40469c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4046a0:	e74a      	b.n	404538 <_malloc_r+0x44>
  4046a2:	4423      	add	r3, r4
  4046a4:	68e1      	ldr	r1, [r4, #12]
  4046a6:	685a      	ldr	r2, [r3, #4]
  4046a8:	68a6      	ldr	r6, [r4, #8]
  4046aa:	f042 0201 	orr.w	r2, r2, #1
  4046ae:	60f1      	str	r1, [r6, #12]
  4046b0:	4628      	mov	r0, r5
  4046b2:	608e      	str	r6, [r1, #8]
  4046b4:	605a      	str	r2, [r3, #4]
  4046b6:	f000 fa9d 	bl	404bf4 <__malloc_unlock>
  4046ba:	3408      	adds	r4, #8
  4046bc:	4620      	mov	r0, r4
  4046be:	b003      	add	sp, #12
  4046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c4:	4423      	add	r3, r4
  4046c6:	4628      	mov	r0, r5
  4046c8:	685a      	ldr	r2, [r3, #4]
  4046ca:	f042 0201 	orr.w	r2, r2, #1
  4046ce:	605a      	str	r2, [r3, #4]
  4046d0:	f000 fa90 	bl	404bf4 <__malloc_unlock>
  4046d4:	3408      	adds	r4, #8
  4046d6:	4620      	mov	r0, r4
  4046d8:	b003      	add	sp, #12
  4046da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046de:	68bc      	ldr	r4, [r7, #8]
  4046e0:	6863      	ldr	r3, [r4, #4]
  4046e2:	f023 0803 	bic.w	r8, r3, #3
  4046e6:	45b0      	cmp	r8, r6
  4046e8:	d304      	bcc.n	4046f4 <_malloc_r+0x200>
  4046ea:	eba8 0306 	sub.w	r3, r8, r6
  4046ee:	2b0f      	cmp	r3, #15
  4046f0:	f300 8085 	bgt.w	4047fe <_malloc_r+0x30a>
  4046f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404850 <_malloc_r+0x35c>
  4046f8:	4b50      	ldr	r3, [pc, #320]	; (40483c <_malloc_r+0x348>)
  4046fa:	f8d9 2000 	ldr.w	r2, [r9]
  4046fe:	681b      	ldr	r3, [r3, #0]
  404700:	3201      	adds	r2, #1
  404702:	4433      	add	r3, r6
  404704:	eb04 0a08 	add.w	sl, r4, r8
  404708:	f000 8155 	beq.w	4049b6 <_malloc_r+0x4c2>
  40470c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404710:	330f      	adds	r3, #15
  404712:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404716:	f02b 0b0f 	bic.w	fp, fp, #15
  40471a:	4659      	mov	r1, fp
  40471c:	4628      	mov	r0, r5
  40471e:	f000 fc15 	bl	404f4c <_sbrk_r>
  404722:	1c41      	adds	r1, r0, #1
  404724:	4602      	mov	r2, r0
  404726:	f000 80fc 	beq.w	404922 <_malloc_r+0x42e>
  40472a:	4582      	cmp	sl, r0
  40472c:	f200 80f7 	bhi.w	40491e <_malloc_r+0x42a>
  404730:	4b43      	ldr	r3, [pc, #268]	; (404840 <_malloc_r+0x34c>)
  404732:	6819      	ldr	r1, [r3, #0]
  404734:	4459      	add	r1, fp
  404736:	6019      	str	r1, [r3, #0]
  404738:	f000 814d 	beq.w	4049d6 <_malloc_r+0x4e2>
  40473c:	f8d9 0000 	ldr.w	r0, [r9]
  404740:	3001      	adds	r0, #1
  404742:	bf1b      	ittet	ne
  404744:	eba2 0a0a 	subne.w	sl, r2, sl
  404748:	4451      	addne	r1, sl
  40474a:	f8c9 2000 	streq.w	r2, [r9]
  40474e:	6019      	strne	r1, [r3, #0]
  404750:	f012 0107 	ands.w	r1, r2, #7
  404754:	f000 8115 	beq.w	404982 <_malloc_r+0x48e>
  404758:	f1c1 0008 	rsb	r0, r1, #8
  40475c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404760:	4402      	add	r2, r0
  404762:	3108      	adds	r1, #8
  404764:	eb02 090b 	add.w	r9, r2, fp
  404768:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40476c:	eba1 0909 	sub.w	r9, r1, r9
  404770:	4649      	mov	r1, r9
  404772:	4628      	mov	r0, r5
  404774:	9301      	str	r3, [sp, #4]
  404776:	9200      	str	r2, [sp, #0]
  404778:	f000 fbe8 	bl	404f4c <_sbrk_r>
  40477c:	1c43      	adds	r3, r0, #1
  40477e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404782:	f000 8143 	beq.w	404a0c <_malloc_r+0x518>
  404786:	1a80      	subs	r0, r0, r2
  404788:	4448      	add	r0, r9
  40478a:	f040 0001 	orr.w	r0, r0, #1
  40478e:	6819      	ldr	r1, [r3, #0]
  404790:	60ba      	str	r2, [r7, #8]
  404792:	4449      	add	r1, r9
  404794:	42bc      	cmp	r4, r7
  404796:	6050      	str	r0, [r2, #4]
  404798:	6019      	str	r1, [r3, #0]
  40479a:	d017      	beq.n	4047cc <_malloc_r+0x2d8>
  40479c:	f1b8 0f0f 	cmp.w	r8, #15
  4047a0:	f240 80fb 	bls.w	40499a <_malloc_r+0x4a6>
  4047a4:	6860      	ldr	r0, [r4, #4]
  4047a6:	f1a8 020c 	sub.w	r2, r8, #12
  4047aa:	f022 0207 	bic.w	r2, r2, #7
  4047ae:	eb04 0e02 	add.w	lr, r4, r2
  4047b2:	f000 0001 	and.w	r0, r0, #1
  4047b6:	f04f 0c05 	mov.w	ip, #5
  4047ba:	4310      	orrs	r0, r2
  4047bc:	2a0f      	cmp	r2, #15
  4047be:	6060      	str	r0, [r4, #4]
  4047c0:	f8ce c004 	str.w	ip, [lr, #4]
  4047c4:	f8ce c008 	str.w	ip, [lr, #8]
  4047c8:	f200 8117 	bhi.w	4049fa <_malloc_r+0x506>
  4047cc:	4b1d      	ldr	r3, [pc, #116]	; (404844 <_malloc_r+0x350>)
  4047ce:	68bc      	ldr	r4, [r7, #8]
  4047d0:	681a      	ldr	r2, [r3, #0]
  4047d2:	4291      	cmp	r1, r2
  4047d4:	bf88      	it	hi
  4047d6:	6019      	strhi	r1, [r3, #0]
  4047d8:	4b1b      	ldr	r3, [pc, #108]	; (404848 <_malloc_r+0x354>)
  4047da:	681a      	ldr	r2, [r3, #0]
  4047dc:	4291      	cmp	r1, r2
  4047de:	6862      	ldr	r2, [r4, #4]
  4047e0:	bf88      	it	hi
  4047e2:	6019      	strhi	r1, [r3, #0]
  4047e4:	f022 0203 	bic.w	r2, r2, #3
  4047e8:	4296      	cmp	r6, r2
  4047ea:	eba2 0306 	sub.w	r3, r2, r6
  4047ee:	d801      	bhi.n	4047f4 <_malloc_r+0x300>
  4047f0:	2b0f      	cmp	r3, #15
  4047f2:	dc04      	bgt.n	4047fe <_malloc_r+0x30a>
  4047f4:	4628      	mov	r0, r5
  4047f6:	f000 f9fd 	bl	404bf4 <__malloc_unlock>
  4047fa:	2400      	movs	r4, #0
  4047fc:	e740      	b.n	404680 <_malloc_r+0x18c>
  4047fe:	19a2      	adds	r2, r4, r6
  404800:	f043 0301 	orr.w	r3, r3, #1
  404804:	f046 0601 	orr.w	r6, r6, #1
  404808:	6066      	str	r6, [r4, #4]
  40480a:	4628      	mov	r0, r5
  40480c:	60ba      	str	r2, [r7, #8]
  40480e:	6053      	str	r3, [r2, #4]
  404810:	f000 f9f0 	bl	404bf4 <__malloc_unlock>
  404814:	3408      	adds	r4, #8
  404816:	4620      	mov	r0, r4
  404818:	b003      	add	sp, #12
  40481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40481e:	2b14      	cmp	r3, #20
  404820:	d971      	bls.n	404906 <_malloc_r+0x412>
  404822:	2b54      	cmp	r3, #84	; 0x54
  404824:	f200 80a3 	bhi.w	40496e <_malloc_r+0x47a>
  404828:	0b33      	lsrs	r3, r6, #12
  40482a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40482e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404832:	00c3      	lsls	r3, r0, #3
  404834:	e680      	b.n	404538 <_malloc_r+0x44>
  404836:	bf00      	nop
  404838:	204005c0 	.word	0x204005c0
  40483c:	2040abd8 	.word	0x2040abd8
  404840:	2040aba8 	.word	0x2040aba8
  404844:	2040abd0 	.word	0x2040abd0
  404848:	2040abd4 	.word	0x2040abd4
  40484c:	204005c8 	.word	0x204005c8
  404850:	204009c8 	.word	0x204009c8
  404854:	0a5a      	lsrs	r2, r3, #9
  404856:	2a04      	cmp	r2, #4
  404858:	d95b      	bls.n	404912 <_malloc_r+0x41e>
  40485a:	2a14      	cmp	r2, #20
  40485c:	f200 80ae 	bhi.w	4049bc <_malloc_r+0x4c8>
  404860:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404864:	00c9      	lsls	r1, r1, #3
  404866:	325b      	adds	r2, #91	; 0x5b
  404868:	eb07 0c01 	add.w	ip, r7, r1
  40486c:	5879      	ldr	r1, [r7, r1]
  40486e:	f1ac 0c08 	sub.w	ip, ip, #8
  404872:	458c      	cmp	ip, r1
  404874:	f000 8088 	beq.w	404988 <_malloc_r+0x494>
  404878:	684a      	ldr	r2, [r1, #4]
  40487a:	f022 0203 	bic.w	r2, r2, #3
  40487e:	4293      	cmp	r3, r2
  404880:	d273      	bcs.n	40496a <_malloc_r+0x476>
  404882:	6889      	ldr	r1, [r1, #8]
  404884:	458c      	cmp	ip, r1
  404886:	d1f7      	bne.n	404878 <_malloc_r+0x384>
  404888:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40488c:	687b      	ldr	r3, [r7, #4]
  40488e:	60e2      	str	r2, [r4, #12]
  404890:	f8c4 c008 	str.w	ip, [r4, #8]
  404894:	6094      	str	r4, [r2, #8]
  404896:	f8cc 400c 	str.w	r4, [ip, #12]
  40489a:	e68f      	b.n	4045bc <_malloc_r+0xc8>
  40489c:	19a1      	adds	r1, r4, r6
  40489e:	f046 0c01 	orr.w	ip, r6, #1
  4048a2:	f042 0601 	orr.w	r6, r2, #1
  4048a6:	f8c4 c004 	str.w	ip, [r4, #4]
  4048aa:	4628      	mov	r0, r5
  4048ac:	6179      	str	r1, [r7, #20]
  4048ae:	6139      	str	r1, [r7, #16]
  4048b0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4048b4:	f8c1 e008 	str.w	lr, [r1, #8]
  4048b8:	604e      	str	r6, [r1, #4]
  4048ba:	50e2      	str	r2, [r4, r3]
  4048bc:	f000 f99a 	bl	404bf4 <__malloc_unlock>
  4048c0:	3408      	adds	r4, #8
  4048c2:	e6dd      	b.n	404680 <_malloc_r+0x18c>
  4048c4:	687b      	ldr	r3, [r7, #4]
  4048c6:	e679      	b.n	4045bc <_malloc_r+0xc8>
  4048c8:	f108 0801 	add.w	r8, r8, #1
  4048cc:	f018 0f03 	tst.w	r8, #3
  4048d0:	f10c 0c08 	add.w	ip, ip, #8
  4048d4:	f47f ae85 	bne.w	4045e2 <_malloc_r+0xee>
  4048d8:	e02d      	b.n	404936 <_malloc_r+0x442>
  4048da:	68dc      	ldr	r4, [r3, #12]
  4048dc:	42a3      	cmp	r3, r4
  4048de:	bf08      	it	eq
  4048e0:	3002      	addeq	r0, #2
  4048e2:	f43f ae3e 	beq.w	404562 <_malloc_r+0x6e>
  4048e6:	e6bb      	b.n	404660 <_malloc_r+0x16c>
  4048e8:	4419      	add	r1, r3
  4048ea:	461c      	mov	r4, r3
  4048ec:	684a      	ldr	r2, [r1, #4]
  4048ee:	68db      	ldr	r3, [r3, #12]
  4048f0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4048f4:	f042 0201 	orr.w	r2, r2, #1
  4048f8:	604a      	str	r2, [r1, #4]
  4048fa:	4628      	mov	r0, r5
  4048fc:	60f3      	str	r3, [r6, #12]
  4048fe:	609e      	str	r6, [r3, #8]
  404900:	f000 f978 	bl	404bf4 <__malloc_unlock>
  404904:	e6bc      	b.n	404680 <_malloc_r+0x18c>
  404906:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40490a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40490e:	00c3      	lsls	r3, r0, #3
  404910:	e612      	b.n	404538 <_malloc_r+0x44>
  404912:	099a      	lsrs	r2, r3, #6
  404914:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404918:	00c9      	lsls	r1, r1, #3
  40491a:	3238      	adds	r2, #56	; 0x38
  40491c:	e7a4      	b.n	404868 <_malloc_r+0x374>
  40491e:	42bc      	cmp	r4, r7
  404920:	d054      	beq.n	4049cc <_malloc_r+0x4d8>
  404922:	68bc      	ldr	r4, [r7, #8]
  404924:	6862      	ldr	r2, [r4, #4]
  404926:	f022 0203 	bic.w	r2, r2, #3
  40492a:	e75d      	b.n	4047e8 <_malloc_r+0x2f4>
  40492c:	f859 3908 	ldr.w	r3, [r9], #-8
  404930:	4599      	cmp	r9, r3
  404932:	f040 8086 	bne.w	404a42 <_malloc_r+0x54e>
  404936:	f010 0f03 	tst.w	r0, #3
  40493a:	f100 30ff 	add.w	r0, r0, #4294967295
  40493e:	d1f5      	bne.n	40492c <_malloc_r+0x438>
  404940:	687b      	ldr	r3, [r7, #4]
  404942:	ea23 0304 	bic.w	r3, r3, r4
  404946:	607b      	str	r3, [r7, #4]
  404948:	0064      	lsls	r4, r4, #1
  40494a:	429c      	cmp	r4, r3
  40494c:	f63f aec7 	bhi.w	4046de <_malloc_r+0x1ea>
  404950:	2c00      	cmp	r4, #0
  404952:	f43f aec4 	beq.w	4046de <_malloc_r+0x1ea>
  404956:	421c      	tst	r4, r3
  404958:	4640      	mov	r0, r8
  40495a:	f47f ae3e 	bne.w	4045da <_malloc_r+0xe6>
  40495e:	0064      	lsls	r4, r4, #1
  404960:	421c      	tst	r4, r3
  404962:	f100 0004 	add.w	r0, r0, #4
  404966:	d0fa      	beq.n	40495e <_malloc_r+0x46a>
  404968:	e637      	b.n	4045da <_malloc_r+0xe6>
  40496a:	468c      	mov	ip, r1
  40496c:	e78c      	b.n	404888 <_malloc_r+0x394>
  40496e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404972:	d815      	bhi.n	4049a0 <_malloc_r+0x4ac>
  404974:	0bf3      	lsrs	r3, r6, #15
  404976:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40497a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40497e:	00c3      	lsls	r3, r0, #3
  404980:	e5da      	b.n	404538 <_malloc_r+0x44>
  404982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404986:	e6ed      	b.n	404764 <_malloc_r+0x270>
  404988:	687b      	ldr	r3, [r7, #4]
  40498a:	1092      	asrs	r2, r2, #2
  40498c:	2101      	movs	r1, #1
  40498e:	fa01 f202 	lsl.w	r2, r1, r2
  404992:	4313      	orrs	r3, r2
  404994:	607b      	str	r3, [r7, #4]
  404996:	4662      	mov	r2, ip
  404998:	e779      	b.n	40488e <_malloc_r+0x39a>
  40499a:	2301      	movs	r3, #1
  40499c:	6053      	str	r3, [r2, #4]
  40499e:	e729      	b.n	4047f4 <_malloc_r+0x300>
  4049a0:	f240 5254 	movw	r2, #1364	; 0x554
  4049a4:	4293      	cmp	r3, r2
  4049a6:	d822      	bhi.n	4049ee <_malloc_r+0x4fa>
  4049a8:	0cb3      	lsrs	r3, r6, #18
  4049aa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4049ae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4049b2:	00c3      	lsls	r3, r0, #3
  4049b4:	e5c0      	b.n	404538 <_malloc_r+0x44>
  4049b6:	f103 0b10 	add.w	fp, r3, #16
  4049ba:	e6ae      	b.n	40471a <_malloc_r+0x226>
  4049bc:	2a54      	cmp	r2, #84	; 0x54
  4049be:	d829      	bhi.n	404a14 <_malloc_r+0x520>
  4049c0:	0b1a      	lsrs	r2, r3, #12
  4049c2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4049c6:	00c9      	lsls	r1, r1, #3
  4049c8:	326e      	adds	r2, #110	; 0x6e
  4049ca:	e74d      	b.n	404868 <_malloc_r+0x374>
  4049cc:	4b20      	ldr	r3, [pc, #128]	; (404a50 <_malloc_r+0x55c>)
  4049ce:	6819      	ldr	r1, [r3, #0]
  4049d0:	4459      	add	r1, fp
  4049d2:	6019      	str	r1, [r3, #0]
  4049d4:	e6b2      	b.n	40473c <_malloc_r+0x248>
  4049d6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4049da:	2800      	cmp	r0, #0
  4049dc:	f47f aeae 	bne.w	40473c <_malloc_r+0x248>
  4049e0:	eb08 030b 	add.w	r3, r8, fp
  4049e4:	68ba      	ldr	r2, [r7, #8]
  4049e6:	f043 0301 	orr.w	r3, r3, #1
  4049ea:	6053      	str	r3, [r2, #4]
  4049ec:	e6ee      	b.n	4047cc <_malloc_r+0x2d8>
  4049ee:	207f      	movs	r0, #127	; 0x7f
  4049f0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4049f4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4049f8:	e59e      	b.n	404538 <_malloc_r+0x44>
  4049fa:	f104 0108 	add.w	r1, r4, #8
  4049fe:	4628      	mov	r0, r5
  404a00:	9300      	str	r3, [sp, #0]
  404a02:	f7ff fa59 	bl	403eb8 <_free_r>
  404a06:	9b00      	ldr	r3, [sp, #0]
  404a08:	6819      	ldr	r1, [r3, #0]
  404a0a:	e6df      	b.n	4047cc <_malloc_r+0x2d8>
  404a0c:	2001      	movs	r0, #1
  404a0e:	f04f 0900 	mov.w	r9, #0
  404a12:	e6bc      	b.n	40478e <_malloc_r+0x29a>
  404a14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404a18:	d805      	bhi.n	404a26 <_malloc_r+0x532>
  404a1a:	0bda      	lsrs	r2, r3, #15
  404a1c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404a20:	00c9      	lsls	r1, r1, #3
  404a22:	3277      	adds	r2, #119	; 0x77
  404a24:	e720      	b.n	404868 <_malloc_r+0x374>
  404a26:	f240 5154 	movw	r1, #1364	; 0x554
  404a2a:	428a      	cmp	r2, r1
  404a2c:	d805      	bhi.n	404a3a <_malloc_r+0x546>
  404a2e:	0c9a      	lsrs	r2, r3, #18
  404a30:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404a34:	00c9      	lsls	r1, r1, #3
  404a36:	327c      	adds	r2, #124	; 0x7c
  404a38:	e716      	b.n	404868 <_malloc_r+0x374>
  404a3a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404a3e:	227e      	movs	r2, #126	; 0x7e
  404a40:	e712      	b.n	404868 <_malloc_r+0x374>
  404a42:	687b      	ldr	r3, [r7, #4]
  404a44:	e780      	b.n	404948 <_malloc_r+0x454>
  404a46:	08f0      	lsrs	r0, r6, #3
  404a48:	f106 0308 	add.w	r3, r6, #8
  404a4c:	e600      	b.n	404650 <_malloc_r+0x15c>
  404a4e:	bf00      	nop
  404a50:	2040aba8 	.word	0x2040aba8

00404a54 <__ascii_mbtowc>:
  404a54:	b082      	sub	sp, #8
  404a56:	b149      	cbz	r1, 404a6c <__ascii_mbtowc+0x18>
  404a58:	b15a      	cbz	r2, 404a72 <__ascii_mbtowc+0x1e>
  404a5a:	b16b      	cbz	r3, 404a78 <__ascii_mbtowc+0x24>
  404a5c:	7813      	ldrb	r3, [r2, #0]
  404a5e:	600b      	str	r3, [r1, #0]
  404a60:	7812      	ldrb	r2, [r2, #0]
  404a62:	1c10      	adds	r0, r2, #0
  404a64:	bf18      	it	ne
  404a66:	2001      	movne	r0, #1
  404a68:	b002      	add	sp, #8
  404a6a:	4770      	bx	lr
  404a6c:	a901      	add	r1, sp, #4
  404a6e:	2a00      	cmp	r2, #0
  404a70:	d1f3      	bne.n	404a5a <__ascii_mbtowc+0x6>
  404a72:	4610      	mov	r0, r2
  404a74:	b002      	add	sp, #8
  404a76:	4770      	bx	lr
  404a78:	f06f 0001 	mvn.w	r0, #1
  404a7c:	e7f4      	b.n	404a68 <__ascii_mbtowc+0x14>
  404a7e:	bf00      	nop

00404a80 <memchr>:
  404a80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404a84:	2a10      	cmp	r2, #16
  404a86:	db2b      	blt.n	404ae0 <memchr+0x60>
  404a88:	f010 0f07 	tst.w	r0, #7
  404a8c:	d008      	beq.n	404aa0 <memchr+0x20>
  404a8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404a92:	3a01      	subs	r2, #1
  404a94:	428b      	cmp	r3, r1
  404a96:	d02d      	beq.n	404af4 <memchr+0x74>
  404a98:	f010 0f07 	tst.w	r0, #7
  404a9c:	b342      	cbz	r2, 404af0 <memchr+0x70>
  404a9e:	d1f6      	bne.n	404a8e <memchr+0xe>
  404aa0:	b4f0      	push	{r4, r5, r6, r7}
  404aa2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404aa6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404aaa:	f022 0407 	bic.w	r4, r2, #7
  404aae:	f07f 0700 	mvns.w	r7, #0
  404ab2:	2300      	movs	r3, #0
  404ab4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404ab8:	3c08      	subs	r4, #8
  404aba:	ea85 0501 	eor.w	r5, r5, r1
  404abe:	ea86 0601 	eor.w	r6, r6, r1
  404ac2:	fa85 f547 	uadd8	r5, r5, r7
  404ac6:	faa3 f587 	sel	r5, r3, r7
  404aca:	fa86 f647 	uadd8	r6, r6, r7
  404ace:	faa5 f687 	sel	r6, r5, r7
  404ad2:	b98e      	cbnz	r6, 404af8 <memchr+0x78>
  404ad4:	d1ee      	bne.n	404ab4 <memchr+0x34>
  404ad6:	bcf0      	pop	{r4, r5, r6, r7}
  404ad8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404adc:	f002 0207 	and.w	r2, r2, #7
  404ae0:	b132      	cbz	r2, 404af0 <memchr+0x70>
  404ae2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ae6:	3a01      	subs	r2, #1
  404ae8:	ea83 0301 	eor.w	r3, r3, r1
  404aec:	b113      	cbz	r3, 404af4 <memchr+0x74>
  404aee:	d1f8      	bne.n	404ae2 <memchr+0x62>
  404af0:	2000      	movs	r0, #0
  404af2:	4770      	bx	lr
  404af4:	3801      	subs	r0, #1
  404af6:	4770      	bx	lr
  404af8:	2d00      	cmp	r5, #0
  404afa:	bf06      	itte	eq
  404afc:	4635      	moveq	r5, r6
  404afe:	3803      	subeq	r0, #3
  404b00:	3807      	subne	r0, #7
  404b02:	f015 0f01 	tst.w	r5, #1
  404b06:	d107      	bne.n	404b18 <memchr+0x98>
  404b08:	3001      	adds	r0, #1
  404b0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404b0e:	bf02      	ittt	eq
  404b10:	3001      	addeq	r0, #1
  404b12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404b16:	3001      	addeq	r0, #1
  404b18:	bcf0      	pop	{r4, r5, r6, r7}
  404b1a:	3801      	subs	r0, #1
  404b1c:	4770      	bx	lr
  404b1e:	bf00      	nop

00404b20 <memmove>:
  404b20:	4288      	cmp	r0, r1
  404b22:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b24:	d90d      	bls.n	404b42 <memmove+0x22>
  404b26:	188b      	adds	r3, r1, r2
  404b28:	4298      	cmp	r0, r3
  404b2a:	d20a      	bcs.n	404b42 <memmove+0x22>
  404b2c:	1884      	adds	r4, r0, r2
  404b2e:	2a00      	cmp	r2, #0
  404b30:	d051      	beq.n	404bd6 <memmove+0xb6>
  404b32:	4622      	mov	r2, r4
  404b34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404b38:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404b3c:	4299      	cmp	r1, r3
  404b3e:	d1f9      	bne.n	404b34 <memmove+0x14>
  404b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b42:	2a0f      	cmp	r2, #15
  404b44:	d948      	bls.n	404bd8 <memmove+0xb8>
  404b46:	ea41 0300 	orr.w	r3, r1, r0
  404b4a:	079b      	lsls	r3, r3, #30
  404b4c:	d146      	bne.n	404bdc <memmove+0xbc>
  404b4e:	f100 0410 	add.w	r4, r0, #16
  404b52:	f101 0310 	add.w	r3, r1, #16
  404b56:	4615      	mov	r5, r2
  404b58:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404b5c:	f844 6c10 	str.w	r6, [r4, #-16]
  404b60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404b64:	f844 6c0c 	str.w	r6, [r4, #-12]
  404b68:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404b6c:	f844 6c08 	str.w	r6, [r4, #-8]
  404b70:	3d10      	subs	r5, #16
  404b72:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404b76:	f844 6c04 	str.w	r6, [r4, #-4]
  404b7a:	2d0f      	cmp	r5, #15
  404b7c:	f103 0310 	add.w	r3, r3, #16
  404b80:	f104 0410 	add.w	r4, r4, #16
  404b84:	d8e8      	bhi.n	404b58 <memmove+0x38>
  404b86:	f1a2 0310 	sub.w	r3, r2, #16
  404b8a:	f023 030f 	bic.w	r3, r3, #15
  404b8e:	f002 0e0f 	and.w	lr, r2, #15
  404b92:	3310      	adds	r3, #16
  404b94:	f1be 0f03 	cmp.w	lr, #3
  404b98:	4419      	add	r1, r3
  404b9a:	4403      	add	r3, r0
  404b9c:	d921      	bls.n	404be2 <memmove+0xc2>
  404b9e:	1f1e      	subs	r6, r3, #4
  404ba0:	460d      	mov	r5, r1
  404ba2:	4674      	mov	r4, lr
  404ba4:	3c04      	subs	r4, #4
  404ba6:	f855 7b04 	ldr.w	r7, [r5], #4
  404baa:	f846 7f04 	str.w	r7, [r6, #4]!
  404bae:	2c03      	cmp	r4, #3
  404bb0:	d8f8      	bhi.n	404ba4 <memmove+0x84>
  404bb2:	f1ae 0404 	sub.w	r4, lr, #4
  404bb6:	f024 0403 	bic.w	r4, r4, #3
  404bba:	3404      	adds	r4, #4
  404bbc:	4421      	add	r1, r4
  404bbe:	4423      	add	r3, r4
  404bc0:	f002 0203 	and.w	r2, r2, #3
  404bc4:	b162      	cbz	r2, 404be0 <memmove+0xc0>
  404bc6:	3b01      	subs	r3, #1
  404bc8:	440a      	add	r2, r1
  404bca:	f811 4b01 	ldrb.w	r4, [r1], #1
  404bce:	f803 4f01 	strb.w	r4, [r3, #1]!
  404bd2:	428a      	cmp	r2, r1
  404bd4:	d1f9      	bne.n	404bca <memmove+0xaa>
  404bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404bd8:	4603      	mov	r3, r0
  404bda:	e7f3      	b.n	404bc4 <memmove+0xa4>
  404bdc:	4603      	mov	r3, r0
  404bde:	e7f2      	b.n	404bc6 <memmove+0xa6>
  404be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404be2:	4672      	mov	r2, lr
  404be4:	e7ee      	b.n	404bc4 <memmove+0xa4>
  404be6:	bf00      	nop

00404be8 <__malloc_lock>:
  404be8:	4801      	ldr	r0, [pc, #4]	; (404bf0 <__malloc_lock+0x8>)
  404bea:	f7ff bbff 	b.w	4043ec <__retarget_lock_acquire_recursive>
  404bee:	bf00      	nop
  404bf0:	2040ac00 	.word	0x2040ac00

00404bf4 <__malloc_unlock>:
  404bf4:	4801      	ldr	r0, [pc, #4]	; (404bfc <__malloc_unlock+0x8>)
  404bf6:	f7ff bbfb 	b.w	4043f0 <__retarget_lock_release_recursive>
  404bfa:	bf00      	nop
  404bfc:	2040ac00 	.word	0x2040ac00

00404c00 <_realloc_r>:
  404c00:	2900      	cmp	r1, #0
  404c02:	f000 8095 	beq.w	404d30 <_realloc_r+0x130>
  404c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c0a:	460d      	mov	r5, r1
  404c0c:	4616      	mov	r6, r2
  404c0e:	b083      	sub	sp, #12
  404c10:	4680      	mov	r8, r0
  404c12:	f106 070b 	add.w	r7, r6, #11
  404c16:	f7ff ffe7 	bl	404be8 <__malloc_lock>
  404c1a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404c1e:	2f16      	cmp	r7, #22
  404c20:	f02e 0403 	bic.w	r4, lr, #3
  404c24:	f1a5 0908 	sub.w	r9, r5, #8
  404c28:	d83c      	bhi.n	404ca4 <_realloc_r+0xa4>
  404c2a:	2210      	movs	r2, #16
  404c2c:	4617      	mov	r7, r2
  404c2e:	42be      	cmp	r6, r7
  404c30:	d83d      	bhi.n	404cae <_realloc_r+0xae>
  404c32:	4294      	cmp	r4, r2
  404c34:	da43      	bge.n	404cbe <_realloc_r+0xbe>
  404c36:	4bc4      	ldr	r3, [pc, #784]	; (404f48 <_realloc_r+0x348>)
  404c38:	6899      	ldr	r1, [r3, #8]
  404c3a:	eb09 0004 	add.w	r0, r9, r4
  404c3e:	4288      	cmp	r0, r1
  404c40:	f000 80b4 	beq.w	404dac <_realloc_r+0x1ac>
  404c44:	6843      	ldr	r3, [r0, #4]
  404c46:	f023 0101 	bic.w	r1, r3, #1
  404c4a:	4401      	add	r1, r0
  404c4c:	6849      	ldr	r1, [r1, #4]
  404c4e:	07c9      	lsls	r1, r1, #31
  404c50:	d54c      	bpl.n	404cec <_realloc_r+0xec>
  404c52:	f01e 0f01 	tst.w	lr, #1
  404c56:	f000 809b 	beq.w	404d90 <_realloc_r+0x190>
  404c5a:	4631      	mov	r1, r6
  404c5c:	4640      	mov	r0, r8
  404c5e:	f7ff fc49 	bl	4044f4 <_malloc_r>
  404c62:	4606      	mov	r6, r0
  404c64:	2800      	cmp	r0, #0
  404c66:	d03a      	beq.n	404cde <_realloc_r+0xde>
  404c68:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404c6c:	f023 0301 	bic.w	r3, r3, #1
  404c70:	444b      	add	r3, r9
  404c72:	f1a0 0208 	sub.w	r2, r0, #8
  404c76:	429a      	cmp	r2, r3
  404c78:	f000 8121 	beq.w	404ebe <_realloc_r+0x2be>
  404c7c:	1f22      	subs	r2, r4, #4
  404c7e:	2a24      	cmp	r2, #36	; 0x24
  404c80:	f200 8107 	bhi.w	404e92 <_realloc_r+0x292>
  404c84:	2a13      	cmp	r2, #19
  404c86:	f200 80db 	bhi.w	404e40 <_realloc_r+0x240>
  404c8a:	4603      	mov	r3, r0
  404c8c:	462a      	mov	r2, r5
  404c8e:	6811      	ldr	r1, [r2, #0]
  404c90:	6019      	str	r1, [r3, #0]
  404c92:	6851      	ldr	r1, [r2, #4]
  404c94:	6059      	str	r1, [r3, #4]
  404c96:	6892      	ldr	r2, [r2, #8]
  404c98:	609a      	str	r2, [r3, #8]
  404c9a:	4629      	mov	r1, r5
  404c9c:	4640      	mov	r0, r8
  404c9e:	f7ff f90b 	bl	403eb8 <_free_r>
  404ca2:	e01c      	b.n	404cde <_realloc_r+0xde>
  404ca4:	f027 0707 	bic.w	r7, r7, #7
  404ca8:	2f00      	cmp	r7, #0
  404caa:	463a      	mov	r2, r7
  404cac:	dabf      	bge.n	404c2e <_realloc_r+0x2e>
  404cae:	2600      	movs	r6, #0
  404cb0:	230c      	movs	r3, #12
  404cb2:	4630      	mov	r0, r6
  404cb4:	f8c8 3000 	str.w	r3, [r8]
  404cb8:	b003      	add	sp, #12
  404cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cbe:	462e      	mov	r6, r5
  404cc0:	1be3      	subs	r3, r4, r7
  404cc2:	2b0f      	cmp	r3, #15
  404cc4:	d81e      	bhi.n	404d04 <_realloc_r+0x104>
  404cc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404cca:	f003 0301 	and.w	r3, r3, #1
  404cce:	4323      	orrs	r3, r4
  404cd0:	444c      	add	r4, r9
  404cd2:	f8c9 3004 	str.w	r3, [r9, #4]
  404cd6:	6863      	ldr	r3, [r4, #4]
  404cd8:	f043 0301 	orr.w	r3, r3, #1
  404cdc:	6063      	str	r3, [r4, #4]
  404cde:	4640      	mov	r0, r8
  404ce0:	f7ff ff88 	bl	404bf4 <__malloc_unlock>
  404ce4:	4630      	mov	r0, r6
  404ce6:	b003      	add	sp, #12
  404ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cec:	f023 0303 	bic.w	r3, r3, #3
  404cf0:	18e1      	adds	r1, r4, r3
  404cf2:	4291      	cmp	r1, r2
  404cf4:	db1f      	blt.n	404d36 <_realloc_r+0x136>
  404cf6:	68c3      	ldr	r3, [r0, #12]
  404cf8:	6882      	ldr	r2, [r0, #8]
  404cfa:	462e      	mov	r6, r5
  404cfc:	60d3      	str	r3, [r2, #12]
  404cfe:	460c      	mov	r4, r1
  404d00:	609a      	str	r2, [r3, #8]
  404d02:	e7dd      	b.n	404cc0 <_realloc_r+0xc0>
  404d04:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404d08:	eb09 0107 	add.w	r1, r9, r7
  404d0c:	f002 0201 	and.w	r2, r2, #1
  404d10:	444c      	add	r4, r9
  404d12:	f043 0301 	orr.w	r3, r3, #1
  404d16:	4317      	orrs	r7, r2
  404d18:	f8c9 7004 	str.w	r7, [r9, #4]
  404d1c:	604b      	str	r3, [r1, #4]
  404d1e:	6863      	ldr	r3, [r4, #4]
  404d20:	f043 0301 	orr.w	r3, r3, #1
  404d24:	3108      	adds	r1, #8
  404d26:	6063      	str	r3, [r4, #4]
  404d28:	4640      	mov	r0, r8
  404d2a:	f7ff f8c5 	bl	403eb8 <_free_r>
  404d2e:	e7d6      	b.n	404cde <_realloc_r+0xde>
  404d30:	4611      	mov	r1, r2
  404d32:	f7ff bbdf 	b.w	4044f4 <_malloc_r>
  404d36:	f01e 0f01 	tst.w	lr, #1
  404d3a:	d18e      	bne.n	404c5a <_realloc_r+0x5a>
  404d3c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404d40:	eba9 0a01 	sub.w	sl, r9, r1
  404d44:	f8da 1004 	ldr.w	r1, [sl, #4]
  404d48:	f021 0103 	bic.w	r1, r1, #3
  404d4c:	440b      	add	r3, r1
  404d4e:	4423      	add	r3, r4
  404d50:	4293      	cmp	r3, r2
  404d52:	db25      	blt.n	404da0 <_realloc_r+0x1a0>
  404d54:	68c2      	ldr	r2, [r0, #12]
  404d56:	6881      	ldr	r1, [r0, #8]
  404d58:	4656      	mov	r6, sl
  404d5a:	60ca      	str	r2, [r1, #12]
  404d5c:	6091      	str	r1, [r2, #8]
  404d5e:	f8da 100c 	ldr.w	r1, [sl, #12]
  404d62:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404d66:	1f22      	subs	r2, r4, #4
  404d68:	2a24      	cmp	r2, #36	; 0x24
  404d6a:	60c1      	str	r1, [r0, #12]
  404d6c:	6088      	str	r0, [r1, #8]
  404d6e:	f200 8094 	bhi.w	404e9a <_realloc_r+0x29a>
  404d72:	2a13      	cmp	r2, #19
  404d74:	d96f      	bls.n	404e56 <_realloc_r+0x256>
  404d76:	6829      	ldr	r1, [r5, #0]
  404d78:	f8ca 1008 	str.w	r1, [sl, #8]
  404d7c:	6869      	ldr	r1, [r5, #4]
  404d7e:	f8ca 100c 	str.w	r1, [sl, #12]
  404d82:	2a1b      	cmp	r2, #27
  404d84:	f200 80a2 	bhi.w	404ecc <_realloc_r+0x2cc>
  404d88:	3508      	adds	r5, #8
  404d8a:	f10a 0210 	add.w	r2, sl, #16
  404d8e:	e063      	b.n	404e58 <_realloc_r+0x258>
  404d90:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404d94:	eba9 0a03 	sub.w	sl, r9, r3
  404d98:	f8da 1004 	ldr.w	r1, [sl, #4]
  404d9c:	f021 0103 	bic.w	r1, r1, #3
  404da0:	1863      	adds	r3, r4, r1
  404da2:	4293      	cmp	r3, r2
  404da4:	f6ff af59 	blt.w	404c5a <_realloc_r+0x5a>
  404da8:	4656      	mov	r6, sl
  404daa:	e7d8      	b.n	404d5e <_realloc_r+0x15e>
  404dac:	6841      	ldr	r1, [r0, #4]
  404dae:	f021 0b03 	bic.w	fp, r1, #3
  404db2:	44a3      	add	fp, r4
  404db4:	f107 0010 	add.w	r0, r7, #16
  404db8:	4583      	cmp	fp, r0
  404dba:	da56      	bge.n	404e6a <_realloc_r+0x26a>
  404dbc:	f01e 0f01 	tst.w	lr, #1
  404dc0:	f47f af4b 	bne.w	404c5a <_realloc_r+0x5a>
  404dc4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404dc8:	eba9 0a01 	sub.w	sl, r9, r1
  404dcc:	f8da 1004 	ldr.w	r1, [sl, #4]
  404dd0:	f021 0103 	bic.w	r1, r1, #3
  404dd4:	448b      	add	fp, r1
  404dd6:	4558      	cmp	r0, fp
  404dd8:	dce2      	bgt.n	404da0 <_realloc_r+0x1a0>
  404dda:	4656      	mov	r6, sl
  404ddc:	f8da 100c 	ldr.w	r1, [sl, #12]
  404de0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404de4:	1f22      	subs	r2, r4, #4
  404de6:	2a24      	cmp	r2, #36	; 0x24
  404de8:	60c1      	str	r1, [r0, #12]
  404dea:	6088      	str	r0, [r1, #8]
  404dec:	f200 808f 	bhi.w	404f0e <_realloc_r+0x30e>
  404df0:	2a13      	cmp	r2, #19
  404df2:	f240 808a 	bls.w	404f0a <_realloc_r+0x30a>
  404df6:	6829      	ldr	r1, [r5, #0]
  404df8:	f8ca 1008 	str.w	r1, [sl, #8]
  404dfc:	6869      	ldr	r1, [r5, #4]
  404dfe:	f8ca 100c 	str.w	r1, [sl, #12]
  404e02:	2a1b      	cmp	r2, #27
  404e04:	f200 808a 	bhi.w	404f1c <_realloc_r+0x31c>
  404e08:	3508      	adds	r5, #8
  404e0a:	f10a 0210 	add.w	r2, sl, #16
  404e0e:	6829      	ldr	r1, [r5, #0]
  404e10:	6011      	str	r1, [r2, #0]
  404e12:	6869      	ldr	r1, [r5, #4]
  404e14:	6051      	str	r1, [r2, #4]
  404e16:	68a9      	ldr	r1, [r5, #8]
  404e18:	6091      	str	r1, [r2, #8]
  404e1a:	eb0a 0107 	add.w	r1, sl, r7
  404e1e:	ebab 0207 	sub.w	r2, fp, r7
  404e22:	f042 0201 	orr.w	r2, r2, #1
  404e26:	6099      	str	r1, [r3, #8]
  404e28:	604a      	str	r2, [r1, #4]
  404e2a:	f8da 3004 	ldr.w	r3, [sl, #4]
  404e2e:	f003 0301 	and.w	r3, r3, #1
  404e32:	431f      	orrs	r7, r3
  404e34:	4640      	mov	r0, r8
  404e36:	f8ca 7004 	str.w	r7, [sl, #4]
  404e3a:	f7ff fedb 	bl	404bf4 <__malloc_unlock>
  404e3e:	e751      	b.n	404ce4 <_realloc_r+0xe4>
  404e40:	682b      	ldr	r3, [r5, #0]
  404e42:	6003      	str	r3, [r0, #0]
  404e44:	686b      	ldr	r3, [r5, #4]
  404e46:	6043      	str	r3, [r0, #4]
  404e48:	2a1b      	cmp	r2, #27
  404e4a:	d82d      	bhi.n	404ea8 <_realloc_r+0x2a8>
  404e4c:	f100 0308 	add.w	r3, r0, #8
  404e50:	f105 0208 	add.w	r2, r5, #8
  404e54:	e71b      	b.n	404c8e <_realloc_r+0x8e>
  404e56:	4632      	mov	r2, r6
  404e58:	6829      	ldr	r1, [r5, #0]
  404e5a:	6011      	str	r1, [r2, #0]
  404e5c:	6869      	ldr	r1, [r5, #4]
  404e5e:	6051      	str	r1, [r2, #4]
  404e60:	68a9      	ldr	r1, [r5, #8]
  404e62:	6091      	str	r1, [r2, #8]
  404e64:	461c      	mov	r4, r3
  404e66:	46d1      	mov	r9, sl
  404e68:	e72a      	b.n	404cc0 <_realloc_r+0xc0>
  404e6a:	eb09 0107 	add.w	r1, r9, r7
  404e6e:	ebab 0b07 	sub.w	fp, fp, r7
  404e72:	f04b 0201 	orr.w	r2, fp, #1
  404e76:	6099      	str	r1, [r3, #8]
  404e78:	604a      	str	r2, [r1, #4]
  404e7a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404e7e:	f003 0301 	and.w	r3, r3, #1
  404e82:	431f      	orrs	r7, r3
  404e84:	4640      	mov	r0, r8
  404e86:	f845 7c04 	str.w	r7, [r5, #-4]
  404e8a:	f7ff feb3 	bl	404bf4 <__malloc_unlock>
  404e8e:	462e      	mov	r6, r5
  404e90:	e728      	b.n	404ce4 <_realloc_r+0xe4>
  404e92:	4629      	mov	r1, r5
  404e94:	f7ff fe44 	bl	404b20 <memmove>
  404e98:	e6ff      	b.n	404c9a <_realloc_r+0x9a>
  404e9a:	4629      	mov	r1, r5
  404e9c:	4630      	mov	r0, r6
  404e9e:	461c      	mov	r4, r3
  404ea0:	46d1      	mov	r9, sl
  404ea2:	f7ff fe3d 	bl	404b20 <memmove>
  404ea6:	e70b      	b.n	404cc0 <_realloc_r+0xc0>
  404ea8:	68ab      	ldr	r3, [r5, #8]
  404eaa:	6083      	str	r3, [r0, #8]
  404eac:	68eb      	ldr	r3, [r5, #12]
  404eae:	60c3      	str	r3, [r0, #12]
  404eb0:	2a24      	cmp	r2, #36	; 0x24
  404eb2:	d017      	beq.n	404ee4 <_realloc_r+0x2e4>
  404eb4:	f100 0310 	add.w	r3, r0, #16
  404eb8:	f105 0210 	add.w	r2, r5, #16
  404ebc:	e6e7      	b.n	404c8e <_realloc_r+0x8e>
  404ebe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404ec2:	f023 0303 	bic.w	r3, r3, #3
  404ec6:	441c      	add	r4, r3
  404ec8:	462e      	mov	r6, r5
  404eca:	e6f9      	b.n	404cc0 <_realloc_r+0xc0>
  404ecc:	68a9      	ldr	r1, [r5, #8]
  404ece:	f8ca 1010 	str.w	r1, [sl, #16]
  404ed2:	68e9      	ldr	r1, [r5, #12]
  404ed4:	f8ca 1014 	str.w	r1, [sl, #20]
  404ed8:	2a24      	cmp	r2, #36	; 0x24
  404eda:	d00c      	beq.n	404ef6 <_realloc_r+0x2f6>
  404edc:	3510      	adds	r5, #16
  404ede:	f10a 0218 	add.w	r2, sl, #24
  404ee2:	e7b9      	b.n	404e58 <_realloc_r+0x258>
  404ee4:	692b      	ldr	r3, [r5, #16]
  404ee6:	6103      	str	r3, [r0, #16]
  404ee8:	696b      	ldr	r3, [r5, #20]
  404eea:	6143      	str	r3, [r0, #20]
  404eec:	f105 0218 	add.w	r2, r5, #24
  404ef0:	f100 0318 	add.w	r3, r0, #24
  404ef4:	e6cb      	b.n	404c8e <_realloc_r+0x8e>
  404ef6:	692a      	ldr	r2, [r5, #16]
  404ef8:	f8ca 2018 	str.w	r2, [sl, #24]
  404efc:	696a      	ldr	r2, [r5, #20]
  404efe:	f8ca 201c 	str.w	r2, [sl, #28]
  404f02:	3518      	adds	r5, #24
  404f04:	f10a 0220 	add.w	r2, sl, #32
  404f08:	e7a6      	b.n	404e58 <_realloc_r+0x258>
  404f0a:	4632      	mov	r2, r6
  404f0c:	e77f      	b.n	404e0e <_realloc_r+0x20e>
  404f0e:	4629      	mov	r1, r5
  404f10:	4630      	mov	r0, r6
  404f12:	9301      	str	r3, [sp, #4]
  404f14:	f7ff fe04 	bl	404b20 <memmove>
  404f18:	9b01      	ldr	r3, [sp, #4]
  404f1a:	e77e      	b.n	404e1a <_realloc_r+0x21a>
  404f1c:	68a9      	ldr	r1, [r5, #8]
  404f1e:	f8ca 1010 	str.w	r1, [sl, #16]
  404f22:	68e9      	ldr	r1, [r5, #12]
  404f24:	f8ca 1014 	str.w	r1, [sl, #20]
  404f28:	2a24      	cmp	r2, #36	; 0x24
  404f2a:	d003      	beq.n	404f34 <_realloc_r+0x334>
  404f2c:	3510      	adds	r5, #16
  404f2e:	f10a 0218 	add.w	r2, sl, #24
  404f32:	e76c      	b.n	404e0e <_realloc_r+0x20e>
  404f34:	692a      	ldr	r2, [r5, #16]
  404f36:	f8ca 2018 	str.w	r2, [sl, #24]
  404f3a:	696a      	ldr	r2, [r5, #20]
  404f3c:	f8ca 201c 	str.w	r2, [sl, #28]
  404f40:	3518      	adds	r5, #24
  404f42:	f10a 0220 	add.w	r2, sl, #32
  404f46:	e762      	b.n	404e0e <_realloc_r+0x20e>
  404f48:	204005c0 	.word	0x204005c0

00404f4c <_sbrk_r>:
  404f4c:	b538      	push	{r3, r4, r5, lr}
  404f4e:	4c07      	ldr	r4, [pc, #28]	; (404f6c <_sbrk_r+0x20>)
  404f50:	2300      	movs	r3, #0
  404f52:	4605      	mov	r5, r0
  404f54:	4608      	mov	r0, r1
  404f56:	6023      	str	r3, [r4, #0]
  404f58:	f7fd f9de 	bl	402318 <_sbrk>
  404f5c:	1c43      	adds	r3, r0, #1
  404f5e:	d000      	beq.n	404f62 <_sbrk_r+0x16>
  404f60:	bd38      	pop	{r3, r4, r5, pc}
  404f62:	6823      	ldr	r3, [r4, #0]
  404f64:	2b00      	cmp	r3, #0
  404f66:	d0fb      	beq.n	404f60 <_sbrk_r+0x14>
  404f68:	602b      	str	r3, [r5, #0]
  404f6a:	bd38      	pop	{r3, r4, r5, pc}
  404f6c:	2040ac14 	.word	0x2040ac14

00404f70 <__sread>:
  404f70:	b510      	push	{r4, lr}
  404f72:	460c      	mov	r4, r1
  404f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f78:	f000 f9f6 	bl	405368 <_read_r>
  404f7c:	2800      	cmp	r0, #0
  404f7e:	db03      	blt.n	404f88 <__sread+0x18>
  404f80:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404f82:	4403      	add	r3, r0
  404f84:	6523      	str	r3, [r4, #80]	; 0x50
  404f86:	bd10      	pop	{r4, pc}
  404f88:	89a3      	ldrh	r3, [r4, #12]
  404f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404f8e:	81a3      	strh	r3, [r4, #12]
  404f90:	bd10      	pop	{r4, pc}
  404f92:	bf00      	nop

00404f94 <__swrite>:
  404f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f98:	4616      	mov	r6, r2
  404f9a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404f9e:	461f      	mov	r7, r3
  404fa0:	05d3      	lsls	r3, r2, #23
  404fa2:	460c      	mov	r4, r1
  404fa4:	4605      	mov	r5, r0
  404fa6:	d507      	bpl.n	404fb8 <__swrite+0x24>
  404fa8:	2200      	movs	r2, #0
  404faa:	2302      	movs	r3, #2
  404fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fb0:	f000 f9c4 	bl	40533c <_lseek_r>
  404fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404fc0:	81a2      	strh	r2, [r4, #12]
  404fc2:	463b      	mov	r3, r7
  404fc4:	4632      	mov	r2, r6
  404fc6:	4628      	mov	r0, r5
  404fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404fcc:	f000 b8a4 	b.w	405118 <_write_r>

00404fd0 <__sseek>:
  404fd0:	b510      	push	{r4, lr}
  404fd2:	460c      	mov	r4, r1
  404fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fd8:	f000 f9b0 	bl	40533c <_lseek_r>
  404fdc:	89a3      	ldrh	r3, [r4, #12]
  404fde:	1c42      	adds	r2, r0, #1
  404fe0:	bf0e      	itee	eq
  404fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404fea:	6520      	strne	r0, [r4, #80]	; 0x50
  404fec:	81a3      	strh	r3, [r4, #12]
  404fee:	bd10      	pop	{r4, pc}

00404ff0 <__sclose>:
  404ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ff4:	f000 b908 	b.w	405208 <_close_r>

00404ff8 <__swbuf_r>:
  404ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ffa:	460d      	mov	r5, r1
  404ffc:	4614      	mov	r4, r2
  404ffe:	4606      	mov	r6, r0
  405000:	b110      	cbz	r0, 405008 <__swbuf_r+0x10>
  405002:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405004:	2b00      	cmp	r3, #0
  405006:	d04b      	beq.n	4050a0 <__swbuf_r+0xa8>
  405008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40500c:	69a3      	ldr	r3, [r4, #24]
  40500e:	60a3      	str	r3, [r4, #8]
  405010:	b291      	uxth	r1, r2
  405012:	0708      	lsls	r0, r1, #28
  405014:	d539      	bpl.n	40508a <__swbuf_r+0x92>
  405016:	6923      	ldr	r3, [r4, #16]
  405018:	2b00      	cmp	r3, #0
  40501a:	d036      	beq.n	40508a <__swbuf_r+0x92>
  40501c:	b2ed      	uxtb	r5, r5
  40501e:	0489      	lsls	r1, r1, #18
  405020:	462f      	mov	r7, r5
  405022:	d515      	bpl.n	405050 <__swbuf_r+0x58>
  405024:	6822      	ldr	r2, [r4, #0]
  405026:	6961      	ldr	r1, [r4, #20]
  405028:	1ad3      	subs	r3, r2, r3
  40502a:	428b      	cmp	r3, r1
  40502c:	da1c      	bge.n	405068 <__swbuf_r+0x70>
  40502e:	3301      	adds	r3, #1
  405030:	68a1      	ldr	r1, [r4, #8]
  405032:	1c50      	adds	r0, r2, #1
  405034:	3901      	subs	r1, #1
  405036:	60a1      	str	r1, [r4, #8]
  405038:	6020      	str	r0, [r4, #0]
  40503a:	7015      	strb	r5, [r2, #0]
  40503c:	6962      	ldr	r2, [r4, #20]
  40503e:	429a      	cmp	r2, r3
  405040:	d01a      	beq.n	405078 <__swbuf_r+0x80>
  405042:	89a3      	ldrh	r3, [r4, #12]
  405044:	07db      	lsls	r3, r3, #31
  405046:	d501      	bpl.n	40504c <__swbuf_r+0x54>
  405048:	2d0a      	cmp	r5, #10
  40504a:	d015      	beq.n	405078 <__swbuf_r+0x80>
  40504c:	4638      	mov	r0, r7
  40504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405050:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405056:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40505a:	81a2      	strh	r2, [r4, #12]
  40505c:	6822      	ldr	r2, [r4, #0]
  40505e:	6661      	str	r1, [r4, #100]	; 0x64
  405060:	6961      	ldr	r1, [r4, #20]
  405062:	1ad3      	subs	r3, r2, r3
  405064:	428b      	cmp	r3, r1
  405066:	dbe2      	blt.n	40502e <__swbuf_r+0x36>
  405068:	4621      	mov	r1, r4
  40506a:	4630      	mov	r0, r6
  40506c:	f7fe fda6 	bl	403bbc <_fflush_r>
  405070:	b940      	cbnz	r0, 405084 <__swbuf_r+0x8c>
  405072:	6822      	ldr	r2, [r4, #0]
  405074:	2301      	movs	r3, #1
  405076:	e7db      	b.n	405030 <__swbuf_r+0x38>
  405078:	4621      	mov	r1, r4
  40507a:	4630      	mov	r0, r6
  40507c:	f7fe fd9e 	bl	403bbc <_fflush_r>
  405080:	2800      	cmp	r0, #0
  405082:	d0e3      	beq.n	40504c <__swbuf_r+0x54>
  405084:	f04f 37ff 	mov.w	r7, #4294967295
  405088:	e7e0      	b.n	40504c <__swbuf_r+0x54>
  40508a:	4621      	mov	r1, r4
  40508c:	4630      	mov	r0, r6
  40508e:	f7fe fc81 	bl	403994 <__swsetup_r>
  405092:	2800      	cmp	r0, #0
  405094:	d1f6      	bne.n	405084 <__swbuf_r+0x8c>
  405096:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40509a:	6923      	ldr	r3, [r4, #16]
  40509c:	b291      	uxth	r1, r2
  40509e:	e7bd      	b.n	40501c <__swbuf_r+0x24>
  4050a0:	f7fe fde4 	bl	403c6c <__sinit>
  4050a4:	e7b0      	b.n	405008 <__swbuf_r+0x10>
  4050a6:	bf00      	nop

004050a8 <_wcrtomb_r>:
  4050a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4050aa:	4606      	mov	r6, r0
  4050ac:	b085      	sub	sp, #20
  4050ae:	461f      	mov	r7, r3
  4050b0:	b189      	cbz	r1, 4050d6 <_wcrtomb_r+0x2e>
  4050b2:	4c10      	ldr	r4, [pc, #64]	; (4050f4 <_wcrtomb_r+0x4c>)
  4050b4:	4d10      	ldr	r5, [pc, #64]	; (4050f8 <_wcrtomb_r+0x50>)
  4050b6:	6824      	ldr	r4, [r4, #0]
  4050b8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4050ba:	2c00      	cmp	r4, #0
  4050bc:	bf08      	it	eq
  4050be:	462c      	moveq	r4, r5
  4050c0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4050c4:	47a0      	blx	r4
  4050c6:	1c43      	adds	r3, r0, #1
  4050c8:	d103      	bne.n	4050d2 <_wcrtomb_r+0x2a>
  4050ca:	2200      	movs	r2, #0
  4050cc:	238a      	movs	r3, #138	; 0x8a
  4050ce:	603a      	str	r2, [r7, #0]
  4050d0:	6033      	str	r3, [r6, #0]
  4050d2:	b005      	add	sp, #20
  4050d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050d6:	460c      	mov	r4, r1
  4050d8:	4906      	ldr	r1, [pc, #24]	; (4050f4 <_wcrtomb_r+0x4c>)
  4050da:	4a07      	ldr	r2, [pc, #28]	; (4050f8 <_wcrtomb_r+0x50>)
  4050dc:	6809      	ldr	r1, [r1, #0]
  4050de:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4050e0:	2900      	cmp	r1, #0
  4050e2:	bf08      	it	eq
  4050e4:	4611      	moveq	r1, r2
  4050e6:	4622      	mov	r2, r4
  4050e8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4050ec:	a901      	add	r1, sp, #4
  4050ee:	47a0      	blx	r4
  4050f0:	e7e9      	b.n	4050c6 <_wcrtomb_r+0x1e>
  4050f2:	bf00      	nop
  4050f4:	20400020 	.word	0x20400020
  4050f8:	20400454 	.word	0x20400454

004050fc <__ascii_wctomb>:
  4050fc:	b121      	cbz	r1, 405108 <__ascii_wctomb+0xc>
  4050fe:	2aff      	cmp	r2, #255	; 0xff
  405100:	d804      	bhi.n	40510c <__ascii_wctomb+0x10>
  405102:	700a      	strb	r2, [r1, #0]
  405104:	2001      	movs	r0, #1
  405106:	4770      	bx	lr
  405108:	4608      	mov	r0, r1
  40510a:	4770      	bx	lr
  40510c:	238a      	movs	r3, #138	; 0x8a
  40510e:	6003      	str	r3, [r0, #0]
  405110:	f04f 30ff 	mov.w	r0, #4294967295
  405114:	4770      	bx	lr
  405116:	bf00      	nop

00405118 <_write_r>:
  405118:	b570      	push	{r4, r5, r6, lr}
  40511a:	460d      	mov	r5, r1
  40511c:	4c08      	ldr	r4, [pc, #32]	; (405140 <_write_r+0x28>)
  40511e:	4611      	mov	r1, r2
  405120:	4606      	mov	r6, r0
  405122:	461a      	mov	r2, r3
  405124:	4628      	mov	r0, r5
  405126:	2300      	movs	r3, #0
  405128:	6023      	str	r3, [r4, #0]
  40512a:	f7fc fc65 	bl	4019f8 <_write>
  40512e:	1c43      	adds	r3, r0, #1
  405130:	d000      	beq.n	405134 <_write_r+0x1c>
  405132:	bd70      	pop	{r4, r5, r6, pc}
  405134:	6823      	ldr	r3, [r4, #0]
  405136:	2b00      	cmp	r3, #0
  405138:	d0fb      	beq.n	405132 <_write_r+0x1a>
  40513a:	6033      	str	r3, [r6, #0]
  40513c:	bd70      	pop	{r4, r5, r6, pc}
  40513e:	bf00      	nop
  405140:	2040ac14 	.word	0x2040ac14

00405144 <__register_exitproc>:
  405144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405148:	4d2c      	ldr	r5, [pc, #176]	; (4051fc <__register_exitproc+0xb8>)
  40514a:	4606      	mov	r6, r0
  40514c:	6828      	ldr	r0, [r5, #0]
  40514e:	4698      	mov	r8, r3
  405150:	460f      	mov	r7, r1
  405152:	4691      	mov	r9, r2
  405154:	f7ff f94a 	bl	4043ec <__retarget_lock_acquire_recursive>
  405158:	4b29      	ldr	r3, [pc, #164]	; (405200 <__register_exitproc+0xbc>)
  40515a:	681c      	ldr	r4, [r3, #0]
  40515c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405160:	2b00      	cmp	r3, #0
  405162:	d03e      	beq.n	4051e2 <__register_exitproc+0x9e>
  405164:	685a      	ldr	r2, [r3, #4]
  405166:	2a1f      	cmp	r2, #31
  405168:	dc1c      	bgt.n	4051a4 <__register_exitproc+0x60>
  40516a:	f102 0e01 	add.w	lr, r2, #1
  40516e:	b176      	cbz	r6, 40518e <__register_exitproc+0x4a>
  405170:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405174:	2401      	movs	r4, #1
  405176:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40517a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40517e:	4094      	lsls	r4, r2
  405180:	4320      	orrs	r0, r4
  405182:	2e02      	cmp	r6, #2
  405184:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405188:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40518c:	d023      	beq.n	4051d6 <__register_exitproc+0x92>
  40518e:	3202      	adds	r2, #2
  405190:	f8c3 e004 	str.w	lr, [r3, #4]
  405194:	6828      	ldr	r0, [r5, #0]
  405196:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40519a:	f7ff f929 	bl	4043f0 <__retarget_lock_release_recursive>
  40519e:	2000      	movs	r0, #0
  4051a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051a4:	4b17      	ldr	r3, [pc, #92]	; (405204 <__register_exitproc+0xc0>)
  4051a6:	b30b      	cbz	r3, 4051ec <__register_exitproc+0xa8>
  4051a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4051ac:	f7ff f99a 	bl	4044e4 <malloc>
  4051b0:	4603      	mov	r3, r0
  4051b2:	b1d8      	cbz	r0, 4051ec <__register_exitproc+0xa8>
  4051b4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4051b8:	6002      	str	r2, [r0, #0]
  4051ba:	2100      	movs	r1, #0
  4051bc:	6041      	str	r1, [r0, #4]
  4051be:	460a      	mov	r2, r1
  4051c0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4051c4:	f04f 0e01 	mov.w	lr, #1
  4051c8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4051cc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4051d0:	2e00      	cmp	r6, #0
  4051d2:	d0dc      	beq.n	40518e <__register_exitproc+0x4a>
  4051d4:	e7cc      	b.n	405170 <__register_exitproc+0x2c>
  4051d6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4051da:	430c      	orrs	r4, r1
  4051dc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4051e0:	e7d5      	b.n	40518e <__register_exitproc+0x4a>
  4051e2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4051e6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4051ea:	e7bb      	b.n	405164 <__register_exitproc+0x20>
  4051ec:	6828      	ldr	r0, [r5, #0]
  4051ee:	f7ff f8ff 	bl	4043f0 <__retarget_lock_release_recursive>
  4051f2:	f04f 30ff 	mov.w	r0, #4294967295
  4051f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051fa:	bf00      	nop
  4051fc:	20400450 	.word	0x20400450
  405200:	004057bc 	.word	0x004057bc
  405204:	004044e5 	.word	0x004044e5

00405208 <_close_r>:
  405208:	b538      	push	{r3, r4, r5, lr}
  40520a:	4c07      	ldr	r4, [pc, #28]	; (405228 <_close_r+0x20>)
  40520c:	2300      	movs	r3, #0
  40520e:	4605      	mov	r5, r0
  405210:	4608      	mov	r0, r1
  405212:	6023      	str	r3, [r4, #0]
  405214:	f7fd f89c 	bl	402350 <_close>
  405218:	1c43      	adds	r3, r0, #1
  40521a:	d000      	beq.n	40521e <_close_r+0x16>
  40521c:	bd38      	pop	{r3, r4, r5, pc}
  40521e:	6823      	ldr	r3, [r4, #0]
  405220:	2b00      	cmp	r3, #0
  405222:	d0fb      	beq.n	40521c <_close_r+0x14>
  405224:	602b      	str	r3, [r5, #0]
  405226:	bd38      	pop	{r3, r4, r5, pc}
  405228:	2040ac14 	.word	0x2040ac14

0040522c <_fclose_r>:
  40522c:	b570      	push	{r4, r5, r6, lr}
  40522e:	b159      	cbz	r1, 405248 <_fclose_r+0x1c>
  405230:	4605      	mov	r5, r0
  405232:	460c      	mov	r4, r1
  405234:	b110      	cbz	r0, 40523c <_fclose_r+0x10>
  405236:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405238:	2b00      	cmp	r3, #0
  40523a:	d03c      	beq.n	4052b6 <_fclose_r+0x8a>
  40523c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40523e:	07d8      	lsls	r0, r3, #31
  405240:	d505      	bpl.n	40524e <_fclose_r+0x22>
  405242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405246:	b92b      	cbnz	r3, 405254 <_fclose_r+0x28>
  405248:	2600      	movs	r6, #0
  40524a:	4630      	mov	r0, r6
  40524c:	bd70      	pop	{r4, r5, r6, pc}
  40524e:	89a3      	ldrh	r3, [r4, #12]
  405250:	0599      	lsls	r1, r3, #22
  405252:	d53c      	bpl.n	4052ce <_fclose_r+0xa2>
  405254:	4621      	mov	r1, r4
  405256:	4628      	mov	r0, r5
  405258:	f7fe fc10 	bl	403a7c <__sflush_r>
  40525c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40525e:	4606      	mov	r6, r0
  405260:	b133      	cbz	r3, 405270 <_fclose_r+0x44>
  405262:	69e1      	ldr	r1, [r4, #28]
  405264:	4628      	mov	r0, r5
  405266:	4798      	blx	r3
  405268:	2800      	cmp	r0, #0
  40526a:	bfb8      	it	lt
  40526c:	f04f 36ff 	movlt.w	r6, #4294967295
  405270:	89a3      	ldrh	r3, [r4, #12]
  405272:	061a      	lsls	r2, r3, #24
  405274:	d422      	bmi.n	4052bc <_fclose_r+0x90>
  405276:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405278:	b141      	cbz	r1, 40528c <_fclose_r+0x60>
  40527a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40527e:	4299      	cmp	r1, r3
  405280:	d002      	beq.n	405288 <_fclose_r+0x5c>
  405282:	4628      	mov	r0, r5
  405284:	f7fe fe18 	bl	403eb8 <_free_r>
  405288:	2300      	movs	r3, #0
  40528a:	6323      	str	r3, [r4, #48]	; 0x30
  40528c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40528e:	b121      	cbz	r1, 40529a <_fclose_r+0x6e>
  405290:	4628      	mov	r0, r5
  405292:	f7fe fe11 	bl	403eb8 <_free_r>
  405296:	2300      	movs	r3, #0
  405298:	6463      	str	r3, [r4, #68]	; 0x44
  40529a:	f7fe fd13 	bl	403cc4 <__sfp_lock_acquire>
  40529e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4052a0:	2200      	movs	r2, #0
  4052a2:	07db      	lsls	r3, r3, #31
  4052a4:	81a2      	strh	r2, [r4, #12]
  4052a6:	d50e      	bpl.n	4052c6 <_fclose_r+0x9a>
  4052a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052aa:	f7ff f89d 	bl	4043e8 <__retarget_lock_close_recursive>
  4052ae:	f7fe fd0f 	bl	403cd0 <__sfp_lock_release>
  4052b2:	4630      	mov	r0, r6
  4052b4:	bd70      	pop	{r4, r5, r6, pc}
  4052b6:	f7fe fcd9 	bl	403c6c <__sinit>
  4052ba:	e7bf      	b.n	40523c <_fclose_r+0x10>
  4052bc:	6921      	ldr	r1, [r4, #16]
  4052be:	4628      	mov	r0, r5
  4052c0:	f7fe fdfa 	bl	403eb8 <_free_r>
  4052c4:	e7d7      	b.n	405276 <_fclose_r+0x4a>
  4052c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052c8:	f7ff f892 	bl	4043f0 <__retarget_lock_release_recursive>
  4052cc:	e7ec      	b.n	4052a8 <_fclose_r+0x7c>
  4052ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052d0:	f7ff f88c 	bl	4043ec <__retarget_lock_acquire_recursive>
  4052d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052d8:	2b00      	cmp	r3, #0
  4052da:	d1bb      	bne.n	405254 <_fclose_r+0x28>
  4052dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4052de:	f016 0601 	ands.w	r6, r6, #1
  4052e2:	d1b1      	bne.n	405248 <_fclose_r+0x1c>
  4052e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052e6:	f7ff f883 	bl	4043f0 <__retarget_lock_release_recursive>
  4052ea:	4630      	mov	r0, r6
  4052ec:	bd70      	pop	{r4, r5, r6, pc}
  4052ee:	bf00      	nop

004052f0 <_fstat_r>:
  4052f0:	b538      	push	{r3, r4, r5, lr}
  4052f2:	460b      	mov	r3, r1
  4052f4:	4c07      	ldr	r4, [pc, #28]	; (405314 <_fstat_r+0x24>)
  4052f6:	4605      	mov	r5, r0
  4052f8:	4611      	mov	r1, r2
  4052fa:	4618      	mov	r0, r3
  4052fc:	2300      	movs	r3, #0
  4052fe:	6023      	str	r3, [r4, #0]
  405300:	f7fd f829 	bl	402356 <_fstat>
  405304:	1c43      	adds	r3, r0, #1
  405306:	d000      	beq.n	40530a <_fstat_r+0x1a>
  405308:	bd38      	pop	{r3, r4, r5, pc}
  40530a:	6823      	ldr	r3, [r4, #0]
  40530c:	2b00      	cmp	r3, #0
  40530e:	d0fb      	beq.n	405308 <_fstat_r+0x18>
  405310:	602b      	str	r3, [r5, #0]
  405312:	bd38      	pop	{r3, r4, r5, pc}
  405314:	2040ac14 	.word	0x2040ac14

00405318 <_isatty_r>:
  405318:	b538      	push	{r3, r4, r5, lr}
  40531a:	4c07      	ldr	r4, [pc, #28]	; (405338 <_isatty_r+0x20>)
  40531c:	2300      	movs	r3, #0
  40531e:	4605      	mov	r5, r0
  405320:	4608      	mov	r0, r1
  405322:	6023      	str	r3, [r4, #0]
  405324:	f7fd f81c 	bl	402360 <_isatty>
  405328:	1c43      	adds	r3, r0, #1
  40532a:	d000      	beq.n	40532e <_isatty_r+0x16>
  40532c:	bd38      	pop	{r3, r4, r5, pc}
  40532e:	6823      	ldr	r3, [r4, #0]
  405330:	2b00      	cmp	r3, #0
  405332:	d0fb      	beq.n	40532c <_isatty_r+0x14>
  405334:	602b      	str	r3, [r5, #0]
  405336:	bd38      	pop	{r3, r4, r5, pc}
  405338:	2040ac14 	.word	0x2040ac14

0040533c <_lseek_r>:
  40533c:	b570      	push	{r4, r5, r6, lr}
  40533e:	460d      	mov	r5, r1
  405340:	4c08      	ldr	r4, [pc, #32]	; (405364 <_lseek_r+0x28>)
  405342:	4611      	mov	r1, r2
  405344:	4606      	mov	r6, r0
  405346:	461a      	mov	r2, r3
  405348:	4628      	mov	r0, r5
  40534a:	2300      	movs	r3, #0
  40534c:	6023      	str	r3, [r4, #0]
  40534e:	f7fd f809 	bl	402364 <_lseek>
  405352:	1c43      	adds	r3, r0, #1
  405354:	d000      	beq.n	405358 <_lseek_r+0x1c>
  405356:	bd70      	pop	{r4, r5, r6, pc}
  405358:	6823      	ldr	r3, [r4, #0]
  40535a:	2b00      	cmp	r3, #0
  40535c:	d0fb      	beq.n	405356 <_lseek_r+0x1a>
  40535e:	6033      	str	r3, [r6, #0]
  405360:	bd70      	pop	{r4, r5, r6, pc}
  405362:	bf00      	nop
  405364:	2040ac14 	.word	0x2040ac14

00405368 <_read_r>:
  405368:	b570      	push	{r4, r5, r6, lr}
  40536a:	460d      	mov	r5, r1
  40536c:	4c08      	ldr	r4, [pc, #32]	; (405390 <_read_r+0x28>)
  40536e:	4611      	mov	r1, r2
  405370:	4606      	mov	r6, r0
  405372:	461a      	mov	r2, r3
  405374:	4628      	mov	r0, r5
  405376:	2300      	movs	r3, #0
  405378:	6023      	str	r3, [r4, #0]
  40537a:	f7fc fb1f 	bl	4019bc <_read>
  40537e:	1c43      	adds	r3, r0, #1
  405380:	d000      	beq.n	405384 <_read_r+0x1c>
  405382:	bd70      	pop	{r4, r5, r6, pc}
  405384:	6823      	ldr	r3, [r4, #0]
  405386:	2b00      	cmp	r3, #0
  405388:	d0fb      	beq.n	405382 <_read_r+0x1a>
  40538a:	6033      	str	r3, [r6, #0]
  40538c:	bd70      	pop	{r4, r5, r6, pc}
  40538e:	bf00      	nop
  405390:	2040ac14 	.word	0x2040ac14

00405394 <__aeabi_uldivmod>:
  405394:	b953      	cbnz	r3, 4053ac <__aeabi_uldivmod+0x18>
  405396:	b94a      	cbnz	r2, 4053ac <__aeabi_uldivmod+0x18>
  405398:	2900      	cmp	r1, #0
  40539a:	bf08      	it	eq
  40539c:	2800      	cmpeq	r0, #0
  40539e:	bf1c      	itt	ne
  4053a0:	f04f 31ff 	movne.w	r1, #4294967295
  4053a4:	f04f 30ff 	movne.w	r0, #4294967295
  4053a8:	f000 b97a 	b.w	4056a0 <__aeabi_idiv0>
  4053ac:	f1ad 0c08 	sub.w	ip, sp, #8
  4053b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4053b4:	f000 f806 	bl	4053c4 <__udivmoddi4>
  4053b8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4053bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4053c0:	b004      	add	sp, #16
  4053c2:	4770      	bx	lr

004053c4 <__udivmoddi4>:
  4053c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4053c8:	468c      	mov	ip, r1
  4053ca:	460d      	mov	r5, r1
  4053cc:	4604      	mov	r4, r0
  4053ce:	9e08      	ldr	r6, [sp, #32]
  4053d0:	2b00      	cmp	r3, #0
  4053d2:	d151      	bne.n	405478 <__udivmoddi4+0xb4>
  4053d4:	428a      	cmp	r2, r1
  4053d6:	4617      	mov	r7, r2
  4053d8:	d96d      	bls.n	4054b6 <__udivmoddi4+0xf2>
  4053da:	fab2 fe82 	clz	lr, r2
  4053de:	f1be 0f00 	cmp.w	lr, #0
  4053e2:	d00b      	beq.n	4053fc <__udivmoddi4+0x38>
  4053e4:	f1ce 0c20 	rsb	ip, lr, #32
  4053e8:	fa01 f50e 	lsl.w	r5, r1, lr
  4053ec:	fa20 fc0c 	lsr.w	ip, r0, ip
  4053f0:	fa02 f70e 	lsl.w	r7, r2, lr
  4053f4:	ea4c 0c05 	orr.w	ip, ip, r5
  4053f8:	fa00 f40e 	lsl.w	r4, r0, lr
  4053fc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405400:	0c25      	lsrs	r5, r4, #16
  405402:	fbbc f8fa 	udiv	r8, ip, sl
  405406:	fa1f f987 	uxth.w	r9, r7
  40540a:	fb0a cc18 	mls	ip, sl, r8, ip
  40540e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405412:	fb08 f309 	mul.w	r3, r8, r9
  405416:	42ab      	cmp	r3, r5
  405418:	d90a      	bls.n	405430 <__udivmoddi4+0x6c>
  40541a:	19ed      	adds	r5, r5, r7
  40541c:	f108 32ff 	add.w	r2, r8, #4294967295
  405420:	f080 8123 	bcs.w	40566a <__udivmoddi4+0x2a6>
  405424:	42ab      	cmp	r3, r5
  405426:	f240 8120 	bls.w	40566a <__udivmoddi4+0x2a6>
  40542a:	f1a8 0802 	sub.w	r8, r8, #2
  40542e:	443d      	add	r5, r7
  405430:	1aed      	subs	r5, r5, r3
  405432:	b2a4      	uxth	r4, r4
  405434:	fbb5 f0fa 	udiv	r0, r5, sl
  405438:	fb0a 5510 	mls	r5, sl, r0, r5
  40543c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405440:	fb00 f909 	mul.w	r9, r0, r9
  405444:	45a1      	cmp	r9, r4
  405446:	d909      	bls.n	40545c <__udivmoddi4+0x98>
  405448:	19e4      	adds	r4, r4, r7
  40544a:	f100 33ff 	add.w	r3, r0, #4294967295
  40544e:	f080 810a 	bcs.w	405666 <__udivmoddi4+0x2a2>
  405452:	45a1      	cmp	r9, r4
  405454:	f240 8107 	bls.w	405666 <__udivmoddi4+0x2a2>
  405458:	3802      	subs	r0, #2
  40545a:	443c      	add	r4, r7
  40545c:	eba4 0409 	sub.w	r4, r4, r9
  405460:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405464:	2100      	movs	r1, #0
  405466:	2e00      	cmp	r6, #0
  405468:	d061      	beq.n	40552e <__udivmoddi4+0x16a>
  40546a:	fa24 f40e 	lsr.w	r4, r4, lr
  40546e:	2300      	movs	r3, #0
  405470:	6034      	str	r4, [r6, #0]
  405472:	6073      	str	r3, [r6, #4]
  405474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405478:	428b      	cmp	r3, r1
  40547a:	d907      	bls.n	40548c <__udivmoddi4+0xc8>
  40547c:	2e00      	cmp	r6, #0
  40547e:	d054      	beq.n	40552a <__udivmoddi4+0x166>
  405480:	2100      	movs	r1, #0
  405482:	e886 0021 	stmia.w	r6, {r0, r5}
  405486:	4608      	mov	r0, r1
  405488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40548c:	fab3 f183 	clz	r1, r3
  405490:	2900      	cmp	r1, #0
  405492:	f040 808e 	bne.w	4055b2 <__udivmoddi4+0x1ee>
  405496:	42ab      	cmp	r3, r5
  405498:	d302      	bcc.n	4054a0 <__udivmoddi4+0xdc>
  40549a:	4282      	cmp	r2, r0
  40549c:	f200 80fa 	bhi.w	405694 <__udivmoddi4+0x2d0>
  4054a0:	1a84      	subs	r4, r0, r2
  4054a2:	eb65 0503 	sbc.w	r5, r5, r3
  4054a6:	2001      	movs	r0, #1
  4054a8:	46ac      	mov	ip, r5
  4054aa:	2e00      	cmp	r6, #0
  4054ac:	d03f      	beq.n	40552e <__udivmoddi4+0x16a>
  4054ae:	e886 1010 	stmia.w	r6, {r4, ip}
  4054b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054b6:	b912      	cbnz	r2, 4054be <__udivmoddi4+0xfa>
  4054b8:	2701      	movs	r7, #1
  4054ba:	fbb7 f7f2 	udiv	r7, r7, r2
  4054be:	fab7 fe87 	clz	lr, r7
  4054c2:	f1be 0f00 	cmp.w	lr, #0
  4054c6:	d134      	bne.n	405532 <__udivmoddi4+0x16e>
  4054c8:	1beb      	subs	r3, r5, r7
  4054ca:	0c3a      	lsrs	r2, r7, #16
  4054cc:	fa1f fc87 	uxth.w	ip, r7
  4054d0:	2101      	movs	r1, #1
  4054d2:	fbb3 f8f2 	udiv	r8, r3, r2
  4054d6:	0c25      	lsrs	r5, r4, #16
  4054d8:	fb02 3318 	mls	r3, r2, r8, r3
  4054dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4054e0:	fb0c f308 	mul.w	r3, ip, r8
  4054e4:	42ab      	cmp	r3, r5
  4054e6:	d907      	bls.n	4054f8 <__udivmoddi4+0x134>
  4054e8:	19ed      	adds	r5, r5, r7
  4054ea:	f108 30ff 	add.w	r0, r8, #4294967295
  4054ee:	d202      	bcs.n	4054f6 <__udivmoddi4+0x132>
  4054f0:	42ab      	cmp	r3, r5
  4054f2:	f200 80d1 	bhi.w	405698 <__udivmoddi4+0x2d4>
  4054f6:	4680      	mov	r8, r0
  4054f8:	1aed      	subs	r5, r5, r3
  4054fa:	b2a3      	uxth	r3, r4
  4054fc:	fbb5 f0f2 	udiv	r0, r5, r2
  405500:	fb02 5510 	mls	r5, r2, r0, r5
  405504:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405508:	fb0c fc00 	mul.w	ip, ip, r0
  40550c:	45a4      	cmp	ip, r4
  40550e:	d907      	bls.n	405520 <__udivmoddi4+0x15c>
  405510:	19e4      	adds	r4, r4, r7
  405512:	f100 33ff 	add.w	r3, r0, #4294967295
  405516:	d202      	bcs.n	40551e <__udivmoddi4+0x15a>
  405518:	45a4      	cmp	ip, r4
  40551a:	f200 80b8 	bhi.w	40568e <__udivmoddi4+0x2ca>
  40551e:	4618      	mov	r0, r3
  405520:	eba4 040c 	sub.w	r4, r4, ip
  405524:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405528:	e79d      	b.n	405466 <__udivmoddi4+0xa2>
  40552a:	4631      	mov	r1, r6
  40552c:	4630      	mov	r0, r6
  40552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405532:	f1ce 0420 	rsb	r4, lr, #32
  405536:	fa05 f30e 	lsl.w	r3, r5, lr
  40553a:	fa07 f70e 	lsl.w	r7, r7, lr
  40553e:	fa20 f804 	lsr.w	r8, r0, r4
  405542:	0c3a      	lsrs	r2, r7, #16
  405544:	fa25 f404 	lsr.w	r4, r5, r4
  405548:	ea48 0803 	orr.w	r8, r8, r3
  40554c:	fbb4 f1f2 	udiv	r1, r4, r2
  405550:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405554:	fb02 4411 	mls	r4, r2, r1, r4
  405558:	fa1f fc87 	uxth.w	ip, r7
  40555c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405560:	fb01 f30c 	mul.w	r3, r1, ip
  405564:	42ab      	cmp	r3, r5
  405566:	fa00 f40e 	lsl.w	r4, r0, lr
  40556a:	d909      	bls.n	405580 <__udivmoddi4+0x1bc>
  40556c:	19ed      	adds	r5, r5, r7
  40556e:	f101 30ff 	add.w	r0, r1, #4294967295
  405572:	f080 808a 	bcs.w	40568a <__udivmoddi4+0x2c6>
  405576:	42ab      	cmp	r3, r5
  405578:	f240 8087 	bls.w	40568a <__udivmoddi4+0x2c6>
  40557c:	3902      	subs	r1, #2
  40557e:	443d      	add	r5, r7
  405580:	1aeb      	subs	r3, r5, r3
  405582:	fa1f f588 	uxth.w	r5, r8
  405586:	fbb3 f0f2 	udiv	r0, r3, r2
  40558a:	fb02 3310 	mls	r3, r2, r0, r3
  40558e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405592:	fb00 f30c 	mul.w	r3, r0, ip
  405596:	42ab      	cmp	r3, r5
  405598:	d907      	bls.n	4055aa <__udivmoddi4+0x1e6>
  40559a:	19ed      	adds	r5, r5, r7
  40559c:	f100 38ff 	add.w	r8, r0, #4294967295
  4055a0:	d26f      	bcs.n	405682 <__udivmoddi4+0x2be>
  4055a2:	42ab      	cmp	r3, r5
  4055a4:	d96d      	bls.n	405682 <__udivmoddi4+0x2be>
  4055a6:	3802      	subs	r0, #2
  4055a8:	443d      	add	r5, r7
  4055aa:	1aeb      	subs	r3, r5, r3
  4055ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4055b0:	e78f      	b.n	4054d2 <__udivmoddi4+0x10e>
  4055b2:	f1c1 0720 	rsb	r7, r1, #32
  4055b6:	fa22 f807 	lsr.w	r8, r2, r7
  4055ba:	408b      	lsls	r3, r1
  4055bc:	fa05 f401 	lsl.w	r4, r5, r1
  4055c0:	ea48 0303 	orr.w	r3, r8, r3
  4055c4:	fa20 fe07 	lsr.w	lr, r0, r7
  4055c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4055cc:	40fd      	lsrs	r5, r7
  4055ce:	ea4e 0e04 	orr.w	lr, lr, r4
  4055d2:	fbb5 f9fc 	udiv	r9, r5, ip
  4055d6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4055da:	fb0c 5519 	mls	r5, ip, r9, r5
  4055de:	fa1f f883 	uxth.w	r8, r3
  4055e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4055e6:	fb09 f408 	mul.w	r4, r9, r8
  4055ea:	42ac      	cmp	r4, r5
  4055ec:	fa02 f201 	lsl.w	r2, r2, r1
  4055f0:	fa00 fa01 	lsl.w	sl, r0, r1
  4055f4:	d908      	bls.n	405608 <__udivmoddi4+0x244>
  4055f6:	18ed      	adds	r5, r5, r3
  4055f8:	f109 30ff 	add.w	r0, r9, #4294967295
  4055fc:	d243      	bcs.n	405686 <__udivmoddi4+0x2c2>
  4055fe:	42ac      	cmp	r4, r5
  405600:	d941      	bls.n	405686 <__udivmoddi4+0x2c2>
  405602:	f1a9 0902 	sub.w	r9, r9, #2
  405606:	441d      	add	r5, r3
  405608:	1b2d      	subs	r5, r5, r4
  40560a:	fa1f fe8e 	uxth.w	lr, lr
  40560e:	fbb5 f0fc 	udiv	r0, r5, ip
  405612:	fb0c 5510 	mls	r5, ip, r0, r5
  405616:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40561a:	fb00 f808 	mul.w	r8, r0, r8
  40561e:	45a0      	cmp	r8, r4
  405620:	d907      	bls.n	405632 <__udivmoddi4+0x26e>
  405622:	18e4      	adds	r4, r4, r3
  405624:	f100 35ff 	add.w	r5, r0, #4294967295
  405628:	d229      	bcs.n	40567e <__udivmoddi4+0x2ba>
  40562a:	45a0      	cmp	r8, r4
  40562c:	d927      	bls.n	40567e <__udivmoddi4+0x2ba>
  40562e:	3802      	subs	r0, #2
  405630:	441c      	add	r4, r3
  405632:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405636:	eba4 0408 	sub.w	r4, r4, r8
  40563a:	fba0 8902 	umull	r8, r9, r0, r2
  40563e:	454c      	cmp	r4, r9
  405640:	46c6      	mov	lr, r8
  405642:	464d      	mov	r5, r9
  405644:	d315      	bcc.n	405672 <__udivmoddi4+0x2ae>
  405646:	d012      	beq.n	40566e <__udivmoddi4+0x2aa>
  405648:	b156      	cbz	r6, 405660 <__udivmoddi4+0x29c>
  40564a:	ebba 030e 	subs.w	r3, sl, lr
  40564e:	eb64 0405 	sbc.w	r4, r4, r5
  405652:	fa04 f707 	lsl.w	r7, r4, r7
  405656:	40cb      	lsrs	r3, r1
  405658:	431f      	orrs	r7, r3
  40565a:	40cc      	lsrs	r4, r1
  40565c:	6037      	str	r7, [r6, #0]
  40565e:	6074      	str	r4, [r6, #4]
  405660:	2100      	movs	r1, #0
  405662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405666:	4618      	mov	r0, r3
  405668:	e6f8      	b.n	40545c <__udivmoddi4+0x98>
  40566a:	4690      	mov	r8, r2
  40566c:	e6e0      	b.n	405430 <__udivmoddi4+0x6c>
  40566e:	45c2      	cmp	sl, r8
  405670:	d2ea      	bcs.n	405648 <__udivmoddi4+0x284>
  405672:	ebb8 0e02 	subs.w	lr, r8, r2
  405676:	eb69 0503 	sbc.w	r5, r9, r3
  40567a:	3801      	subs	r0, #1
  40567c:	e7e4      	b.n	405648 <__udivmoddi4+0x284>
  40567e:	4628      	mov	r0, r5
  405680:	e7d7      	b.n	405632 <__udivmoddi4+0x26e>
  405682:	4640      	mov	r0, r8
  405684:	e791      	b.n	4055aa <__udivmoddi4+0x1e6>
  405686:	4681      	mov	r9, r0
  405688:	e7be      	b.n	405608 <__udivmoddi4+0x244>
  40568a:	4601      	mov	r1, r0
  40568c:	e778      	b.n	405580 <__udivmoddi4+0x1bc>
  40568e:	3802      	subs	r0, #2
  405690:	443c      	add	r4, r7
  405692:	e745      	b.n	405520 <__udivmoddi4+0x15c>
  405694:	4608      	mov	r0, r1
  405696:	e708      	b.n	4054aa <__udivmoddi4+0xe6>
  405698:	f1a8 0802 	sub.w	r8, r8, #2
  40569c:	443d      	add	r5, r7
  40569e:	e72b      	b.n	4054f8 <__udivmoddi4+0x134>

004056a0 <__aeabi_idiv0>:
  4056a0:	4770      	bx	lr
  4056a2:	bf00      	nop
  4056a4:	454c4449 	.word	0x454c4449
  4056a8:	00000000 	.word	0x00000000
  4056ac:	20726d54 	.word	0x20726d54
  4056b0:	00637653 	.word	0x00637653
  4056b4:	686c6146 	.word	0x686c6146
  4056b8:	6d652061 	.word	0x6d652061
  4056bc:	69726320 	.word	0x69726320
  4056c0:	61207261 	.word	0x61207261
  4056c4:	6c696620 	.word	0x6c696620
  4056c8:	00000a61 	.word	0x00000a61
  4056cc:	43464e5b 	.word	0x43464e5b
  4056d0:	4f45205d 	.word	0x4f45205d
  4056d4:	65722053 	.word	0x65722053
  4056d8:	65686361 	.word	0x65686361
  4056dc:	00000a64 	.word	0x00000a64
  4056e0:	43464e5b 	.word	0x43464e5b
  4056e4:	4449205d 	.word	0x4449205d
  4056e8:	20736920 	.word	0x20736920
  4056ec:	000a7325 	.word	0x000a7325
  4056f0:	57202d2d 	.word	0x57202d2d
  4056f4:	31434e49 	.word	0x31434e49
  4056f8:	20303035 	.word	0x20303035
  4056fc:	74616577 	.word	0x74616577
  405700:	20726568 	.word	0x20726568
  405704:	65696c63 	.word	0x65696c63
  405708:	6520746e 	.word	0x6520746e
  40570c:	706d6178 	.word	0x706d6178
  405710:	2d20656c 	.word	0x2d20656c
  405714:	2d0a0d2d 	.word	0x2d0a0d2d
  405718:	4153202d 	.word	0x4153202d
  40571c:	3037454d 	.word	0x3037454d
  405720:	4c50582d 	.word	0x4c50582d
  405724:	2d2d2044 	.word	0x2d2d2044
  405728:	2d2d0a0d 	.word	0x2d2d0a0d
  40572c:	6d6f4320 	.word	0x6d6f4320
  405730:	656c6970 	.word	0x656c6970
  405734:	4d203a64 	.word	0x4d203a64
  405738:	32207961 	.word	0x32207961
  40573c:	30322037 	.word	0x30322037
  405740:	30203831 	.word	0x30203831
  405744:	31353a34 	.word	0x31353a34
  405748:	2038343a 	.word	0x2038343a
  40574c:	0a0d2d2d 	.word	0x0a0d2d2d
  405750:	00000000 	.word	0x00000000
  405754:	4e49414d 	.word	0x4e49414d
  405758:	00000000 	.word	0x00000000
  40575c:	6c696146 	.word	0x6c696146
  405760:	74206465 	.word	0x74206465
  405764:	7263206f 	.word	0x7263206f
  405768:	65746165 	.word	0x65746165
  40576c:	69614d20 	.word	0x69614d20
  405770:	6174206e 	.word	0x6174206e
  405774:	0a0d6b73 	.word	0x0a0d6b73
  405778:	00000000 	.word	0x00000000
  40577c:	0043464e 	.word	0x0043464e
  405780:	6c696146 	.word	0x6c696146
  405784:	74206465 	.word	0x74206465
  405788:	7263206f 	.word	0x7263206f
  40578c:	65746165 	.word	0x65746165
  405790:	43464e20 	.word	0x43464e20
  405794:	73617420 	.word	0x73617420
  405798:	000a0d6b 	.word	0x000a0d6b
  40579c:	0044454c 	.word	0x0044454c
  4057a0:	6c696146 	.word	0x6c696146
  4057a4:	74206465 	.word	0x74206465
  4057a8:	7263206f 	.word	0x7263206f
  4057ac:	65746165 	.word	0x65746165
  4057b0:	44454c20 	.word	0x44454c20
  4057b4:	73617420 	.word	0x73617420
  4057b8:	000a0d6b 	.word	0x000a0d6b

004057bc <_global_impure_ptr>:
  4057bc:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  4057cc:	46454443 00000000 33323130 37363534     CDEF....01234567
  4057dc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4057ec:	0000296c                                l)..

004057f0 <blanks.7217>:
  4057f0:	20202020 20202020 20202020 20202020                     

00405800 <zeroes.7218>:
  405800:	30303030 30303030 30303030 30303030     0000000000000000
  405810:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405820 <_ctype_>:
  405820:	20202000 20202020 28282020 20282828     .         ((((( 
  405830:	20202020 20202020 20202020 20202020                     
  405840:	10108820 10101010 10101010 10101010      ...............
  405850:	04040410 04040404 10040404 10101010     ................
  405860:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405870:	01010101 01010101 01010101 10101010     ................
  405880:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405890:	02020202 02020202 02020202 10101010     ................
  4058a0:	00000020 00000000 00000000 00000000      ...............
	...

00405924 <_init>:
  405924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405926:	bf00      	nop
  405928:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40592a:	bc08      	pop	{r3}
  40592c:	469e      	mov	lr, r3
  40592e:	4770      	bx	lr

00405930 <__init_array_start>:
  405930:	00403a5d 	.word	0x00403a5d

00405934 <__frame_dummy_init_array_entry>:
  405934:	00400165                                e.@.

00405938 <_fini>:
  405938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40593a:	bf00      	nop
  40593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40593e:	bc08      	pop	{r3}
  405940:	469e      	mov	lr, r3
  405942:	4770      	bx	lr

00405944 <__fini_array_start>:
  405944:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <xFreeBytesRemaining>:
20400010:	a000 0000                                   ....

20400014 <xNextTaskUnblockTime>:
20400014:	ffff ffff                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	abf0 2040                                   ..@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	50fd 0040 4a55 0040 0000 0000 5820 0040     .P@.UJ@..... X@.
20400544:	581c 0040 5750 0040 5750 0040 5750 0040     .X@.PW@.PW@.PW@.
20400554:	5750 0040 5750 0040 5750 0040 5750 0040     PW@.PW@.PW@.PW@.
20400564:	5750 0040 5750 0040 ffff ffff ffff ffff     PW@.PW@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
